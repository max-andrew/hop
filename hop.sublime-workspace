{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"chains",
				"chainsSortedByAPR"
			],
			[
				"token",
				"tokenSymbol"
			],
			[
				"goTo",
				"goToNextSection"
			],
			[
				"selected",
				"selectedNetwork"
			],
			[
				"pool",
				"poolStats"
			],
			[
				"destinationNet",
				"destinationNetworkId"
			],
			[
				"get",
				"getNetworksWithYields"
			],
			[
				"destinationNe",
				"destinationNetworkNetwork"
			],
			[
				"N",
				"NetworkSelector"
			],
			[
				"slug",
				"ChainSlug"
			],
			[
				"min",
				"minAmount"
			],
			[
				"minA",
				"minAmount"
			],
			[
				"chain",
				"chainSlug"
			],
			[
				"des",
				"destinationNetworkSlug"
			],
			[
				"bridge",
				"bridgeTxHash"
			],
			[
				"bridgeT",
				"bridgeTxHash"
			],
			[
				"succes",
				"successfully"
			],
			[
				"lpTok",
				"lpTokenBalance"
			],
			[
				"approv",
				"approveTx"
			],
			[
				"tok",
				"tokenSymbol"
			],
			[
				"op",
				"optimismHETH"
			],
			[
				"is",
				"isUserConfiguring"
			],
			[
				"set",
				"setIsUserConfiguring"
			],
			[
				"outlets",
				"selectedOutlets"
			],
			[
				"outlet",
				"outletSelectors"
			],
			[
				"space-",
				"space-y-12"
			],
			[
				"Conf",
				"ConfigScreen"
			],
			[
				"Feed",
				"FeedScreen"
			],
			[
				"show",
				"showConfig"
			],
			[
				"shuff",
				"shuffled_feed_keys"
			],
			[
				"shuffle",
				"shuffled_feed_keys"
			],
			[
				"feed",
				"feedInProgress"
			],
			[
				"fee",
				"feedInProgress"
			],
			[
				"sou",
				"sound_file_name"
			],
			[
				"FEE",
				"feedInProgress"
			],
			[
				"fe",
				"feedInProgress"
			],
			[
				"artic",
				"article_index"
			],
			[
				"articles",
				"maxArticlesPerOutlet"
			],
			[
				"head",
				"headlinesPerPage"
			],
			[
				"feed_",
				"feed_keys"
			],
			[
				"sele",
				"selected_outlet"
			],
			[
				"curre",
				"currentPage"
			],
			[
				"cur",
				"currentPage"
			],
			[
				"curren",
				"currentPage"
			],
			[
				"CURREN",
				"currentPage"
			],
			[
				"fade",
				"fadeIn"
			],
			[
				"Curr",
				"currencyType"
			],
			[
				"collec",
				"collectionID"
			],
			[
				"ser",
				"serialNumber"
			],
			[
				"d",
				"flexDirection"
			],
			[
				"ac",
				"activity"
			],
			[
				"has",
				"hasFilters"
			],
			[
				"col",
				"collectionMarketplace"
			],
			[
				"getF",
				"getFullImageCloudinaryURL"
			],
			[
				"font-",
				"font-bold"
			],
			[
				"netw",
				"networkDefaults"
			],
			[
				"OP",
				"OPTIMISM_KOVAN_CHAIN_ID"
			],
			[
				"wallet",
				"walletconnect"
			],
			[
				"use",
				"useActivatingConnector"
			],
			[
				"right",
				"rightokenAddress"
			],
			[
				"I",
				"INonfungiblePositionManager"
			],
			[
				"networ",
				"networkDefaults"
			],
			[
				"space",
				"space-y-9"
			],
			[
				"max",
				"max-w-xs"
			],
			[
				"cu",
				"currentStepInSessionStorage"
			],
			[
				"art",
				"artistName"
			],
			[
				"su",
				"successCondition"
			],
			[
				"trie",
				"triedEager"
			],
			[
				"text",
				"text-center"
			],
			[
				"user",
				"userPrompts"
			],
			[
				"font-m",
				"font-medium"
			],
			[
				"just",
				"justify-self-start"
			],
			[
				"acce",
				"acceptableTestNetworks"
			],
			[
				"cr",
				"cryptoPro"
			],
			[
				"song",
				"songTitle"
			],
			[
				"resea",
				"resaleRoyaltyPercent"
			],
			[
				"legal",
				"legalAgreement"
			],
			[
				"lega",
				"legalAgreementLibrary"
			],
			[
				"sect",
				"sectionsIncluded"
			],
			[
				"spac",
				"space-y-2"
			],
			[
				"term",
				"termCustomization"
			],
			[
				"reset",
				"resetFormValues"
			],
			[
				"aud",
				"audioFileError"
			],
			[
				"artist",
				"artistNameError"
			],
			[
				"setau",
				"setAudioFileNameError"
			],
			[
				"setSong",
				"setSongTitleError"
			],
			[
				"a",
				"audioFileName"
			],
			[
				"place",
				"place-items-center"
			],
			[
				"te",
				"text-sm"
			],
			[
				"wa",
				"walletAppSelected"
			],
			[
				"Right",
				"rightokenBalance"
			],
			[
				"mati",
				"maticProvider"
			],
			[
				"We",
				"Web3Provider"
			],
			[
				"Web",
				"Web3DebugPanel"
			],
			[
				"getE",
				"getConnectedWalletApp"
			],
			[
				"connec",
				"connectWallet"
			],
			[
				"connect",
				"connectWallet"
			],
			[
				"wal",
				"walletAppSelected"
			],
			[
				"font",
				"font-semibold"
			],
			[
				"wall",
				"walletAppSelected"
			],
			[
				"conn",
				"connectWallet"
			],
			[
				"acti",
				"activatingConnector"
			],
			[
				"t",
				"text-sm"
			],
			[
				"justi",
				"justify-self-end"
			],
			[
				"pla",
				"place-self-center"
			],
			[
				"bg",
				"bg-gray-100"
			],
			[
				"Logo",
				"rightoken-logo"
			],
			[
				"jso",
				"jsonContent"
			],
			[
				"code",
				"code_request"
			],
			[
				"Mee",
				"MeetTheTeamSlide"
			],
			[
				"backgrou",
				"backgroundSize"
			],
			[
				"NO",
				"NogrammerButton"
			],
			[
				"Georg",
				"GeorgeEdwardsImage"
			]
		]
	},
	"buffers":
	[
		{
			"file": "packages/frontend/src/pages/Pools/PoolDetails/PoolDetails.tsx",
			"settings":
			{
				"buffer_size": 16683,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"paste",
					null,
					"AgAAAFAEAAAAAAAAgwQAAAAAAAAAAAAAgwQAAAAAAACDBAAAAAAAAEQAAABpbXBvcnQgeyBSZWJhbGFuY2VNb2RhbCB9IGZyb20gJ3NyYy9jb21wb25lbnRzL21vZGFsL1JlYmFsYW5jZU1vZGFsJw",
					"AQAAAAAAAAABAAAAlAQAAAAAAABQBAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert_snippet",
					{
						"contents": "{${0:$SELECTION}}"
					},
					"AgAAAFcEAAAAAAAAVwQAAAAAAAAFAAAATW9kYWxXBAAAAAAAAF4EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwQAAAAAAABcBAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFgEAAAAAAAAWQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAQAAAAAAABYBAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF4EAAAAAAAAXwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgQAAAAAAABeBAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "rE"
					},
					"AwAAAFkEAAAAAAAAWgQAAAAAAAAAAAAAWgQAAAAAAABaBAAAAAAAAAUAAABNb2RhbFoEAAAAAAAAWwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQQAAAAAAABeBAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					2,
					"left_delete",
					null,
					"AgAAAFoEAAAAAAAAWgQAAAAAAAABAAAARVkEAAAAAAAAWQQAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAWwQAAAAAAABbBAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "Rebal"
					},
					"BQAAAFkEAAAAAAAAWgQAAAAAAAAAAAAAWgQAAAAAAABbBAAAAAAAAAAAAABbBAAAAAAAAFwEAAAAAAAAAAAAAFwEAAAAAAAAXQQAAAAAAAAAAAAAXQQAAAAAAABeBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQQAAAAAAABZBAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert_completion",
					{
						"completion": "RebalanceModal",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "RebalanceModal"
					},
					"AgAAAFkEAAAAAAAAWQQAAAAAAAAFAAAAUmViYWxZBAAAAAAAAGcEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgQAAAAAAABeBAAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAGIEAAAAAAAAYwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYgQAAAAAAABiBAAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALQJAAAAAAAAtQkAAAAAAAAAAAAAtQkAAAAAAAC3CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAkAAAAAAAC0CQAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"paste",
					null,
					"AQAAALcJAAAAAAAA3QkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtwkAAAAAAAC3CQAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"left_delete",
					null,
					"AQAAALcJAAAAAAAAtwkAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAuQkAAAAAAAC5CQAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAABgSAAAAAAAAGRIAAAAAAAAAAAAAGRIAAAAAAAAbEgAAAAAAAAAAAAAbEgAAAAAAABwSAAAAAAAAAAAAABwSAAAAAAAAHhIAAAAAAAAAAAAAGRIAAAAAAAAZEgAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAGBIAAAAAAAAYEgAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAABwSAAAAAAAAHRIAAAAAAAAAAAAAHRIAAAAAAAAeEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHBIAAAAAAAAcEgAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": " get"
					},
					"BAAAAB4SAAAAAAAAHxIAAAAAAAAAAAAAHxIAAAAAAAAgEgAAAAAAAAAAAAAgEgAAAAAAACESAAAAAAAAAAAAACESAAAAAAAAIhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHhIAAAAAAAAeEgAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": " ara"
					},
					"BAAAACISAAAAAAAAIxIAAAAAAAAAAAAAIxIAAAAAAAAkEgAAAAAAAAAAAAAkEgAAAAAAACUSAAAAAAAAAAAAACUSAAAAAAAAJhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIhIAAAAAAAAiEgAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"left_delete",
					null,
					"AQAAACUSAAAAAAAAJRIAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAJhIAAAAAAAAmEgAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "ray"
					},
					"AwAAACUSAAAAAAAAJhIAAAAAAAAAAAAAJhIAAAAAAAAnEgAAAAAAAAAAAAAnEgAAAAAAACgSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJRIAAAAAAAAlEgAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAACgSAAAAAAAAKRIAAAAAAAAAAAAAKRIAAAAAAAAqEgAAAAAAAAAAAAAqEgAAAAAAACsSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKBIAAAAAAAAoEgAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACsSAAAAAAAALBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKxIAAAAAAAArEgAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": "aprs"
					},
					"BAAAACwSAAAAAAAALRIAAAAAAAAAAAAALRIAAAAAAAAuEgAAAAAAAAAAAAAuEgAAAAAAAC8SAAAAAAAAAAAAAC8SAAAAAAAAMBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALBIAAAAAAAAsEgAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAADASAAAAAAAAMRIAAAAAAAAAAAAAMRIAAAAAAAAyEgAAAAAAAAAAAAAyEgAAAAAAADMSAAAAAAAAAAAAADMSAAAAAAAANBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMBIAAAAAAAAwEgAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADQSAAAAAAAANRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANBIAAAAAAAA0EgAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADUSAAAAAAAANhIAAAAAAAAAAAAANhIAAAAAAAA4EgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANRIAAAAAAAA1EgAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"paste",
					null,
					"AQAAADgSAAAAAAAAORMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOBIAAAAAAAA4EgAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"left_delete",
					null,
					"AQAAADgSAAAAAAAAOBIAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAOhIAAAAAAAA6EgAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": "AOR"
					},
					"BAAAACwSAAAAAAAALRIAAAAAAAAAAAAALRIAAAAAAAAtEgAAAAAAAAQAAABhcHJzLRIAAAAAAAAuEgAAAAAAAAAAAAAuEgAAAAAAAC8SAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALBIAAAAAAAAwEgAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					2,
					"left_delete",
					null,
					"AgAAAC4SAAAAAAAALhIAAAAAAAABAAAAUi0SAAAAAAAALRIAAAAAAAABAAAATw",
					"AQAAAAAAAAABAAAALxIAAAAAAAAvEgAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": "PRs"
					},
					"AwAAAC0SAAAAAAAALhIAAAAAAAAAAAAALhIAAAAAAAAvEgAAAAAAAAAAAAAvEgAAAAAAADASAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALRIAAAAAAAAtEgAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADASAAAAAAAAMRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMBIAAAAAAAAwEgAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"left_delete",
					null,
					"AQAAADASAAAAAAAAMBIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAMRIAAAAAAAAxEgAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": "potential"
					},
					"CQAAADUSAAAAAAAANhIAAAAAAAAAAAAANhIAAAAAAAA3EgAAAAAAAAAAAAA3EgAAAAAAADgSAAAAAAAAAAAAADgSAAAAAAAAORIAAAAAAAAAAAAAORIAAAAAAAA6EgAAAAAAAAAAAAA6EgAAAAAAADsSAAAAAAAAAAAAADsSAAAAAAAAPBIAAAAAAAAAAAAAPBIAAAAAAAA9EgAAAAAAAAAAAAA9EgAAAAAAAD4SAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANRIAAAAAAAA1EgAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": " networks"
					},
					"CQAAAD4SAAAAAAAAPxIAAAAAAAAAAAAAPxIAAAAAAABAEgAAAAAAAAAAAABAEgAAAAAAAEESAAAAAAAAAAAAAEESAAAAAAAAQhIAAAAAAAAAAAAAQhIAAAAAAABDEgAAAAAAAAAAAABDEgAAAAAAAEQSAAAAAAAAAAAAAEQSAAAAAAAARRIAAAAAAAAAAAAARRIAAAAAAABGEgAAAAAAAAAAAABGEgAAAAAAAEcSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPhIAAAAAAAA+EgAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"paste",
					null,
					"AgAAAEgSAAAAAAAAIBMAAAAAAAAAAAAAIBMAAAAAAAAgEwAAAAAAAAEBAAAgIGNvbnN0IHBvdGVudGlhbERlc3RpbmF0aW9uTmV0d29ya09iamVjdHMgPSBuZXR3b3Jrcy5yZWR1Y2UoKGFjYzogTmV0d29ya1tdLCBuZXR3b3JrKSA9PiB7CiAgICBjb25zdCBmb3VuZE5ldHdvcmsgPSBmaW5kTmV0d29ya0J5U2x1ZyhuZXR3b3JrWzBdKQogICAgaWYgKGZvdW5kTmV0d29yayAmJiBuZXR3b3JrWzBdICE9PSBjaGFpblNsdWcpIHsKICAgICAgYWNjLnB1c2goZm91bmROZXR3b3JrKQogICAgfQogICAgcmV0dXJuIGFjYwogIH0sIFtdKQ",
					"AQAAAAAAAAABAAAASRMAAAAAAABIEgAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAEcSAAAAAAAASBIAAAAAAAAAAAAASBIAAAAAAABJEgAAAAAAAAAAAABJEgAAAAAAAEoSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARxIAAAAAAABHEgAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": " determine"
					},
					"CgAAAEoSAAAAAAAASxIAAAAAAAAAAAAASxIAAAAAAABMEgAAAAAAAAAAAABMEgAAAAAAAE0SAAAAAAAAAAAAAE0SAAAAAAAAThIAAAAAAAAAAAAAThIAAAAAAABPEgAAAAAAAAAAAABPEgAAAAAAAFASAAAAAAAAAAAAAFASAAAAAAAAURIAAAAAAAAAAAAAURIAAAAAAABSEgAAAAAAAAAAAABSEgAAAAAAAFMSAAAAAAAAAAAAAFMSAAAAAAAAVBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAShIAAAAAAABKEgAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": " if"
					},
					"AwAAAFQSAAAAAAAAVRIAAAAAAAAAAAAAVRIAAAAAAABWEgAAAAAAAAAAAABWEgAAAAAAAFcSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVBIAAAAAAABUEgAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": " there's"
					},
					"CAAAAFcSAAAAAAAAWBIAAAAAAAAAAAAAWBIAAAAAAABZEgAAAAAAAAAAAABZEgAAAAAAAFoSAAAAAAAAAAAAAFoSAAAAAAAAWxIAAAAAAAAAAAAAWxIAAAAAAABcEgAAAAAAAAAAAABcEgAAAAAAAF0SAAAAAAAAAAAAAF0SAAAAAAAAXhIAAAAAAAAAAAAAXhIAAAAAAABfEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVxIAAAAAAABXEgAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAAF8SAAAAAAAAYBIAAAAAAAAAAAAAYBIAAAAAAABhEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXxIAAAAAAABfEgAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": " better"
					},
					"BwAAAGESAAAAAAAAYhIAAAAAAAAAAAAAYhIAAAAAAABjEgAAAAAAAAAAAABjEgAAAAAAAGQSAAAAAAAAAAAAAGQSAAAAAAAAZRIAAAAAAAAAAAAAZRIAAAAAAABmEgAAAAAAAAAAAABmEgAAAAAAAGcSAAAAAAAAAAAAAGcSAAAAAAAAaBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYRIAAAAAAABhEgAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": " net"
					},
					"BAAAAGgSAAAAAAAAaRIAAAAAAAAAAAAAaRIAAAAAAABqEgAAAAAAAAAAAABqEgAAAAAAAGsSAAAAAAAAAAAAAGsSAAAAAAAAbBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaBIAAAAAAABoEgAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					11,
					"left_delete",
					null,
					"CwAAAGsSAAAAAAAAaxIAAAAAAAABAAAAdGoSAAAAAAAAahIAAAAAAAABAAAAZWkSAAAAAAAAaRIAAAAAAAABAAAAbmgSAAAAAAAAaBIAAAAAAAABAAAAIGcSAAAAAAAAZxIAAAAAAAABAAAAcmYSAAAAAAAAZhIAAAAAAAABAAAAZWUSAAAAAAAAZRIAAAAAAAABAAAAdGQSAAAAAAAAZBIAAAAAAAABAAAAdGMSAAAAAAAAYxIAAAAAAAABAAAAZWISAAAAAAAAYhIAAAAAAAABAAAAYmESAAAAAAAAYRIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAbBIAAAAAAABsEgAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					10,
					"left_delete",
					null,
					"CgAAAGASAAAAAAAAYBIAAAAAAAABAAAAYV8SAAAAAAAAXxIAAAAAAAABAAAAIF4SAAAAAAAAXhIAAAAAAAABAAAAc10SAAAAAAAAXRIAAAAAAAABAAAAJ1wSAAAAAAAAXBIAAAAAAAABAAAAZVsSAAAAAAAAWxIAAAAAAAABAAAAcloSAAAAAAAAWhIAAAAAAAABAAAAZVkSAAAAAAAAWRIAAAAAAAABAAAAaFgSAAAAAAAAWBIAAAAAAAABAAAAdFcSAAAAAAAAVxIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAYRIAAAAAAABhEgAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": " n"
					},
					"AgAAAFcSAAAAAAAAWBIAAAAAAAAAAAAAWBIAAAAAAABZEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVxIAAAAAAABXEgAAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"left_delete",
					null,
					"AQAAAFgSAAAAAAAAWBIAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAWRIAAAAAAABZEgAAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					1,
					"insert",
					{
						"characters": "anit"
					},
					"BAAAAFgSAAAAAAAAWRIAAAAAAAAAAAAAWRIAAAAAAABaEgAAAAAAAAAAAABaEgAAAAAAAFsSAAAAAAAAAAAAAFsSAAAAAAAAXBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWBIAAAAAAABYEgAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					2,
					"left_delete",
					null,
					"AgAAAFsSAAAAAAAAWxIAAAAAAAABAAAAdFoSAAAAAAAAWhIAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAXBIAAAAAAABcEgAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": "other"
					},
					"BQAAAFoSAAAAAAAAWxIAAAAAAAAAAAAAWxIAAAAAAABcEgAAAAAAAAAAAABcEgAAAAAAAF0SAAAAAAAAAAAAAF0SAAAAAAAAXhIAAAAAAAAAAAAAXhIAAAAAAABfEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWhIAAAAAAABaEgAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": " has"
					},
					"BAAAAF8SAAAAAAAAYBIAAAAAAAAAAAAAYBIAAAAAAABhEgAAAAAAAAAAAABhEgAAAAAAAGISAAAAAAAAAAAAAGISAAAAAAAAYxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXxIAAAAAAABfEgAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAAGMSAAAAAAAAZBIAAAAAAAAAAAAAZBIAAAAAAABlEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYxIAAAAAAABjEgAAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"insert",
					{
						"characters": " higher"
					},
					"BwAAAGUSAAAAAAAAZhIAAAAAAAAAAAAAZhIAAAAAAABnEgAAAAAAAAAAAABnEgAAAAAAAGgSAAAAAAAAAAAAAGgSAAAAAAAAaRIAAAAAAAAAAAAAaRIAAAAAAABqEgAAAAAAAAAAAABqEgAAAAAAAGsSAAAAAAAAAAAAAGsSAAAAAAAAbBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZRIAAAAAAABlEgAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": " yield"
					},
					"BgAAAGwSAAAAAAAAbRIAAAAAAAAAAAAAbRIAAAAAAABuEgAAAAAAAAAAAABuEgAAAAAAAG8SAAAAAAAAAAAAAG8SAAAAAAAAcBIAAAAAAAAAAAAAcBIAAAAAAABxEgAAAAAAAAAAAABxEgAAAAAAAHISAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbBIAAAAAAABsEgAAAAAAAAAAAAAAAPC/"
				],
				[
					279,
					1,
					"left_delete",
					null,
					"AQAAALQJAAAAAAAAtAkAAAAAAAAnAAAACiAgY29uc3QgeyBwb29sU3RhdHMgfSA9IHVzZVBvb2xTdGF0cygp",
					"AQAAAAAAAAABAAAA2wkAAAAAAAC0CQAAAAAAAAAAAAAAAPC/"
				],
				[
					349,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AQAAACQTAAAAAAAAJRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJBMAAAAAAAAkEwAAAAAAAAAAAAAAAPC/"
				],
				[
					350,
					1,
					"left_delete",
					null,
					"AQAAACQTAAAAAAAAJBMAAAAAAAABAAAAXA",
					"AQAAAAAAAAABAAAAJRMAAAAAAAAlEwAAAAAAAAAAAAAAAPC/"
				],
				[
					351,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAACQTAAAAAAAAJRMAAAAAAAAAAAAAJRMAAAAAAAAnEwAAAAAAAAAAAAAnEwAAAAAAACgTAAAAAAAAAAAAACgTAAAAAAAAKhMAAAAAAAAAAAAAJRMAAAAAAAAlEwAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAJBMAAAAAAAAkEwAAAAAAAAAAAAAAAPC/"
				],
				[
					352,
					1,
					"paste",
					null,
					"AQAAACgTAAAAAAAAqxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKBMAAAAAAAAoEwAAAAAAAAAAAAAAAPC/"
				],
				[
					355,
					1,
					"left_delete",
					null,
					"AQAAACgTAAAAAAAAKBMAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAKhMAAAAAAAAqEwAAAAAAAAAAAAAAAPC/"
				],
				[
					406,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACgYAAAAAAAAKRgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKBgAAAAAAAAoGAAAAAAAAAAAAAAAAPC/"
				],
				[
					407,
					1,
					"paste",
					null,
					"AQAAACkYAAAAAAAAPhgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKRgAAAAAAAApGAAAAAAAAAAAAAAAAPC/"
				],
				[
					408,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAD4YAAAAAAAAPxgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPhgAAAAAAAA+GAAAAAAAAAAAAAAAAPC/"
				],
				[
					409,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAD8YAAAAAAAAQRgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPxgAAAAAAAA/GAAAAAAAAAAAAAAAAPC/"
				],
				[
					410,
					1,
					"paste",
					null,
					"AQAAAEAYAAAAAAAAVRgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQBgAAAAAAABAGAAAAAAAAAAAAAAAAPC/"
				],
				[
					418,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAF4AAAAAAAAAXwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgAAAAAAAABeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					419,
					1,
					"paste",
					null,
					"AQAAAF8AAAAAAAAAmgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwAAAAAAAABfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					456,
					1,
					"insert",
					{
						"characters": "useEF"
					},
					"BQAAABoAAAAAAAAAGwAAAAAAAAAAAAAAGwAAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAAB0AAAAAAAAAAAAAAB0AAAAAAAAAHgAAAAAAAAAAAAAAHgAAAAAAAAAfAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgAAAAAAAAAaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					457,
					1,
					"left_delete",
					null,
					"AQAAAB4AAAAAAAAAHgAAAAAAAAABAAAARg",
					"AQAAAAAAAAABAAAAHwAAAAAAAAAfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					458,
					1,
					"insert",
					{
						"characters": "ffect,"
					},
					"BgAAAB4AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACEAAAAAAAAAAAAAACEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					459,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACQAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAAAAAAAAAAkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					472,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAGkLAAAAAAAAagsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQsAAAAAAABpCwAAAAAAAAAAAAAAAPC/"
				],
				[
					475,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAIELAAAAAAAAggsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgQsAAAAAAACBCwAAAAAAAAAAAAAAAPC/"
				],
				[
					478,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAABYYAAAAAAAAFxgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFhgAAAAAAAAWGAAAAAAAAAAAAAAAAPC/"
				],
				[
					481,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAACoYAAAAAAAAKxgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKhgAAAAAAAAqGAAAAAAAAAAAAAAAAPC/"
				],
				[
					484,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAFYYAAAAAAAAVxgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVhgAAAAAAABWGAAAAAAAAAAAAAAAAPC/"
				],
				[
					487,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAD8YAAAAAAAAQBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPxgAAAAAAAA/GAAAAAAAAAAAAAAAAPC/"
				],
				[
					490,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAG8YAAAAAAAAcBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbxgAAAAAAABvGAAAAAAAAAAAAAAAAPC/"
				],
				[
					493,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAA4eAAAAAAAADx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADh4AAAAAAAAOHgAAAAAAAAAAAAAAAPC/"
				],
				[
					498,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAACYeAAAAAAAAJx4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJh4AAAAAAAAmHgAAAAAAAAAAAAAAAPC/"
				],
				[
					541,
					1,
					"paste",
					null,
					"AgAAABYeAAAAAAAALB4AAAAAAAAAAAAALB4AAAAAAAAsHgAAAAAAABYAAABzZXRTaG93UmViYWxhbmNlck1vZGFs",
					"AQAAAAAAAAABAAAAFh4AAAAAAAAsHgAAAAAAAAAAAAAAAPC/"
				],
				[
					567,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADsSAAAAAAAAPBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOxIAAAAAAAA7EgAAAAAAAAAAAAAAAPC/"
				],
				[
					568,
					1,
					"reindent",
					null,
					"AQAAADwSAAAAAAAAPhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPBIAAAAAAAA8EgAAAAAAAAAAAAAAAPC/"
				],
				[
					569,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAD4SAAAAAAAAPxIAAAAAAAAAAAAAPxIAAAAAAABAEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPhIAAAAAAAA+EgAAAAAAAAAAAAAAAPC/"
				],
				[
					570,
					1,
					"insert",
					{
						"characters": " get"
					},
					"BAAAAEASAAAAAAAAQRIAAAAAAAAAAAAAQRIAAAAAAABCEgAAAAAAAAAAAABCEgAAAAAAAEMSAAAAAAAAAAAAAEMSAAAAAAAARBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQBIAAAAAAABAEgAAAAAAAAAAAAAAAPC/"
				],
				[
					571,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAAEQSAAAAAAAARRIAAAAAAAAAAAAARRIAAAAAAABGEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARBIAAAAAAABEEgAAAAAAAAAAAAAAAPC/"
				],
				[
					572,
					1,
					"insert",
					{
						"characters": " boolean"
					},
					"CAAAAEYSAAAAAAAARxIAAAAAAAAAAAAARxIAAAAAAABIEgAAAAAAAAAAAABIEgAAAAAAAEkSAAAAAAAAAAAAAEkSAAAAAAAAShIAAAAAAAAAAAAAShIAAAAAAABLEgAAAAAAAAAAAABLEgAAAAAAAEwSAAAAAAAAAAAAAEwSAAAAAAAATRIAAAAAAAAAAAAATRIAAAAAAABOEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARhIAAAAAAABGEgAAAAAAAAAAAAAAAPC/"
				],
				[
					573,
					1,
					"insert",
					{
						"characters": " flag"
					},
					"BQAAAE4SAAAAAAAATxIAAAAAAAAAAAAATxIAAAAAAABQEgAAAAAAAAAAAABQEgAAAAAAAFESAAAAAAAAAAAAAFESAAAAAAAAUhIAAAAAAAAAAAAAUhIAAAAAAABTEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAThIAAAAAAABOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					574,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAFMSAAAAAAAAVBIAAAAAAAAAAAAAVBIAAAAAAABVEgAAAAAAAAAAAABVEgAAAAAAAFYSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUxIAAAAAAABTEgAAAAAAAAAAAAAAAPC/"
				],
				[
					575,
					1,
					"insert",
					{
						"characters": " check"
					},
					"BgAAAFYSAAAAAAAAVxIAAAAAAAAAAAAAVxIAAAAAAABYEgAAAAAAAAAAAABYEgAAAAAAAFkSAAAAAAAAAAAAAFkSAAAAAAAAWhIAAAAAAAAAAAAAWhIAAAAAAABbEgAAAAAAAAAAAABbEgAAAAAAAFwSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVhIAAAAAAABWEgAAAAAAAAAAAAAAAPC/"
				],
				[
					576,
					4,
					"left_delete",
					null,
					"BAAAAFsSAAAAAAAAWxIAAAAAAAABAAAAa1oSAAAAAAAAWhIAAAAAAAABAAAAY1kSAAAAAAAAWRIAAAAAAAABAAAAZVgSAAAAAAAAWBIAAAAAAAABAAAAaA",
					"AQAAAAAAAAABAAAAXBIAAAAAAABcEgAAAAAAAAAAAAAAAPC/"
				],
				[
					577,
					1,
					"insert",
					{
						"characters": "de"
					},
					"AgAAAFgSAAAAAAAAWRIAAAAAAAAAAAAAWRIAAAAAAABaEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWBIAAAAAAABYEgAAAAAAAAAAAAAAAPC/"
				],
				[
					578,
					3,
					"left_delete",
					null,
					"AwAAAFkSAAAAAAAAWRIAAAAAAAABAAAAZVgSAAAAAAAAWBIAAAAAAAABAAAAZFcSAAAAAAAAVxIAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAWhIAAAAAAABaEgAAAAAAAAAAAAAAAPC/"
				],
				[
					579,
					1,
					"insert",
					{
						"characters": "determine"
					},
					"CQAAAFcSAAAAAAAAWBIAAAAAAAAAAAAAWBIAAAAAAABZEgAAAAAAAAAAAABZEgAAAAAAAFoSAAAAAAAAAAAAAFoSAAAAAAAAWxIAAAAAAAAAAAAAWxIAAAAAAABcEgAAAAAAAAAAAABcEgAAAAAAAF0SAAAAAAAAAAAAAF0SAAAAAAAAXhIAAAAAAAAAAAAAXhIAAAAAAABfEgAAAAAAAAAAAABfEgAAAAAAAGASAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVxIAAAAAAABXEgAAAAAAAAAAAAAAAPC/"
				],
				[
					580,
					1,
					"insert",
					{
						"characters": " fi"
					},
					"AwAAAGASAAAAAAAAYRIAAAAAAAAAAAAAYRIAAAAAAABiEgAAAAAAAAAAAABiEgAAAAAAAGMSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYBIAAAAAAABgEgAAAAAAAAAAAAAAAPC/"
				],
				[
					581,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGMSAAAAAAAAZBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYxIAAAAAAABjEgAAAAAAAAAAAAAAAPC/"
				],
				[
					582,
					3,
					"left_delete",
					null,
					"AwAAAGMSAAAAAAAAYxIAAAAAAAABAAAAIGISAAAAAAAAYhIAAAAAAAABAAAAaWESAAAAAAAAYRIAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAAZBIAAAAAAABkEgAAAAAAAAAAAAAAAPC/"
				],
				[
					583,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAGESAAAAAAAAYhIAAAAAAAAAAAAAYhIAAAAAAABjEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYRIAAAAAAABhEgAAAAAAAAAAAAAAAPC/"
				],
				[
					584,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGMSAAAAAAAAZBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYxIAAAAAAABjEgAAAAAAAAAAAAAAAPC/"
				],
				[
					585,
					1,
					"insert",
					{
						"characters": "th"
					},
					"AgAAAGQSAAAAAAAAZRIAAAAAAAAAAAAAZRIAAAAAAABmEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZBIAAAAAAABkEgAAAAAAAAAAAAAAAPC/"
				],
				[
					586,
					2,
					"left_delete",
					null,
					"AgAAAGUSAAAAAAAAZRIAAAAAAAABAAAAaGQSAAAAAAAAZBIAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAZhIAAAAAAABmEgAAAAAAAAAAAAAAAPC/"
				],
				[
					587,
					1,
					"insert",
					{
						"characters": "the"
					},
					"AwAAAGQSAAAAAAAAZRIAAAAAAAAAAAAAZRIAAAAAAABmEgAAAAAAAAAAAABmEgAAAAAAAGcSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZBIAAAAAAABkEgAAAAAAAAAAAAAAAPC/"
				],
				[
					588,
					1,
					"insert",
					{
						"characters": " current"
					},
					"CAAAAGcSAAAAAAAAaBIAAAAAAAAAAAAAaBIAAAAAAABpEgAAAAAAAAAAAABpEgAAAAAAAGoSAAAAAAAAAAAAAGoSAAAAAAAAaxIAAAAAAAAAAAAAaxIAAAAAAABsEgAAAAAAAAAAAABsEgAAAAAAAG0SAAAAAAAAAAAAAG0SAAAAAAAAbhIAAAAAAAAAAAAAbhIAAAAAAABvEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZxIAAAAAAABnEgAAAAAAAAAAAAAAAPC/"
				],
				[
					589,
					1,
					"insert",
					{
						"characters": " network"
					},
					"CAAAAG8SAAAAAAAAcBIAAAAAAAAAAAAAcBIAAAAAAABxEgAAAAAAAAAAAABxEgAAAAAAAHISAAAAAAAAAAAAAHISAAAAAAAAcxIAAAAAAAAAAAAAcxIAAAAAAAB0EgAAAAAAAAAAAAB0EgAAAAAAAHUSAAAAAAAAAAAAAHUSAAAAAAAAdhIAAAAAAAAAAAAAdhIAAAAAAAB3EgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbxIAAAAAAABvEgAAAAAAAAAAAAAAAPC/"
				],
				[
					590,
					1,
					"insert",
					{
						"characters": " doesn"
					},
					"BgAAAHcSAAAAAAAAeBIAAAAAAAAAAAAAeBIAAAAAAAB5EgAAAAAAAAAAAAB5EgAAAAAAAHoSAAAAAAAAAAAAAHoSAAAAAAAAexIAAAAAAAAAAAAAexIAAAAAAAB8EgAAAAAAAAAAAAB8EgAAAAAAAH0SAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdxIAAAAAAAB3EgAAAAAAAAAAAAAAAPC/"
				],
				[
					591,
					1,
					"insert",
					{
						"characters": " not"
					},
					"BAAAAH0SAAAAAAAAfhIAAAAAAAAAAAAAfhIAAAAAAAB/EgAAAAAAAAAAAAB/EgAAAAAAAIASAAAAAAAAAAAAAIASAAAAAAAAgRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfRIAAAAAAAB9EgAAAAAAAAAAAAAAAPC/"
				],
				[
					592,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIESAAAAAAAAghIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgRIAAAAAAACBEgAAAAAAAAAAAAAAAPC/"
				],
				[
					593,
					6,
					"left_delete",
					null,
					"BgAAAIESAAAAAAAAgRIAAAAAAAABAAAAIIASAAAAAAAAgBIAAAAAAAABAAAAdH8SAAAAAAAAfxIAAAAAAAABAAAAb34SAAAAAAAAfhIAAAAAAAABAAAAbn0SAAAAAAAAfRIAAAAAAAABAAAAIHwSAAAAAAAAfBIAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAghIAAAAAAACCEgAAAAAAAAAAAAAAAPC/"
				],
				[
					594,
					1,
					"insert",
					{
						"characters": " not"
					},
					"BAAAAHwSAAAAAAAAfRIAAAAAAAAAAAAAfRIAAAAAAAB+EgAAAAAAAAAAAAB+EgAAAAAAAH8SAAAAAAAAAAAAAH8SAAAAAAAAgBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfBIAAAAAAAB8EgAAAAAAAAAAAAAAAPC/"
				],
				[
					595,
					1,
					"insert",
					{
						"characters": " have"
					},
					"BQAAAIASAAAAAAAAgRIAAAAAAAAAAAAAgRIAAAAAAACCEgAAAAAAAAAAAACCEgAAAAAAAIMSAAAAAAAAAAAAAIMSAAAAAAAAhBIAAAAAAAAAAAAAhBIAAAAAAACFEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgBIAAAAAAACAEgAAAAAAAAAAAAAAAPC/"
				],
				[
					596,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAIUSAAAAAAAAhhIAAAAAAAAAAAAAhhIAAAAAAACHEgAAAAAAAAAAAACHEgAAAAAAAIgSAAAAAAAAAAAAAIgSAAAAAAAAiRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhRIAAAAAAACFEgAAAAAAAAAAAAAAAPC/"
				],
				[
					597,
					1,
					"insert",
					{
						"characters": " higher"
					},
					"BwAAAIkSAAAAAAAAihIAAAAAAAAAAAAAihIAAAAAAACLEgAAAAAAAAAAAACLEgAAAAAAAIwSAAAAAAAAAAAAAIwSAAAAAAAAjRIAAAAAAAAAAAAAjRIAAAAAAACOEgAAAAAAAAAAAACOEgAAAAAAAI8SAAAAAAAAAAAAAI8SAAAAAAAAkBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiRIAAAAAAACJEgAAAAAAAAAAAAAAAPC/"
				],
				[
					598,
					1,
					"left_delete",
					null,
					"AQAAAI8SAAAAAAAAjxIAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAkBIAAAAAAACQEgAAAAAAAAAAAAAAAPC/"
				],
				[
					599,
					1,
					"insert",
					{
						"characters": "st"
					},
					"AgAAAI8SAAAAAAAAkBIAAAAAAAAAAAAAkBIAAAAAAACREgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjxIAAAAAAACPEgAAAAAAAAAAAAAAAPC/"
				],
				[
					600,
					1,
					"insert",
					{
						"characters": " yield"
					},
					"BgAAAJESAAAAAAAAkhIAAAAAAAAAAAAAkhIAAAAAAACTEgAAAAAAAAAAAACTEgAAAAAAAJQSAAAAAAAAAAAAAJQSAAAAAAAAlRIAAAAAAAAAAAAAlRIAAAAAAACWEgAAAAAAAAAAAACWEgAAAAAAAJcSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkRIAAAAAAACREgAAAAAAAAAAAAAAAPC/"
				],
				[
					601,
					1,
					"insert",
					{
						"characters": "\nco"
					},
					"BAAAAJcSAAAAAAAAmBIAAAAAAAAAAAAAmBIAAAAAAACaEgAAAAAAAAAAAACaEgAAAAAAAJsSAAAAAAAAAAAAAJsSAAAAAAAAnBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlxIAAAAAAACXEgAAAAAAAAAAAAAAAPC/"
				],
				[
					602,
					1,
					"insert",
					{
						"characters": "nst"
					},
					"AwAAAJwSAAAAAAAAnRIAAAAAAAAAAAAAnRIAAAAAAACeEgAAAAAAAAAAAACeEgAAAAAAAJ8SAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnBIAAAAAAACcEgAAAAAAAAAAAAAAAPC/"
				],
				[
					603,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ8SAAAAAAAAoBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnxIAAAAAAACfEgAAAAAAAAAAAAAAAPC/"
				],
				[
					604,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAKASAAAAAAAAohIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoBIAAAAAAACgEgAAAAAAAAAAAAAAAPC/"
				],
				[
					605,
					1,
					"insert",
					{
						"characters": "network"
					},
					"BwAAAKESAAAAAAAAohIAAAAAAAAAAAAAohIAAAAAAACjEgAAAAAAAAAAAACjEgAAAAAAAKQSAAAAAAAAAAAAAKQSAAAAAAAApRIAAAAAAAAAAAAApRIAAAAAAACmEgAAAAAAAAAAAACmEgAAAAAAAKcSAAAAAAAAAAAAAKcSAAAAAAAAqBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoRIAAAAAAAChEgAAAAAAAAAAAAAAAPC/"
				],
				[
					606,
					1,
					"insert",
					{
						"characters": "HasHighest"
					},
					"CgAAAKgSAAAAAAAAqRIAAAAAAAAAAAAAqRIAAAAAAACqEgAAAAAAAAAAAACqEgAAAAAAAKsSAAAAAAAAAAAAAKsSAAAAAAAArBIAAAAAAAAAAAAArBIAAAAAAACtEgAAAAAAAAAAAACtEgAAAAAAAK4SAAAAAAAAAAAAAK4SAAAAAAAArxIAAAAAAAAAAAAArxIAAAAAAACwEgAAAAAAAAAAAACwEgAAAAAAALESAAAAAAAAAAAAALESAAAAAAAAshIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqBIAAAAAAACoEgAAAAAAAAAAAAAAAPC/"
				],
				[
					607,
					1,
					"insert",
					{
						"characters": "Yield,"
					},
					"BgAAALISAAAAAAAAsxIAAAAAAAAAAAAAsxIAAAAAAAC0EgAAAAAAAAAAAAC0EgAAAAAAALUSAAAAAAAAAAAAALUSAAAAAAAAthIAAAAAAAAAAAAAthIAAAAAAAC3EgAAAAAAAAAAAAC3EgAAAAAAALgSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAshIAAAAAAACyEgAAAAAAAAAAAAAAAPC/"
				],
				[
					608,
					1,
					"insert",
					{
						"characters": " setNe"
					},
					"BgAAALgSAAAAAAAAuRIAAAAAAAAAAAAAuRIAAAAAAAC6EgAAAAAAAAAAAAC6EgAAAAAAALsSAAAAAAAAAAAAALsSAAAAAAAAvBIAAAAAAAAAAAAAvBIAAAAAAAC9EgAAAAAAAAAAAAC9EgAAAAAAAL4SAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuBIAAAAAAAC4EgAAAAAAAAAAAAAAAPC/"
				],
				[
					609,
					1,
					"insert",
					{
						"characters": "tworkHasHi"
					},
					"CgAAAL4SAAAAAAAAvxIAAAAAAAAAAAAAvxIAAAAAAADAEgAAAAAAAAAAAADAEgAAAAAAAMESAAAAAAAAAAAAAMESAAAAAAAAwhIAAAAAAAAAAAAAwhIAAAAAAADDEgAAAAAAAAAAAADDEgAAAAAAAMQSAAAAAAAAAAAAAMQSAAAAAAAAxRIAAAAAAAAAAAAAxRIAAAAAAADGEgAAAAAAAAAAAADGEgAAAAAAAMcSAAAAAAAAAAAAAMcSAAAAAAAAyBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvhIAAAAAAAC+EgAAAAAAAAAAAAAAAPC/"
				],
				[
					610,
					1,
					"insert",
					{
						"characters": "ghestU"
					},
					"BgAAAMgSAAAAAAAAyRIAAAAAAAAAAAAAyRIAAAAAAADKEgAAAAAAAAAAAADKEgAAAAAAAMsSAAAAAAAAAAAAAMsSAAAAAAAAzBIAAAAAAAAAAAAAzBIAAAAAAADNEgAAAAAAAAAAAADNEgAAAAAAAM4SAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyBIAAAAAAADIEgAAAAAAAAAAAAAAAPC/"
				],
				[
					611,
					1,
					"left_delete",
					null,
					"AQAAAM0SAAAAAAAAzRIAAAAAAAABAAAAVQ",
					"AQAAAAAAAAABAAAAzhIAAAAAAADOEgAAAAAAAAAAAAAAAPC/"
				],
				[
					612,
					1,
					"insert",
					{
						"characters": "Yield"
					},
					"BQAAAM0SAAAAAAAAzhIAAAAAAAAAAAAAzhIAAAAAAADPEgAAAAAAAAAAAADPEgAAAAAAANASAAAAAAAAAAAAANASAAAAAAAA0RIAAAAAAAAAAAAA0RIAAAAAAADSEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzRIAAAAAAADNEgAAAAAAAAAAAAAAAPC/"
				],
				[
					614,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAANMSAAAAAAAA1BIAAAAAAAAAAAAA1BIAAAAAAADVEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0xIAAAAAAADTEgAAAAAAAAAAAAAAAPC/"
				],
				[
					615,
					1,
					"insert",
					{
						"characters": " usesTATE"
					},
					"CQAAANUSAAAAAAAA1hIAAAAAAAAAAAAA1hIAAAAAAADXEgAAAAAAAAAAAADXEgAAAAAAANgSAAAAAAAAAAAAANgSAAAAAAAA2RIAAAAAAAAAAAAA2RIAAAAAAADaEgAAAAAAAAAAAADaEgAAAAAAANsSAAAAAAAAAAAAANsSAAAAAAAA3BIAAAAAAAAAAAAA3BIAAAAAAADdEgAAAAAAAAAAAADdEgAAAAAAAN4SAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1RIAAAAAAADVEgAAAAAAAAAAAAAAAPC/"
				],
				[
					616,
					5,
					"left_delete",
					null,
					"BQAAAN0SAAAAAAAA3RIAAAAAAAABAAAARdwSAAAAAAAA3BIAAAAAAAABAAAAVNsSAAAAAAAA2xIAAAAAAAABAAAAQdoSAAAAAAAA2hIAAAAAAAABAAAAVNkSAAAAAAAA2RIAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAA3hIAAAAAAADeEgAAAAAAAAAAAAAAAPC/"
				],
				[
					617,
					1,
					"insert",
					{
						"characters": "State"
					},
					"BQAAANkSAAAAAAAA2hIAAAAAAAAAAAAA2hIAAAAAAADbEgAAAAAAAAAAAADbEgAAAAAAANwSAAAAAAAAAAAAANwSAAAAAAAA3RIAAAAAAAAAAAAA3RIAAAAAAADeEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2RIAAAAAAADZEgAAAAAAAAAAAAAAAPC/"
				],
				[
					618,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAN4SAAAAAAAA4BIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3hIAAAAAAADeEgAAAAAAAAAAAAAAAPC/"
				],
				[
					621,
					1,
					"insert",
					{
						"characters": "false"
					},
					"BQAAAN8SAAAAAAAA4BIAAAAAAAAAAAAA4BIAAAAAAADhEgAAAAAAAAAAAADhEgAAAAAAAOISAAAAAAAAAAAAAOISAAAAAAAA4xIAAAAAAAAAAAAA4xIAAAAAAADkEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3xIAAAAAAADfEgAAAAAAAAAAAAAAAPC/"
				],
				[
					624,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOUSAAAAAAAA5hIAAAAAAAAAAAAA5hIAAAAAAADoEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5RIAAAAAAADlEgAAAAAAAAAAAAAAAPC/"
				],
				[
					666,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AwAAAGsTAAAAAAAAbBMAAAAAAAAAAAAA5hIAAAAAAADmEgAAAAAAAAIAAAAgIGoTAAAAAAAAaxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaxMAAAAAAABrEwAAAAAAAAAAAAAAAPC/"
				],
				[
					667,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGsTAAAAAAAAbBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaxMAAAAAAABrEwAAAAAAAAAAAAAAAPC/"
				],
				[
					672,
					1,
					"left_delete",
					null,
					"AQAAABAUAAAAAAAAEBQAAAAAAAAJAAAAcG9vbFN0YXRz",
					"AQAAAAAAAAABAAAAEBQAAAAAAAAZFAAAAAAAAAAAAAAAAPC/"
				],
				[
					675,
					1,
					"left_delete",
					null,
					"AQAAANsTAAAAAAAA2xMAAAAAAAAYAAAAeyBzZXROZXR3b3Jrc1dpdGhZaWVsZHMo",
					"AQAAAAAAAAABAAAA8xMAAAAAAADbEwAAAAAAAAAAAAAAAPC/"
				],
				[
					678,
					1,
					"left_delete",
					null,
					"AQAAAPITAAAAAAAA8hMAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA8xMAAAAAAADzEwAAAAAAAAAAAAAAAPC/"
				],
				[
					681,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAANsTAAAAAAAA3BMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2xMAAAAAAADbEwAAAAAAAAAAAAAAAPC/"
				],
				[
					682,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANwTAAAAAAAA3RMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3BMAAAAAAADcEwAAAAAAAAAAAAAAAPC/"
				],
				[
					701,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAHEXAAAAAAAAchcAAAAAAAAAAAAAchcAAAAAAAB4FwAAAAAAAAAAAAB4FwAAAAAAAHkXAAAAAAAAAAAAAHkXAAAAAAAAfxcAAAAAAAAAAAAAchcAAAAAAAByFwAAAAAAAAYAAAAgICAgICA",
					"AQAAAAAAAAABAAAAcRcAAAAAAABxFwAAAAAAAAAAAAAAAPC/"
				],
				[
					702,
					1,
					"paste",
					null,
					"AQAAAHkXAAAAAAAAehgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeRcAAAAAAAB5FwAAAAAAAAAAAAAAAPC/"
				],
				[
					705,
					1,
					"left_delete",
					null,
					"AQAAAHkXAAAAAAAAeRcAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAexcAAAAAAAB7FwAAAAAAAAAAAAAAAPC/"
				],
				[
					708,
					2,
					"indent",
					null,
					"DAAAANMXAAAAAAAA1RcAAAAAAAAAAAAADBgAAAAAAAAOGAAAAAAAAAAAAABCGAAAAAAAAEQYAAAAAAAAAAAAAGEYAAAAAAAAYxgAAAAAAAAAAAAAaRgAAAAAAABrGAAAAAAAAAAAAAB6GAAAAAAAAHwYAAAAAAAAAAAAANMXAAAAAAAA1RcAAAAAAAAAAAAADhgAAAAAAAAQGAAAAAAAAAAAAABGGAAAAAAAAEgYAAAAAAAAAAAAAGcYAAAAAAAAaRgAAAAAAAAAAAAAcRgAAAAAAABzGAAAAAAAAAAAAACEGAAAAAAAAIYYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeBgAAAAAAADTFwAAAAAAAAAAAAAAAPC/"
				],
				[
					717,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJgYAAAAAAAAmRgAAAAAAAAAAAAAmRgAAAAAAACaGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmBgAAAAAAACYGAAAAAAAAAAAAAAAAPC/"
				],
				[
					718,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJoYAAAAAAAAmxgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmhgAAAAAAACaGAAAAAAAAAAAAAAAAPC/"
				],
				[
					726,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAHIXAAAAAAAAcxcAAAAAAAAAAAAAcxcAAAAAAAB0FwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAchcAAAAAAAByFwAAAAAAAAAAAAAAAPC/"
				],
				[
					728,
					1,
					"reindent",
					null,
					"AQAAAHMXAAAAAAAAeRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcxcAAAAAAABzFwAAAAAAAAAAAAAAAAAA"
				],
				[
					729,
					1,
					"insert",
					{
						"characters": "console.log"
					},
					"CwAAAHkXAAAAAAAAehcAAAAAAAAAAAAAehcAAAAAAAB7FwAAAAAAAAAAAAB7FwAAAAAAAHwXAAAAAAAAAAAAAHwXAAAAAAAAfRcAAAAAAAAAAAAAfRcAAAAAAAB+FwAAAAAAAAAAAAB+FwAAAAAAAH8XAAAAAAAAAAAAAH8XAAAAAAAAgBcAAAAAAAAAAAAAgBcAAAAAAACBFwAAAAAAAAAAAACBFwAAAAAAAIIXAAAAAAAAAAAAAIIXAAAAAAAAgxcAAAAAAAAAAAAAgxcAAAAAAACEFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeRcAAAAAAAB5FwAAAAAAAAAAAAAAAPC/"
				],
				[
					730,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIQXAAAAAAAAhhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhBcAAAAAAACEFwAAAAAAAAAAAAAAAPC/"
				],
				[
					731,
					1,
					"paste",
					null,
					"AQAAAIUXAAAAAAAAlhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhRcAAAAAAACFFwAAAAAAAAAAAAAAAPC/"
				],
				[
					732,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJYXAAAAAAAAlxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlhcAAAAAAACWFwAAAAAAAAAAAAAAAPC/"
				],
				[
					733,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJcXAAAAAAAAmBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlxcAAAAAAACXFwAAAAAAAAAAAAAAAPC/"
				],
				[
					743,
					1,
					"paste",
					null,
					"AQAAAJgXAAAAAAAAqRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmBcAAAAAAACYFwAAAAAAAAAAAAAAAPC/"
				],
				[
					744,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAKkXAAAAAAAAqxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqRcAAAAAAACpFwAAAAAAAAAAAAAAAPC/"
				],
				[
					745,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAKoXAAAAAAAAqxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqhcAAAAAAACqFwAAAAAAAAAAAAAAAPC/"
				],
				[
					747,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAKwXAAAAAAAArhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArBcAAAAAAACsFwAAAAAAAAAAAAAAAPC/"
				],
				[
					748,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAK0XAAAAAAAArhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArRcAAAAAAACtFwAAAAAAAAAAAAAAAPC/"
				],
				[
					757,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK8XAAAAAAAAsBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArxcAAAAAAACvFwAAAAAAAAAAAAAAAPC/"
				],
				[
					758,
					1,
					"paste",
					null,
					"AQAAALAXAAAAAAAAvRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsBcAAAAAAACwFwAAAAAAAAAAAAAAAPC/"
				],
				[
					783,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAK8XAAAAAAAAsBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArxcAAAAAAACvFwAAAAAAAAAAAAAAAPC/"
				],
				[
					786,
					4,
					"left_delete",
					null,
					"BAAAALMXAAAAAAAAsxcAAAAAAAABAAAAPbIXAAAAAAAAshcAAAAAAAABAAAAPbEXAAAAAAAAsRcAAAAAAAABAAAAIbAXAAAAAAAAsBcAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAtBcAAAAAAAC0FwAAAAAAAAAAAAAAAPC/"
				],
				[
					789,
					1,
					"left_delete",
					null,
					"AQAAAL0XAAAAAAAAvRcAAAAAAAAdAQAAICAgICAgY29uc3QgcG90ZW50aWFsRGVzdGluYXRpb25OZXR3b3JrT2JqZWN0cyA9IG5ldHdvcmtzLnJlZHVjZSgoYWNjOiBOZXR3b3JrW10sIG5ldHdvcmspID0+IHsKICAgICAgICBjb25zdCBmb3VuZE5ldHdvcmsgPSBmaW5kTmV0d29ya0J5U2x1ZyhuZXR3b3JrWzBdKQogICAgICAgIGlmIChmb3VuZE5ldHdvcmsgJiYgbmV0d29ya1swXSAhPT0gY2hhaW5TbHVnKSB7CiAgICAgICAgICBhY2MucHVzaChmb3VuZE5ldHdvcmspCiAgICAgICAgfQogICAgICAgIHJldHVybiBhY2MKICAgICAgfSwgW10p",
					"AQAAAAAAAAABAAAA2hgAAAAAAAC9FwAAAAAAAAAAAAAAAPC/"
				],
				[
					790,
					1,
					"reindent",
					null,
					"AQAAAL0XAAAAAAAAwxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvRcAAAAAAAC9FwAAAAAAAAAAAAAAAPC/"
				],
				[
					791,
					1,
					"insert",
					{
						"characters": "set"
					},
					"AwAAAMMXAAAAAAAAxBcAAAAAAAAAAAAAxBcAAAAAAADFFwAAAAAAAAAAAADFFwAAAAAAAMYXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwxcAAAAAAADDFwAAAAAAAAAAAAAAAPC/"
				],
				[
					808,
					1,
					"paste",
					null,
					"AgAAAMMXAAAAAAAA3BcAAAAAAAAAAAAA3BcAAAAAAADcFwAAAAAAAAMAAABzZXQ",
					"AQAAAAAAAAABAAAAwxcAAAAAAADGFwAAAAAAAAAAAAAAAPC/"
				],
				[
					809,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANwXAAAAAAAA3hcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3BcAAAAAAADcFwAAAAAAAAAAAAAAAPC/"
				],
				[
					816,
					1,
					"paste",
					null,
					"AQAAAN0XAAAAAAAA9BcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3RcAAAAAAADdFwAAAAAAAAAAAAAAAPC/"
				],
				[
					817,
					1,
					"insert",
					{
						"characters": " ==="
					},
					"BAAAAPQXAAAAAAAA9RcAAAAAAAAAAAAA9RcAAAAAAAD2FwAAAAAAAAAAAAD2FwAAAAAAAPcXAAAAAAAAAAAAAPcXAAAAAAAA+BcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9BcAAAAAAAD0FwAAAAAAAAAAAAAAAPC/"
				],
				[
					823,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPgXAAAAAAAA+RcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+BcAAAAAAAD4FwAAAAAAAAAAAAAAAPC/"
				],
				[
					824,
					1,
					"paste",
					null,
					"AQAAAPkXAAAAAAAAAhgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+RcAAAAAAAD5FwAAAAAAAAAAAAAAAPC/"
				],
				[
					838,
					1,
					"insert",
					{
						"characters": "iS"
					},
					"AwAAAEwUAAAAAAAATRQAAAAAAAAAAAAATRQAAAAAAABNFAAAAAAAABUAAABnZXROZXR3b3Jrc1dpdGhZaWVsZHNNFAAAAAAAAE4UAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATBQAAAAAAABhFAAAAAAAAAAAAAAAAPC/"
				],
				[
					839,
					1,
					"left_delete",
					null,
					"AQAAAE0UAAAAAAAATRQAAAAAAAABAAAAUw",
					"AQAAAAAAAAABAAAAThQAAAAAAABOFAAAAAAAAAAAAAAAAPC/"
				],
				[
					840,
					1,
					"insert",
					{
						"characters": "sNetw"
					},
					"BQAAAE0UAAAAAAAAThQAAAAAAAAAAAAAThQAAAAAAABPFAAAAAAAAAAAAABPFAAAAAAAAFAUAAAAAAAAAAAAAFAUAAAAAAAAURQAAAAAAAAAAAAAURQAAAAAAABSFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATRQAAAAAAABNFAAAAAAAAAAAAAAAAPC/"
				],
				[
					841,
					1,
					"insert",
					{
						"characters": "orkHighest"
					},
					"CgAAAFIUAAAAAAAAUxQAAAAAAAAAAAAAUxQAAAAAAABUFAAAAAAAAAAAAABUFAAAAAAAAFUUAAAAAAAAAAAAAFUUAAAAAAAAVhQAAAAAAAAAAAAAVhQAAAAAAABXFAAAAAAAAAAAAABXFAAAAAAAAFgUAAAAAAAAAAAAAFgUAAAAAAAAWRQAAAAAAAAAAAAAWRQAAAAAAABaFAAAAAAAAAAAAABaFAAAAAAAAFsUAAAAAAAAAAAAAFsUAAAAAAAAXBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUhQAAAAAAABSFAAAAAAAAAAAAAAAAPC/"
				],
				[
					842,
					1,
					"insert",
					{
						"characters": "Yield"
					},
					"BQAAAFwUAAAAAAAAXRQAAAAAAAAAAAAAXRQAAAAAAABeFAAAAAAAAAAAAABeFAAAAAAAAF8UAAAAAAAAAAAAAF8UAAAAAAAAYBQAAAAAAAAAAAAAYBQAAAAAAABhFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXBQAAAAAAABcFAAAAAAAAAAAAAAAAPC/"
				],
				[
					845,
					1,
					"insert",
					{
						"characters": "boolean"
					},
					"CAAAAGUUAAAAAAAAZhQAAAAAAAAAAAAAZhQAAAAAAABmFAAAAAAAABoAAABbc3RyaW5nLCBudW1iZXIsIHN0cmluZ11bXWYUAAAAAAAAZxQAAAAAAAAAAAAAZxQAAAAAAABoFAAAAAAAAAAAAABoFAAAAAAAAGkUAAAAAAAAAAAAAGkUAAAAAAAAahQAAAAAAAAAAAAAahQAAAAAAABrFAAAAAAAAAAAAABrFAAAAAAAAGwUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfxQAAAAAAABlFAAAAAAAAAAAAAAAAPC/"
				],
				[
					853,
					1,
					"insert",
					{
						"characters": "\n\nreturn"
					},
					"CwAAAPAXAAAAAAAA8RcAAAAAAAAAAAAA8RcAAAAAAAD3FwAAAAAAAAAAAAD3FwAAAAAAAPgXAAAAAAAAAAAAAPgXAAAAAAAA/hcAAAAAAAAAAAAA8RcAAAAAAADxFwAAAAAAAAYAAAAgICAgICD4FwAAAAAAAPkXAAAAAAAAAAAAAPkXAAAAAAAA+hcAAAAAAAAAAAAA+hcAAAAAAAD7FwAAAAAAAAAAAAD7FwAAAAAAAPwXAAAAAAAAAAAAAPwXAAAAAAAA/RcAAAAAAAAAAAAA/RcAAAAAAAD+FwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8BcAAAAAAADwFwAAAAAAAAAAAAAAAPC/"
				],
				[
					854,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP4XAAAAAAAA/xcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/hcAAAAAAAD+FwAAAAAAAAAAAAAAAPC/"
				],
				[
					855,
					1,
					"paste",
					null,
					"AQAAAP8XAAAAAAAAJBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/xcAAAAAAAD/FwAAAAAAAAAAAAAAAPC/"
				],
				[
					865,
					1,
					"paste",
					null,
					"AgAAAN0TAAAAAAAA8hMAAAAAAAAAAAAA8hMAAAAAAADyEwAAAAAAABUAAABnZXROZXR3b3Jrc1dpdGhZaWVsZHM",
					"AQAAAAAAAAABAAAA3RMAAAAAAADyEwAAAAAAAAAAAAAAAPC/"
				],
				[
					870,
					1,
					"left_delete",
					null,
					"AQAAALoZAAAAAAAAuhkAAAAAAAAuAAAAIGdldE5ldHdvcmtzV2l0aFlpZWxkcz17Z2V0TmV0d29ya3NXaXRoWWllbGRzfQ",
					"AQAAAAAAAAABAAAA6BkAAAAAAAC6GQAAAAAAAAAAAAAAAPC/"
				],
				[
					873,
					2,
					"left_delete",
					null,
					"AgAAAIgYAAAAAAAAiBgAAAAAAAABAAAAXYcYAAAAAAAAhxgAAAAAAAABAAAAWw",
					"AQAAAAAAAAABAAAAiRgAAAAAAACJGAAAAAAAAAAAAAAAAPC/"
				],
				[
					874,
					1,
					"insert",
					{
						"characters": "false"
					},
					"BQAAAIcYAAAAAAAAiBgAAAAAAAAAAAAAiBgAAAAAAACJGAAAAAAAAAAAAACJGAAAAAAAAIoYAAAAAAAAAAAAAIoYAAAAAAAAixgAAAAAAAAAAAAAixgAAAAAAACMGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhxgAAAAAAACHGAAAAAAAAAAAAAAAAPC/"
				],
				[
					894,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGYTAAAAAAAAZxMAAAAAAAAAAAAAZxMAAAAAAABpEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZhMAAAAAAABmEwAAAAAAAAAAAAAAAPC/"
				],
				[
					895,
					1,
					"paste",
					null,
					"AQAAAGkTAAAAAAAA+BMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaRMAAAAAAABpEwAAAAAAAAAAAAAAAPC/"
				],
				[
					911,
					1,
					"left_delete",
					null,
					"AQAAAGkTAAAAAAAAaRMAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAaxMAAAAAAABrEwAAAAAAAAAAAAAAAPC/"
				],
				[
					916,
					3,
					"left_delete",
					null,
					"AwAAAIITAAAAAAAAghMAAAAAAAATAAAAc2VsZWN0U291cmNlTmV0d29ya4ETAAAAAAAAgRMAAAAAAAABAAAAIIATAAAAAAAAgBMAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAghMAAAAAAACVEwAAAAAAAAAAAAAAAPC/"
				],
				[
					935,
					1,
					"insert",
					{
						"characters": "na"
					},
					"AwAAALcTAAAAAAAAuBMAAAAAAAAAAAAAuBMAAAAAAAC4EwAAAAAAAAQAAABTbHVnuBMAAAAAAAC5EwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuxMAAAAAAAC3EwAAAAAAAAAAAAAAAPC/"
				],
				[
					936,
					2,
					"left_delete",
					null,
					"AgAAALgTAAAAAAAAuBMAAAAAAAABAAAAYbcTAAAAAAAAtxMAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAuRMAAAAAAAC5EwAAAAAAAAAAAAAAAPC/"
				],
				[
					937,
					1,
					"insert",
					{
						"characters": "Name"
					},
					"BAAAALcTAAAAAAAAuBMAAAAAAAAAAAAAuBMAAAAAAAC5EwAAAAAAAAAAAAC5EwAAAAAAALoTAAAAAAAAAAAAALoTAAAAAAAAuxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtxMAAAAAAAC3EwAAAAAAAAAAAAAAAPC/"
				],
				[
					947,
					1,
					"paste",
					null,
					"AgAAABkYAAAAAAAALhgAAAAAAAAAAAAALhgAAAAAAAAuGAAAAAAAAAkAAABjaGFpblNsdWc",
					"AQAAAAAAAAABAAAAGRgAAAAAAAAiGAAAAAAAAAAAAAAAAPC/"
				],
				[
					950,
					1,
					"left_delete",
					null,
					"AQAAAGYTAAAAAAAAZhMAAAAAAAB7AAAACiAgY29uc3QgeyBzZWxlY3RlZE5ldHdvcmsgfSA9IHVzZVNlbGVjdGVkTmV0d29yayh7IGwyT25seTogdHJ1ZSB9KQogIGNvbnN0IGNoYWluTmFtZTogc3RyaW5nID0gc2VsZWN0ZWROZXR3b3JrPy5zbHVnID8/ICIi",
					"AQAAAAAAAAABAAAA4RMAAAAAAABmEwAAAAAAAAAAAAAAAPC/"
				],
				[
					957,
					2,
					"left_delete",
					null,
					"AgAAAPkTAAAAAAAA+RMAAAAAAAABAAAAXfgTAAAAAAAA+BMAAAAAAAABAAAAWw",
					"AQAAAAAAAAABAAAA+hMAAAAAAAD6EwAAAAAAAAAAAAAAAPC/"
				],
				[
					958,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAPgTAAAAAAAA+hMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+BMAAAAAAAD4EwAAAAAAAAAAAAAAAPC/"
				],
				[
					959,
					1,
					"insert",
					{
						"characters": "poolsS"
					},
					"BgAAAPkTAAAAAAAA+hMAAAAAAAAAAAAA+hMAAAAAAAD7EwAAAAAAAAAAAAD7EwAAAAAAAPwTAAAAAAAAAAAAAPwTAAAAAAAA/RMAAAAAAAAAAAAA/RMAAAAAAAD+EwAAAAAAAAAAAAD+EwAAAAAAAP8TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+RMAAAAAAAD5EwAAAAAAAAAAAAAAAPC/"
				],
				[
					960,
					2,
					"left_delete",
					null,
					"AgAAAP4TAAAAAAAA/hMAAAAAAAABAAAAU/0TAAAAAAAA/RMAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAA/xMAAAAAAAD/EwAAAAAAAAAAAAAAAPC/"
				],
				[
					961,
					1,
					"insert",
					{
						"characters": "Stats"
					},
					"BQAAAP0TAAAAAAAA/hMAAAAAAAAAAAAA/hMAAAAAAAD/EwAAAAAAAAAAAAD/EwAAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAAARQAAAAAAAAAAAAAARQAAAAAAAACFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/RMAAAAAAAD9EwAAAAAAAAAAAAAAAPC/"
				],
				[
					969,
					1,
					"left_delete",
					null,
					"AQAAAPIVAAAAAAAA8hUAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA8xUAAAAAAADzFQAAAAAAAAAAAAAAAPC/"
				],
				[
					972,
					1,
					"left_delete",
					null,
					"AQAAAN8WAAAAAAAA3xYAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA4BYAAAAAAADgFgAAAAAAAAAAAAAAAPC/"
				],
				[
					986,
					1,
					"paste",
					null,
					"AgAAAPkXAAAAAAAADhgAAAAAAAAAAAAADhgAAAAAAAAOGAAAAAAAAAkAAABjaGFpblNsdWc",
					"AQAAAAAAAAABAAAA+RcAAAAAAAACGAAAAAAAAAAAAAAAAPC/"
				],
				[
					990,
					2,
					"left_delete",
					null,
					"AgAAAGYXAAAAAAAAZhcAAAAAAABVAAAACiAgICAgIGNvbnNvbGUubG9nKGNoYWluc1NvcnRlZEJ5QVBSLCBjaGFpbnNTb3J0ZWRCeUFQUlswXVswXSwgc2VsZWN0ZWROZXR3b3JrPy5zbHVnKWUXAAAAAAAAZRcAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAuxcAAAAAAABmFwAAAAAAAAAAAAAAAPC/"
				],
				[
					998,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGYXAAAAAAAAZxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZhcAAAAAAABmFwAAAAAAAAAAAAAAAPC/"
				],
				[
					999,
					1,
					"reindent",
					null,
					"AQAAAGcXAAAAAAAAbRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZxcAAAAAAABnFwAAAAAAAAAAAAAAAPC/"
				],
				[
					1000,
					1,
					"paste",
					null,
					"AQAAAG0XAAAAAAAAcxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbRcAAAAAAABtFwAAAAAAAAAAAAAAAPC/"
				],
				[
					1001,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHMXAAAAAAAAdBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcxcAAAAAAABzFwAAAAAAAAAAAAAAAPC/"
				],
				[
					1011,
					1,
					"paste",
					null,
					"AQAAAHQXAAAAAAAApRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdBcAAAAAAAB0FwAAAAAAAAAAAAAAAPC/"
				],
				[
					1026,
					1,
					"paste",
					null,
					"AQAAAN0TAAAAAAAA9hMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3RMAAAAAAADdEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1027,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAPYTAAAAAAAA9xMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9hMAAAAAAAD2EwAAAAAAAAAAAAAAAPC/"
				],
				[
					1030,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAA4UAAAAAAAADxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADhQAAAAAAAAOFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1034,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAMcXAAAAAAAAyBcAAAAAAAAAAAAAyBcAAAAAAADJFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxxcAAAAAAADHFwAAAAAAAAAAAAAAAPC/"
				],
				[
					1035,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMkXAAAAAAAAyhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyRcAAAAAAADJFwAAAAAAAAAAAAAAAPC/"
				],
				[
					1038,
					1,
					"left_delete",
					null,
					"AQAAABYYAAAAAAAAFhgAAAAAAAA0AAAACgogICAgICByZXR1cm4gY2hhaW5zU29ydGVkQnlBUFJbMF1bMF0gPT09IGNoYWluU2x1Zw",
					"AQAAAAAAAAABAAAAShgAAAAAAAAWGAAAAAAAAAAAAAAAAPC/"
				],
				[
					1041,
					2,
					"left_delete",
					null,
					"AgAAABcYAAAAAAAAFxgAAAAAAAAiAAAACiAgICAgIC8vIHJldHVybiBjaGFpbnNTb3J0ZWRCeUFQUhYYAAAAAAAAFhgAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAFxgAAAAAAAA5GAAAAAAAAAAAAAAAAPC/"
				],
				[
					1044,
					1,
					"left_delete",
					null,
					"AQAAAEcYAAAAAAAARxgAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAASBgAAAAAAABIGAAAAAAAAAAAAAAAAPC/"
				],
				[
					1102,
					1,
					"insert",
					{
						"characters": "\n\nuseE"
					},
					"CQAAAB8UAAAAAAAAIBQAAAAAAAAAAAAAIBQAAAAAAAAiFAAAAAAAAAAAAAAiFAAAAAAAACMUAAAAAAAAAAAAACMUAAAAAAAAJRQAAAAAAAAAAAAAIBQAAAAAAAAgFAAAAAAAAAIAAAAgICMUAAAAAAAAJBQAAAAAAAAAAAAAJBQAAAAAAAAlFAAAAAAAAAAAAAAlFAAAAAAAACYUAAAAAAAAAAAAACYUAAAAAAAAJxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHxQAAAAAAAAfFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1103,
					1,
					"insert_completion",
					{
						"completion": "useEffect",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "useEffect"
					},
					"AgAAACMUAAAAAAAAIxQAAAAAAAAEAAAAdXNlRSMUAAAAAAAALBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJxQAAAAAAAAnFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1104,
					2,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AgAAACwUAAAAAAAALhQAAAAAAAAAAAAALRQAAAAAAAAvFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALBQAAAAAAAAsFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1106,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAC8UAAAAAAAAMBQAAAAAAAAAAAAAMBQAAAAAAAAxFAAAAAAAAAAAAAAxFAAAAAAAADIUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALxQAAAAAAAAvFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1107,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADIUAAAAAAAAMxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMhQAAAAAAAAyFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1126,
					1,
					"left_delete",
					null,
					"AQAAAEITAAAAAAAAQhMAAAAAAAAkAAAAY29uc3QgeyBwb29sU3RhdHMgfSA9IHVzZVBvb2xTdGF0cygp",
					"AQAAAAAAAAABAAAAZhMAAAAAAABCEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1132,
					2,
					"left_delete",
					null,
					"AgAAAOcSAAAAAAAA5xIAAAAAAABbAAAAICAvLyBnZXQgYXJyYXkgb2YgQVBScyBmb3IgcG90ZW50aWFsIG5ldHdvcmtzIHRvIGRldGVybWluZSBpZiBhbm90aGVyIGhhcyBhIGhpZ2hlciB5aWVsZAogIOYSAAAAAAAA5hIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAQhMAAAAAAADnEgAAAAAAAAAAAAAAAPC/"
				],
				[
					1135,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAADsSAAAAAAAAPBIAAAAAAAAAAAAAPBIAAAAAAAA9EgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOxIAAAAAAAA7EgAAAAAAAAAAAAAAAPC/"
				],
				[
					1136,
					1,
					"reindent",
					null,
					"AQAAAD0SAAAAAAAAPxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPRIAAAAAAAA9EgAAAAAAAAAAAAAAAPC/"
				],
				[
					1138,
					1,
					"reindent",
					null,
					"AQAAADwSAAAAAAAAPhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPBIAAAAAAAA8EgAAAAAAAAAAAAAAACxA"
				],
				[
					1139,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAD4SAAAAAAAAPxIAAAAAAAAAAAAAPxIAAAAAAABBEgAAAAAAAAAAAABCEgAAAAAAAEISAAAAAAAAAgAAACAgPBIAAAAAAAA8EgAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAPhIAAAAAAAA+EgAAAAAAAAAAAAAAAPC/"
				],
				[
					1140,
					1,
					"paste",
					null,
					"AQAAAD8SAAAAAAAAYxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPxIAAAAAAAA/EgAAAAAAAAAAAAAAAPC/"
				],
				[
					1148,
					1,
					"paste",
					null,
					"AQAAANwTAAAAAAAA5RMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3BMAAAAAAADcEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1149,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOUTAAAAAAAA5xMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5RMAAAAAAADlEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1158,
					1,
					"left_delete",
					null,
					"AQAAANwTAAAAAAAA3BMAAAAAAAALAAAAcG9vbFN0YXRzKCk",
					"AQAAAAAAAAABAAAA5xMAAAAAAADcEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1159,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAANwTAAAAAAAA3hMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3BMAAAAAAADcEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1161,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAN4TAAAAAAAA3xMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3hMAAAAAAADeEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1162,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN8TAAAAAAAA4BMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3xMAAAAAAADfEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1163,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAOATAAAAAAAA4hMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4BMAAAAAAADgEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1176,
					1,
					"paste",
					null,
					"AQAAAOETAAAAAAAA9xMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4RMAAAAAAADhEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1190,
					1,
					"insert",
					{
						"characters": " setShowR"
					},
					"CQAAAN0TAAAAAAAA3hMAAAAAAAAAAAAA3hMAAAAAAADfEwAAAAAAAAAAAADfEwAAAAAAAOATAAAAAAAAAAAAAOATAAAAAAAA4RMAAAAAAAAAAAAA4RMAAAAAAADiEwAAAAAAAAAAAADiEwAAAAAAAOMTAAAAAAAAAAAAAOMTAAAAAAAA5BMAAAAAAAAAAAAA5BMAAAAAAADlEwAAAAAAAAAAAADlEwAAAAAAAOYTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3RMAAAAAAADdEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1191,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAOYTAAAAAAAA5xMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5hMAAAAAAADmEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1192,
					1,
					"insert_completion",
					{
						"completion": "setShowRebalancerModal",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "setShowRebalancerModal"
					},
					"AgAAAN4TAAAAAAAA3hMAAAAAAAAJAAAAc2V0U2hvd1Jl3hMAAAAAAAD0EwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5xMAAAAAAADnEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1193,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPQTAAAAAAAA9hMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9BMAAAAAAAD0EwAAAAAAAAAAAAAAAPC/"
				],
				[
					1194,
					1,
					"insert",
					{
						"characters": "false"
					},
					"BQAAAPUTAAAAAAAA9hMAAAAAAAAAAAAA9hMAAAAAAAD3EwAAAAAAAAAAAAD3EwAAAAAAAPgTAAAAAAAAAAAAAPgTAAAAAAAA+RMAAAAAAAAAAAAA+RMAAAAAAAD6EwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9RMAAAAAAAD1EwAAAAAAAAAAAAAAAPC/"
				],
				[
					1196,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPsTAAAAAAAA/BMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+xMAAAAAAAD7EwAAAAAAAAAAAAAAAPC/"
				],
				[
					1225,
					1,
					"paste",
					null,
					"AgAAAN4TAAAAAAAA9BMAAAAAAAAAAAAA9BMAAAAAAAD0EwAAAAAAABYAAABzZXRTaG93UmViYWxhbmNlck1vZGFs",
					"AQAAAAAAAAABAAAA3hMAAAAAAAD0EwAAAAAAAAAAAAAAAPC/"
				],
				[
					1228,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAA0fAAAAAAAADh8AAAAAAAAAAAAADh8AAAAAAAAYHwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADR8AAAAAAAANHwAAAAAAAAAAAAAAAPC/"
				],
				[
					1229,
					1,
					"paste",
					null,
					"AQAAABgfAAAAAAAAKh8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGB8AAAAAAAAYHwAAAAAAAAAAAAAAAPC/"
				],
				[
					1230,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAACofAAAAAAAAKx8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKh8AAAAAAAAqHwAAAAAAAAAAAAAAAPC/"
				],
				[
					1231,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAACsfAAAAAAAALR8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKx8AAAAAAAArHwAAAAAAAAAAAAAAAPC/"
				],
				[
					1232,
					1,
					"insert",
					{
						"characters": "true"
					},
					"BAAAACwfAAAAAAAALR8AAAAAAAAAAAAALR8AAAAAAAAuHwAAAAAAAAAAAAAuHwAAAAAAAC8fAAAAAAAAAAAAAC8fAAAAAAAAMB8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALB8AAAAAAAAsHwAAAAAAAAAAAAAAAPC/"
				],
				[
					1237,
					1,
					"insert",
					{
						"characters": "high"
					},
					"BQAAACwfAAAAAAAALR8AAAAAAAAAAAAALR8AAAAAAAAtHwAAAAAAAAQAAAB0cnVlLR8AAAAAAAAuHwAAAAAAAAAAAAAuHwAAAAAAAC8fAAAAAAAAAAAAAC8fAAAAAAAAMB8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALB8AAAAAAAAwHwAAAAAAAAAAAAAAAPC/"
				],
				[
					1248,
					1,
					"paste",
					null,
					"AgAAACwfAAAAAAAAQh8AAAAAAAAAAAAAQh8AAAAAAABCHwAAAAAAAAQAAABoaWdo",
					"AQAAAAAAAAABAAAALB8AAAAAAAAwHwAAAAAAAAAAAAAAAPC/"
				],
				[
					1271,
					1,
					"left_delete",
					null,
					"AQAAAMgTAAAAAAAAyBMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAyRMAAAAAAADJEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1274,
					1,
					"left_delete",
					null,
					"AQAAAA8TAAAAAAAADxMAAAAAAABiAAAACiAgLy8gY29uc3QgW25ldHdvcmtzV2l0aFlpZWxkcywgc2V0TmV0d29ya3NXaXRoWWllbGRzXSA9IHVzZVN0YXRlPFtzdHJpbmcsIG51bWJlciwgc3RyaW5nXVtdPihbXSk",
					"AQAAAAAAAAABAAAAcRMAAAAAAAAPEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1279,
					1,
					"left_delete",
					null,
					"AQAAAFsTAAAAAAAAWxMAAAAAAAAJAAAAcG9vbFN0YXRz",
					"AQAAAAAAAAABAAAAWxMAAAAAAABkEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1293,
					1,
					"paste",
					null,
					"AQAAAFsTAAAAAAAAZBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWxMAAAAAAABbEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1296,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAACQTAAAAAAAAJRMAAAAAAAAAAAAAJRMAAAAAAAAnEwAAAAAAAAAAAAAlEwAAAAAAACUTAAAAAAAAAgAAACAgJRMAAAAAAAApEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJBMAAAAAAAAkEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1299,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAFwTAAAAAAAAXRMAAAAAAAAAAAAAXRMAAAAAAABhEwAAAAAAAAAAAABdEwAAAAAAAF0TAAAAAAAABAAAACAgICBdEwAAAAAAAF8TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXBMAAAAAAABcEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1302,
					1,
					"left_delete",
					null,
					"AQAAACMTAAAAAAAAIxMAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAJBMAAAAAAAAkEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1303,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAACMTAAAAAAAAJBMAAAAAAAAAAAAAJBMAAAAAAAAmEwAAAAAAAAAAAAAmEwAAAAAAACgTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIxMAAAAAAAAjEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1313,
					1,
					"paste",
					null,
					"AQAAACgTAAAAAAAAQRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKBMAAAAAAAAoEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1314,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEETAAAAAAAAQxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQRMAAAAAAABBEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1315,
					1,
					"insert",
					{
						"characters": "true"
					},
					"BAAAAEITAAAAAAAAQxMAAAAAAAAAAAAAQxMAAAAAAABEEwAAAAAAAAAAAABEEwAAAAAAAEUTAAAAAAAAAAAAAEUTAAAAAAAARhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQhMAAAAAAABCEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1323,
					1,
					"insert",
					{
						"characters": "\nconst"
					},
					"CAAAACMTAAAAAAAAJBMAAAAAAAAAAAAAJBMAAAAAAAAmEwAAAAAAAAAAAAAmEwAAAAAAACgTAAAAAAAAAAAAACgTAAAAAAAAKRMAAAAAAAAAAAAAKRMAAAAAAAAqEwAAAAAAAAAAAAAqEwAAAAAAACsTAAAAAAAAAAAAACsTAAAAAAAALBMAAAAAAAAAAAAALBMAAAAAAAAtEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIxMAAAAAAAAjEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1324,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAC0TAAAAAAAALhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALRMAAAAAAAAtEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1325,
					1,
					"paste",
					null,
					"AQAAAC4TAAAAAAAARRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALhMAAAAAAAAuEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1328,
					1,
					"insert",
					{
						"characters": "hide"
					},
					"BAAAAC4TAAAAAAAALxMAAAAAAAAAAAAALxMAAAAAAAAwEwAAAAAAAAAAAAAwEwAAAAAAADETAAAAAAAAAAAAADETAAAAAAAAMhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALhMAAAAAAAAuEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1329,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADITAAAAAAAAMxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMhMAAAAAAAAyEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1330,
					1,
					"left_delete",
					null,
					"AQAAADITAAAAAAAAMhMAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAMxMAAAAAAAAzEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1331,
					1,
					"insert",
					{
						"characters": "Alert"
					},
					"BQAAADITAAAAAAAAMxMAAAAAAAAAAAAAMxMAAAAAAAA0EwAAAAAAAAAAAAA0EwAAAAAAADUTAAAAAAAAAAAAADUTAAAAAAAANhMAAAAAAAAAAAAANhMAAAAAAAA3EwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMhMAAAAAAAAyEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1332,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAADcTAAAAAAAAOBMAAAAAAAAAAAAAOBMAAAAAAAA5EwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANxMAAAAAAAA3EwAAAAAAAAAAAAAAAPC/"
				],
				[
					1333,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADkTAAAAAAAAOhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAORMAAAAAAAA5EwAAAAAAAAAAAAAAAPC/"
				],
				[
					1338,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAHoTAAAAAAAAexMAAAAAAAAAAAAAexMAAAAAAAB8EwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAehMAAAAAAAB6EwAAAAAAAAAAAAAAAPC/"
				],
				[
					1339,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHwTAAAAAAAAfRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfBMAAAAAAAB8EwAAAAAAAAAAAAAAAPC/"
				],
				[
					1342,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAMUTAAAAAAAAxhMAAAAAAAAAAAAAxhMAAAAAAADHEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxRMAAAAAAADFEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1343,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMcTAAAAAAAAyBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxxMAAAAAAADHEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1357,
					1,
					"paste",
					null,
					"AgAAAHATAAAAAAAAeRMAAAAAAAAAAAAAeRMAAAAAAAB5EwAAAAAAAAQAAAB0cnVl",
					"AQAAAAAAAAABAAAAcBMAAAAAAAB0EwAAAAAAAAAAAAAAAPC/"
				],
				[
					1376,
					1,
					"left_delete",
					null,
					"AQAAALwTAAAAAAAAvBMAAAAAAAAJAAAAcG9vbFN0YXRz",
					"AQAAAAAAAAABAAAAvBMAAAAAAADFEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1386,
					1,
					"paste",
					null,
					"AgAAACQfAAAAAAAAOh8AAAAAAAAAAAAAOh8AAAAAAAA6HwAAAAAAABYAAABuZXR3b3JrSGFzSGlnaGVzdFlpZWxk",
					"AQAAAAAAAAABAAAAJB8AAAAAAAA6HwAAAAAAAAAAAAAAAPC/"
				],
				[
					1389,
					1,
					"insert",
					{
						"characters": "\ncos"
					},
					"BQAAAHoTAAAAAAAAexMAAAAAAAAAAAAAexMAAAAAAAB/EwAAAAAAAAAAAAB/EwAAAAAAAIATAAAAAAAAAAAAAIATAAAAAAAAgRMAAAAAAAAAAAAAgRMAAAAAAACCEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAehMAAAAAAAB6EwAAAAAAAAAAAAAAAPC/"
				],
				[
					1390,
					1,
					"left_delete",
					null,
					"AQAAAIETAAAAAAAAgRMAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAghMAAAAAAACCEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1391,
					1,
					"insert",
					{
						"characters": "nsole.log"
					},
					"CQAAAIETAAAAAAAAghMAAAAAAAAAAAAAghMAAAAAAACDEwAAAAAAAAAAAACDEwAAAAAAAIQTAAAAAAAAAAAAAIQTAAAAAAAAhRMAAAAAAAAAAAAAhRMAAAAAAACGEwAAAAAAAAAAAACGEwAAAAAAAIcTAAAAAAAAAAAAAIcTAAAAAAAAiBMAAAAAAAAAAAAAiBMAAAAAAACJEwAAAAAAAAAAAACJEwAAAAAAAIoTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgRMAAAAAAACBEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1392,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIoTAAAAAAAAjBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAihMAAAAAAACKEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1393,
					1,
					"paste",
					null,
					"AQAAAIsTAAAAAAAAoRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAixMAAAAAAACLEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1396,
					1,
					"insert",
					{
						"characters": "chainSli"
					},
					"CAAAAOQTAAAAAAAA5RMAAAAAAAAAAAAA5RMAAAAAAADmEwAAAAAAAAAAAADmEwAAAAAAAOcTAAAAAAAAAAAAAOcTAAAAAAAA6BMAAAAAAAAAAAAA6BMAAAAAAADpEwAAAAAAAAAAAADpEwAAAAAAAOoTAAAAAAAAAAAAAOoTAAAAAAAA6xMAAAAAAAAAAAAA6xMAAAAAAADsEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5BMAAAAAAADkEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1397,
					1,
					"left_delete",
					null,
					"AQAAAOsTAAAAAAAA6xMAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAA7BMAAAAAAADsEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1398,
					1,
					"insert",
					{
						"characters": "ug"
					},
					"AgAAAOsTAAAAAAAA7BMAAAAAAAAAAAAA7BMAAAAAAADtEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6xMAAAAAAADrEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1401,
					1,
					"left_delete",
					null,
					"AQAAAO8TAAAAAAAA7xMAAAAAAABSAAAACiAgLy8gdXNlRWZmZWN0KCgpID0+IHsgc2V0U2hvd1JlYmFsYW5jZXJNb2RhbChmYWxzZSkgfSwgW25ldHdvcmtIYXNIaWdoZXN0WWllbGRdKQ",
					"AQAAAAAAAAABAAAAQRQAAAAAAADvEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1404,
					1,
					"left_delete",
					null,
					"AQAAAKITAAAAAAAAohMAAAAAAAA7AAAACiAgICAvLyBzZXROZXR3b3JrSGFzSGlnaGVzdFlpZWxkKGlzTmV0d29ya0hpZ2hlc3RZaWVsZCgpKSA",
					"AQAAAAAAAAABAAAA3RMAAAAAAACiEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1407,
					1,
					"left_delete",
					null,
					"AQAAAHoTAAAAAAAAehMAAAAAAAAoAAAACiAgICBjb25zb2xlLmxvZyhuZXR3b3JrSGFzSGlnaGVzdFlpZWxkKQ",
					"AQAAAAAAAAABAAAAohMAAAAAAAB6EwAAAAAAAAAAAAAAAPC/"
				],
				[
					1435,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIoTAAAAAAAAixMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAihMAAAAAAACKEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1436,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIsTAAAAAAAAjBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAixMAAAAAAACLEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1437,
					1,
					"paste",
					null,
					"AQAAAIwTAAAAAAAAlRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjBMAAAAAAACMEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1440,
					1,
					"left_delete",
					null,
					"AQAAADgXAAAAAAAAOBcAAAAAAABWAAAACiAgICAgIC8vIHNldE5ldHdvcmtIYXNIaWdoZXN0WWllbGQoY2hhaW5zU29ydGVkQnlBUFJbMF1bMF0gPT09IHNlbGVjdGVkTmV0d29yaz8uc2x1Zyk",
					"AQAAAAAAAAABAAAAjhcAAAAAAAA4FwAAAAAAAAAAAAAAAPC/"
				],
				[
					1443,
					1,
					"left_delete",
					null,
					"AQAAAA4TAAAAAAAADhMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAADxMAAAAAAAAPEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1446,
					1,
					"left_delete",
					null,
					"AQAAAGMSAAAAAAAAYxIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAZBIAAAAAAABkEgAAAAAAAAAAAAAAAPC/"
				],
				[
					1449,
					1,
					"insert",
					{
						"characters": "\n//"
					},
					"BQAAAO0VAAAAAAAA7hUAAAAAAAAAAAAA7hUAAAAAAAD2FQAAAAAAAAAAAAD2FQAAAAAAAPgVAAAAAAAAAAAAAPgVAAAAAAAA+RUAAAAAAAAAAAAA+RUAAAAAAAD6FQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7RUAAAAAAADtFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1450,
					1,
					"insert",
					{
						"characters": " return"
					},
					"BwAAAPoVAAAAAAAA+xUAAAAAAAAAAAAA+xUAAAAAAAD8FQAAAAAAAAAAAAD8FQAAAAAAAP0VAAAAAAAAAAAAAP0VAAAAAAAA/hUAAAAAAAAAAAAA/hUAAAAAAAD/FQAAAAAAAAAAAAD/FQAAAAAAAAAWAAAAAAAAAAAAAAAWAAAAAAAAARYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+hUAAAAAAAD6FQAAAAAAAAAAAAAAAPC/"
				],
				[
					1451,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAEWAAAAAAAAAhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAARYAAAAAAAABFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1454,
					1,
					"insert",
					{
						"characters": "Should"
					},
					"BwAAANASAAAAAAAA0RIAAAAAAAAAAAAA0RIAAAAAAADREgAAAAAAAA8AAABIYXNIaWdoZXN0WWllbGTREgAAAAAAANISAAAAAAAAAAAAANISAAAAAAAA0xIAAAAAAAAAAAAA0xIAAAAAAADUEgAAAAAAAAAAAADUEgAAAAAAANUSAAAAAAAAAAAAANUSAAAAAAAA1hIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3xIAAAAAAADQEgAAAAAAAAAAAAAAAPC/"
				],
				[
					1455,
					3,
					"left_delete",
					null,
					"AwAAANUSAAAAAAAA1RIAAAAAAAABAAAAZNQSAAAAAAAA1BIAAAAAAAABAAAAbNMSAAAAAAAA0xIAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAA1hIAAAAAAADWEgAAAAAAAAAAAAAAAPC/"
				],
				[
					1456,
					1,
					"insert",
					{
						"characters": "wsA"
					},
					"AwAAANMSAAAAAAAA1BIAAAAAAAAAAAAA1BIAAAAAAADVEgAAAAAAAAAAAADVEgAAAAAAANYSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0xIAAAAAAADTEgAAAAAAAAAAAAAAAPC/"
				],
				[
					1457,
					1,
					"insert",
					{
						"characters": "PRAlert"
					},
					"BwAAANYSAAAAAAAA1xIAAAAAAAAAAAAA1xIAAAAAAADYEgAAAAAAAAAAAADYEgAAAAAAANkSAAAAAAAAAAAAANkSAAAAAAAA2hIAAAAAAAAAAAAA2hIAAAAAAADbEgAAAAAAAAAAAADbEgAAAAAAANwSAAAAAAAAAAAAANwSAAAAAAAA3RIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1hIAAAAAAADWEgAAAAAAAAAAAAAAAPC/"
				],
				[
					1467,
					1,
					"paste",
					null,
					"AgAAAN8SAAAAAAAA8xIAAAAAAAAAAAAA8xIAAAAAAADzEgAAAAAAABkAAABzZXROZXR3b3JrSGFzSGlnaGVzdFlpZWxk",
					"AQAAAAAAAAABAAAA3xIAAAAAAAD4EgAAAAAAAAAAAAAAAPC/"
				],
				[
					1470,
					1,
					"left_delete",
					null,
					"AQAAAN8SAAAAAAAA3xIAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAA4BIAAAAAAADgEgAAAAAAAAAAAAAAAPC/"
				],
				[
					1471,
					1,
					"insert",
					{
						"characters": "setN"
					},
					"BAAAAN8SAAAAAAAA4BIAAAAAAAAAAAAA4BIAAAAAAADhEgAAAAAAAAAAAADhEgAAAAAAAOISAAAAAAAAAAAAAOISAAAAAAAA4xIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3xIAAAAAAADfEgAAAAAAAAAAAAAAAPC/"
				],
				[
					1491,
					1,
					"paste",
					null,
					"AgAAAFATAAAAAAAAZxMAAAAAAAAAAAAAZxMAAAAAAABnEwAAAAAAABkAAABzZXROZXR3b3JrSGFzSGlnaGVzdFlpZWxk",
					"AQAAAAAAAAABAAAAUBMAAAAAAABpEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1494,
					1,
					"insert",
					{
						"characters": "false"
					},
					"BQAAAPwVAAAAAAAA/RUAAAAAAAAAAAAA/RUAAAAAAAD+FQAAAAAAAAAAAAD+FQAAAAAAAP8VAAAAAAAAAAAAAP8VAAAAAAAAABYAAAAAAAAAAAAAABYAAAAAAAABFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/BUAAAAAAAD8FQAAAAAAAAAAAAAAAPC/"
				],
				[
					1495,
					1,
					"insert",
					{
						"characters": " if"
					},
					"AwAAAAEWAAAAAAAAAhYAAAAAAAAAAAAAAhYAAAAAAAADFgAAAAAAAAAAAAADFgAAAAAAAAQWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAARYAAAAAAAABFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1496,
					1,
					"insert",
					{
						"characters": " netwok"
					},
					"BwAAAAQWAAAAAAAABRYAAAAAAAAAAAAABRYAAAAAAAAGFgAAAAAAAAAAAAAGFgAAAAAAAAcWAAAAAAAAAAAAAAcWAAAAAAAACBYAAAAAAAAAAAAACBYAAAAAAAAJFgAAAAAAAAAAAAAJFgAAAAAAAAoWAAAAAAAAAAAAAAoWAAAAAAAACxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABBYAAAAAAAAEFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1497,
					1,
					"left_delete",
					null,
					"AQAAAAoWAAAAAAAAChYAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAACxYAAAAAAAALFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1498,
					1,
					"insert",
					{
						"characters": "rk"
					},
					"AgAAAAoWAAAAAAAACxYAAAAAAAAAAAAACxYAAAAAAAAMFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAChYAAAAAAAAKFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1499,
					1,
					"insert",
					{
						"characters": " has"
					},
					"BAAAAAwWAAAAAAAADRYAAAAAAAAAAAAADRYAAAAAAAAOFgAAAAAAAAAAAAAOFgAAAAAAAA8WAAAAAAAAAAAAAA8WAAAAAAAAEBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADBYAAAAAAAAMFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1500,
					1,
					"insert",
					{
						"characters": " no"
					},
					"AwAAABAWAAAAAAAAERYAAAAAAAAAAAAAERYAAAAAAAASFgAAAAAAAAAAAAASFgAAAAAAABMWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEBYAAAAAAAAQFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1501,
					1,
					"insert",
					{
						"characters": " APr"
					},
					"BAAAABMWAAAAAAAAFBYAAAAAAAAAAAAAFBYAAAAAAAAVFgAAAAAAAAAAAAAVFgAAAAAAABYWAAAAAAAAAAAAABYWAAAAAAAAFxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAExYAAAAAAAATFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1502,
					1,
					"left_delete",
					null,
					"AQAAABYWAAAAAAAAFhYAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAFxYAAAAAAAAXFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1503,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAABYWAAAAAAAAFxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFhYAAAAAAAAWFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1504,
					1,
					"left_delete",
					null,
					"AQAAABYWAAAAAAAAFhYAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAFxYAAAAAAAAXFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1505,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAABYWAAAAAAAAFxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFhYAAAAAAAAWFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1506,
					1,
					"left_delete",
					null,
					"AQAAABYWAAAAAAAAFhYAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAFxYAAAAAAAAXFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1507,
					1,
					"insert",
					{
						"characters": "R"
					},
					"AQAAABYWAAAAAAAAFxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFhYAAAAAAAAWFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1508,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABcWAAAAAAAAGBYAAAAAAAAAAAAAGBYAAAAAAAAiFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFxYAAAAAAAAXFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1509,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAACIWAAAAAAAAIxYAAAAAAAAAAAAAIxYAAAAAAAAkFgAAAAAAAAAAAAAkFgAAAAAAACUWAAAAAAAAAAAAACUWAAAAAAAAJhYAAAAAAAAAAAAAJhYAAAAAAAAnFgAAAAAAAAAAAAAnFgAAAAAAACgWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIhYAAAAAAAAiFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1510,
					1,
					"insert",
					{
						"characters": " false"
					},
					"BgAAACgWAAAAAAAAKRYAAAAAAAAAAAAAKRYAAAAAAAAqFgAAAAAAAAAAAAAqFgAAAAAAACsWAAAAAAAAAAAAACsWAAAAAAAALBYAAAAAAAAAAAAALBYAAAAAAAAtFgAAAAAAAAAAAAAtFgAAAAAAAC4WAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKBYAAAAAAAAoFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1517,
					2,
					"left_delete",
					null,
					"AgAAAOgVAAAAAAAA6BUAAAAAAABGAAAAICAgICAgICAgIC8vIHJldHVybiBmYWxzZSBpZiBuZXR3b3JrIGhhcyBubyBBUFIKICAgICAgICAgIHJldHVybiBmYWxzZecVAAAAAAAA5xUAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAALhYAAAAAAADoFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1520,
					1,
					"insert",
					{
						"characters": " else"
					},
					"BQAAAGoWAAAAAAAAaxYAAAAAAAAAAAAAaxYAAAAAAABsFgAAAAAAAAAAAABsFgAAAAAAAG0WAAAAAAAAAAAAAG0WAAAAAAAAbhYAAAAAAAAAAAAAbhYAAAAAAABvFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAahYAAAAAAABqFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1521,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG8WAAAAAAAAcBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbxYAAAAAAABvFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1522,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHAWAAAAAAAAchYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcBYAAAAAAABwFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1523,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAHEWAAAAAAAAchYAAAAAAAAAAAAAchYAAAAAAAB6FgAAAAAAAAAAAAB6FgAAAAAAAHsWAAAAAAAAAAAAAHsWAAAAAAAAgxYAAAAAAAAAAAAAchYAAAAAAAByFgAAAAAAAAgAAAAgICAgICAgIHIWAAAAAAAAfBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcRYAAAAAAABxFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1524,
					1,
					"paste",
					null,
					"AQAAAHwWAAAAAAAAwhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfBYAAAAAAAB8FgAAAAAAAAAAAAAAAPC/"
				],
				[
					1527,
					5,
					"left_delete",
					null,
					"BQAAAIQWAAAAAAAAhBYAAAAAAAACAAAAICCCFgAAAAAAAIIWAAAAAAAAAgAAACAggBYAAAAAAACAFgAAAAAAAAIAAAAgIH4WAAAAAAAAfhYAAAAAAAACAAAAICB8FgAAAAAAAHwWAAAAAAAAAgAAACAg",
					"AQAAAAAAAAABAAAAhhYAAAAAAACGFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1562,
					1,
					"paste",
					null,
					"AgAAAKUeAAAAAAAAuR4AAAAAAAAAAAAAuR4AAAAAAAC5HgAAAAAAABYAAABuZXR3b3JrSGFzSGlnaGVzdFlpZWxk",
					"AQAAAAAAAAABAAAApR4AAAAAAAC7HgAAAAAAAAAAAAAAAPC/"
				],
				[
					1565,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAKUeAAAAAAAAph4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApR4AAAAAAAClHgAAAAAAAAAAAAAAAPC/"
				],
				[
					1571,
					2,
					"left_delete",
					null,
					"AgAAAGsWAAAAAAAAaxYAAAAAAABXAAAAZWxzZSB7CiAgICAgICAgICAvLyByZXR1cm4gZmFsc2UgaWYgbmV0d29yayBoYXMgbm8gQVBSCiAgICAgICAgICByZXR1cm4gZmFsc2UKICAgICAgICB9ahYAAAAAAABqFgAAAAAAAAEAAAAg",
					"AQAAAAAAAAABAAAAwhYAAAAAAABrFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1574,
					1,
					"insert",
					{
						"characters": "\n\nif"
					},
					"BwAAAPAWAAAAAAAA8RYAAAAAAAAAAAAA8RYAAAAAAAD3FgAAAAAAAAAAAAD3FgAAAAAAAPgWAAAAAAAAAAAAAPgWAAAAAAAA/hYAAAAAAAAAAAAA8RYAAAAAAADxFgAAAAAAAAYAAAAgICAgICD4FgAAAAAAAPkWAAAAAAAAAAAAAPkWAAAAAAAA+hYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8BYAAAAAAADwFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1575,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPoWAAAAAAAA+xYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+hYAAAAAAAD6FgAAAAAAAAAAAAAAAPC/"
				],
				[
					1576,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPsWAAAAAAAA/RYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+xYAAAAAAAD7FgAAAAAAAAAAAAAAAPC/"
				],
				[
					1580,
					6,
					"left_delete",
					null,
					"BgAAAPcWAAAAAAAA9xYAAAAAAAAGAAAAIGlmICgp9hYAAAAAAAD2FgAAAAAAAAEAAAAg9BYAAAAAAAD0FgAAAAAAAAIAAAAgIPIWAAAAAAAA8hYAAAAAAAACAAAAICDxFgAAAAAAAPEWAAAAAAAAAQAAAArwFgAAAAAAAPAWAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAA/RYAAAAAAAD3FgAAAAAAAAAAAAAAAPC/"
				],
				[
					1583,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAHUUAAAAAAAAdhQAAAAAAAAAAAAAdhQAAAAAAAB8FAAAAAAAAAAAAAB8FAAAAAAAAH0UAAAAAAAAAAAAAH0UAAAAAAAAgxQAAAAAAAAAAAAAdhQAAAAAAAB2FAAAAAAAAAYAAAAgICAgICA",
					"AQAAAAAAAAABAAAAdRQAAAAAAAB1FAAAAAAAAAAAAAAAAPC/"
				],
				[
					1584,
					1,
					"paste",
					null,
					"AQAAAH0UAAAAAAAAgxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfRQAAAAAAAB9FAAAAAAAAAAAAAAAAPC/"
				],
				[
					1590,
					1,
					"paste",
					null,
					"AQAAAIIUAAAAAAAAxhQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAghQAAAAAAACCFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1595,
					1,
					"insert",
					{
						"characters": "cha"
					},
					"BAAAAJcUAAAAAAAAmBQAAAAAAAAAAAAAmBQAAAAAAACYFAAAAAAAAAUAAABjaGFpbpgUAAAAAAAAmRQAAAAAAAAAAAAAmRQAAAAAAACaFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlxQAAAAAAACcFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1605,
					1,
					"paste",
					null,
					"AgAAAJcUAAAAAAAArBQAAAAAAAAAAAAArBQAAAAAAACsFAAAAAAAAAMAAABjaGE",
					"AQAAAAAAAAABAAAAlxQAAAAAAACaFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1608,
					1,
					"insert",
					{
						"characters": " ||"
					},
					"AwAAANcUAAAAAAAA2BQAAAAAAAAAAAAA2BQAAAAAAADZFAAAAAAAAAAAAADZFAAAAAAAANoUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1xQAAAAAAADXFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1609,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANoUAAAAAAAA2xQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2hQAAAAAAADaFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1612,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAIEUAAAAAAAAghQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgRQAAAAAAACBFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1615,
					1,
					"paste",
					null,
					"AQAAANwUAAAAAAAA8RQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3BQAAAAAAADcFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1624,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPEUAAAAAAAA8hQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8RQAAAAAAADxFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1625,
					1,
					"paste",
					null,
					"AQAAAPIUAAAAAAAALxUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8hQAAAAAAADyFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1628,
					1,
					"left_delete",
					null,
					"AQAAANwUAAAAAAAA3BQAAAAAAAAWAAAAc2VsZWN0ZWROZXR3b3JrPy5zbHVnIA",
					"AQAAAAAAAAABAAAA8hQAAAAAAADcFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1631,
					1,
					"insert",
					{
						"characters": " ==="
					},
					"BAAAABkVAAAAAAAAGhUAAAAAAAAAAAAAGhUAAAAAAAAbFQAAAAAAAAAAAAAbFQAAAAAAABwVAAAAAAAAAAAAABwVAAAAAAAAHRUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGRUAAAAAAAAZFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1632,
					1,
					"insert",
					{
						"characters": " 0)"
					},
					"AwAAAB0VAAAAAAAAHhUAAAAAAAAAAAAAHhUAAAAAAAAfFQAAAAAAAAAAAAAfFQAAAAAAACAVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHRUAAAAAAAAdFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1633,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACAVAAAAAAAAIRUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIBUAAAAAAAAgFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1634,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAACEVAAAAAAAAIxUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIRUAAAAAAAAhFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1635,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAACIVAAAAAAAAIxUAAAAAAAAAAAAAIxUAAAAAAAAqFQAAAAAAAAAAAAAqFQAAAAAAACsVAAAAAAAAAAAAACsVAAAAAAAAMhUAAAAAAAAAAAAAIxUAAAAAAAAjFQAAAAAAAAcAAAAgICAgICAgIxUAAAAAAAArFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIhUAAAAAAAAiFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1636,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAACsVAAAAAAAALBUAAAAAAAAAAAAALBUAAAAAAAAtFQAAAAAAAAAAAAAtFQAAAAAAAC4VAAAAAAAAAAAAAC4VAAAAAAAALxUAAAAAAAAAAAAALxUAAAAAAAAwFQAAAAAAAAAAAAAwFQAAAAAAADEVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKxUAAAAAAAArFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1637,
					1,
					"insert",
					{
						"characters": " false"
					},
					"BgAAADEVAAAAAAAAMhUAAAAAAAAAAAAAMhUAAAAAAAAzFQAAAAAAAAAAAAAzFQAAAAAAADQVAAAAAAAAAAAAADQVAAAAAAAANRUAAAAAAAAAAAAANRUAAAAAAAA2FQAAAAAAAAAAAAA2FQAAAAAAADcVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMRUAAAAAAAAxFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1640,
					2,
					"unindent",
					null,
					"BgAAAHcUAAAAAAAAdxQAAAAAAAACAAAAICAhFQAAAAAAACEVAAAAAAAAAgAAACAgNBUAAAAAAAA0FQAAAAAAAAIAAAAgIHcUAAAAAAAAdxQAAAAAAAACAAAAICAfFQAAAAAAAB8VAAAAAAAAAgAAACAgMBUAAAAAAAAwFQAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAQBUAAAAAAAB3FAAAAAAAAAAAAAAAAPC/"
				],
				[
					1641,
					2,
					"unindent",
					null,
					"BgAAAHcUAAAAAAAAdxQAAAAAAAACAAAAICAdFQAAAAAAAB0VAAAAAAAAAgAAACAgLBUAAAAAAAAsFQAAAAAAAAIAAAAgIHcUAAAAAAAAdxQAAAAAAAABAAAAIBwVAAAAAAAAHBUAAAAAAAACAAAAICApFQAAAAAAACkVAAAAAAAAAQAAACA",
					"AQAAAAAAAAABAAAANBUAAAAAAAB3FAAAAAAAAAAAAAAAAPC/"
				],
				[
					1642,
					3,
					"indent",
					null,
					"CQAAAHcUAAAAAAAAeRQAAAAAAAAAAAAAHhUAAAAAAAAgFQAAAAAAAAAAAAAtFQAAAAAAAC8VAAAAAAAAAAAAAHcUAAAAAAAAeRQAAAAAAAAAAAAAIBUAAAAAAAAiFQAAAAAAAAAAAAAxFQAAAAAAADMVAAAAAAAAAAAAAHcUAAAAAAAAeRQAAAAAAAAAAAAAIhUAAAAAAAAkFQAAAAAAAAAAAAA1FQAAAAAAADcVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKhUAAAAAAAB3FAAAAAAAAAAAAAAAAPC/"
				],
				[
					1644,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAACgVAAAAAAAAKhUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKBUAAAAAAAAoFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1647,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAHUUAAAAAAAAdhQAAAAAAAAAAAAAdhQAAAAAAAB8FAAAAAAAAAAAAAB8FAAAAAAAAH0UAAAAAAAAAAAAAH0UAAAAAAAAgxQAAAAAAAAAAAAAdhQAAAAAAAB2FAAAAAAAAAYAAAAgICAgICA",
					"AQAAAAAAAAABAAAAdRQAAAAAAAB1FAAAAAAAAAAAAAAAAPC/"
				],
				[
					1654,
					1,
					"insert",
					{
						"characters": "map"
					},
					"BQAAAHQVAAAAAAAAdRUAAAAAAAAAAAAAdRUAAAAAAAB1FQAAAAAAAAYAAAByZWR1Y2V3FAAAAAAAAHcUAAAAAAAABgAAACAgICAgIG8VAAAAAAAAcBUAAAAAAAAAAAAAcBUAAAAAAABxFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdBUAAAAAAAB6FQAAAAAAAAAAAAAAAPC/"
				],
				[
					1659,
					1,
					"left_delete",
					null,
					"AQAAAHIVAAAAAAAAchUAAAAAAAAiAAAAKGFjYzogW3N0cmluZywgbnVtYmVyLCBzdHJpbmddW10sIA",
					"AQAAAAAAAAABAAAAlBUAAAAAAAByFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1662,
					4,
					"left_delete",
					null,
					"BAAAAC4XAAAAAAAALhcAAAAAAAABAAAAXS0XAAAAAAAALRcAAAAAAAABAAAAWywXAAAAAAAALBcAAAAAAAABAAAAICsXAAAAAAAAKxcAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAALxcAAAAAAAAvFwAAAAAAAAAAAAAAAPC/"
				],
				[
					1671,
					1,
					"insert",
					{
						"characters": "false"
					},
					"BgAAABYWAAAAAAAAFxYAAAAAAAAAAAAAFxYAAAAAAAAXFgAAAAAAAAMAAABhY2MXFgAAAAAAABgWAAAAAAAAAAAAABgWAAAAAAAAGRYAAAAAAAAAAAAAGRYAAAAAAAAaFgAAAAAAAAAAAAAaFgAAAAAAABsWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFhYAAAAAAAAZFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1676,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BwAAAJoWAAAAAAAAmxYAAAAAAAAAAAAAmxYAAAAAAACbFgAAAAAAAG4AAABhY2MucHVzaChbY2hhaW4sIGFsbE5ldHdvcmtzW2NoYWluXVt0b2tlblN5bWJvbF0udG90YWxBcHIsIGFsbE5ldHdvcmtzW2NoYWluXVt0b2tlblN5bWJvbF0udG90YWxBcHJGb3JtYXR0ZWRdKZsWAAAAAAAAnBYAAAAAAAAAAAAAnBYAAAAAAACdFgAAAAAAAAAAAACdFgAAAAAAAJ4WAAAAAAAAAAAAAJ4WAAAAAAAAnxYAAAAAAAAAAAAAnxYAAAAAAACgFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmhYAAAAAAAAIFwAAAAAAAAAAAAAAAPC/"
				],
				[
					1677,
					1,
					"insert",
					{
						"characters": " false"
					},
					"BgAAAKAWAAAAAAAAoRYAAAAAAAAAAAAAoRYAAAAAAACiFgAAAAAAAAAAAACiFgAAAAAAAKMWAAAAAAAAAAAAAKMWAAAAAAAApBYAAAAAAAAAAAAApBYAAAAAAAClFgAAAAAAAAAAAAClFgAAAAAAAKYWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoBYAAAAAAACgFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1680,
					1,
					"left_delete",
					null,
					"AQAAALAWAAAAAAAAsBYAAAAAAAATAAAACiAgICAgICAgcmV0dXJuIGFjYw",
					"AQAAAAAAAAABAAAAwxYAAAAAAACwFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1685,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAHEVAAAAAAAAchUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcRUAAAAAAABxFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1698,
					1,
					"insert",
					{
						"characters": "\n\ncon"
					},
					"CAAAAEAVAAAAAAAAQRUAAAAAAAAAAAAAQRUAAAAAAABHFQAAAAAAAAAAAABHFQAAAAAAAEgVAAAAAAAAAAAAAEgVAAAAAAAAThUAAAAAAAAAAAAAQRUAAAAAAABBFQAAAAAAAAYAAAAgICAgICBIFQAAAAAAAEkVAAAAAAAAAAAAAEkVAAAAAAAAShUAAAAAAAAAAAAAShUAAAAAAABLFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQBUAAAAAAABAFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1699,
					1,
					"insert",
					{
						"characters": "st"
					},
					"AgAAAEsVAAAAAAAATBUAAAAAAAAAAAAATBUAAAAAAABNFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASxUAAAAAAABLFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1700,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAE0VAAAAAAAAThUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATRUAAAAAAABNFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1701,
					1,
					"left_delete",
					null,
					"BgAAAE0VAAAAAAAATRUAAAAAAAABAAAAIEwVAAAAAAAATBUAAAAAAAABAAAAdEsVAAAAAAAASxUAAAAAAAABAAAAc0oVAAAAAAAAShUAAAAAAAABAAAAbkkVAAAAAAAASRUAAAAAAAABAAAAb0gVAAAAAAAASBUAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAThUAAAAAAABOFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1702,
					1,
					"insert",
					{
						"characters": "for"
					},
					"AwAAAEgVAAAAAAAASRUAAAAAAAAAAAAASRUAAAAAAABKFQAAAAAAAAAAAABKFQAAAAAAAEsVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASBUAAAAAAABIFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1703,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEsVAAAAAAAATBUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASxUAAAAAAABLFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1704,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEwVAAAAAAAAThUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATBUAAAAAAABMFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1705,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAE0VAAAAAAAAThUAAAAAAAAAAAAAThUAAAAAAABPFQAAAAAAAAAAAABPFQAAAAAAAFAVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATRUAAAAAAABNFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1706,
					1,
					"insert",
					{
						"characters": " chain"
					},
					"BgAAAFAVAAAAAAAAURUAAAAAAAAAAAAAURUAAAAAAABSFQAAAAAAAAAAAABSFQAAAAAAAFMVAAAAAAAAAAAAAFMVAAAAAAAAVBUAAAAAAAAAAAAAVBUAAAAAAABVFQAAAAAAAAAAAABVFQAAAAAAAFYVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUBUAAAAAAABQFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1707,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAAFYVAAAAAAAAVxUAAAAAAAAAAAAAVxUAAAAAAABYFQAAAAAAAAAAAABYFQAAAAAAAFkVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVhUAAAAAAABWFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1708,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFkVAAAAAAAAWhUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWRUAAAAAAABZFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1718,
					1,
					"paste",
					null,
					"AQAAAFoVAAAAAAAAZBUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWhUAAAAAAABaFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1721,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGUVAAAAAAAAZhUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZRUAAAAAAABlFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1722,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGYVAAAAAAAAaBUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZhUAAAAAAABmFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1723,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAGcVAAAAAAAAaBUAAAAAAAAAAAAAaBUAAAAAAABuFQAAAAAAAAAAAABuFQAAAAAAAG8VAAAAAAAAAAAAAG8VAAAAAAAAdRUAAAAAAAAAAAAAaBUAAAAAAABoFQAAAAAAAAYAAAAgICAgICBoFQAAAAAAAHAVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZxUAAAAAAABnFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1731,
					1,
					"insert",
					{
						"characters": "("
					},
					"AgAAAGcXAAAAAAAAaBcAAAAAAAAAAAAAaBUAAAAAAABoFQAAAAAAAAgAAAAgICAgICAgIA",
					"AQAAAAAAAAABAAAAZxcAAAAAAABnFwAAAAAAAAAAAAAAAPC/"
				],
				[
					1737,
					1,
					"left_delete",
					null,
					"AQAAALcVAAAAAAAAtxUAAAAAAAAqAQAAICAgICAgICAvLyBpZiBBUFIgZGF0YSBpcyB1bmRlZmluZWQsIGJyZWFrCiAgICAgICAgaWYgKHR5cGVvZiBhbGxOZXR3b3Jrcz8uW2NoYWluXT8uW3Rva2VuU3ltYm9sXT8udG90YWxBcHIgPT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2UKICAgICAgICB9CiAgICAgICAgLy8gaW5jbHVkZSBjaGFpbiBvbmx5IGlmIHRoZXJlIGlzIEFQUgogICAgICAgIGlmIChhbGxOZXR3b3Jrc1tjaGFpbl1bdG9rZW5TeW1ib2xdLnRvdGFsQXByID4gMCkgewogICAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgICAgfQ",
					"AQAAAAAAAAABAAAA4RYAAAAAAAC3FQAAAAAAAAAAAAAAAPC/"
				],
				[
					1738,
					1,
					"reindent",
					null,
					"AQAAALcVAAAAAAAAvxUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtxUAAAAAAAC3FQAAAAAAAAAAAAAAAPC/"
				],
				[
					1739,
					1,
					"insert",
					{
						"characters": "retun"
					},
					"BQAAAL8VAAAAAAAAwBUAAAAAAAAAAAAAwBUAAAAAAADBFQAAAAAAAAAAAADBFQAAAAAAAMIVAAAAAAAAAAAAAMIVAAAAAAAAwxUAAAAAAAAAAAAAwxUAAAAAAADEFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvxUAAAAAAAC/FQAAAAAAAAAAAAAAAPC/"
				],
				[
					1740,
					1,
					"left_delete",
					null,
					"AQAAAMMVAAAAAAAAwxUAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAxBUAAAAAAADEFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1741,
					1,
					"insert",
					{
						"characters": "rn"
					},
					"AgAAAMMVAAAAAAAAxBUAAAAAAAAAAAAAxBUAAAAAAADFFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwxUAAAAAAADDFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1742,
					1,
					"insert",
					{
						"characters": " chain"
					},
					"BgAAAMUVAAAAAAAAxhUAAAAAAAAAAAAAxhUAAAAAAADHFQAAAAAAAAAAAADHFQAAAAAAAMgVAAAAAAAAAAAAAMgVAAAAAAAAyRUAAAAAAAAAAAAAyRUAAAAAAADKFQAAAAAAAAAAAADKFQAAAAAAAMsVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxRUAAAAAAADFFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1750,
					1,
					"paste",
					null,
					"AgAAAMYVAAAAAAAANBYAAAAAAAAAAAAANBYAAAAAAAA0FgAAAAAAAAUAAABjaGFpbg",
					"AQAAAAAAAAABAAAAxhUAAAAAAADLFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1753,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHEVAAAAAAAAchUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcRUAAAAAAABxFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1755,
					1,
					"reindent",
					null,
					"AQAAAHEVAAAAAAAAdxUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcRUAAAAAAABxFQAAAAAAAAAAAAAAAAAA"
				],
				[
					1756,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BgAAAHcVAAAAAAAAeBUAAAAAAAAAAAAAeBUAAAAAAAB+FQAAAAAAAAAAAABxFQAAAAAAAHEVAAAAAAAABgAAACAgICAgIHgVAAAAAAAAeRUAAAAAAAAAAAAAeRUAAAAAAAB6FQAAAAAAAAAAAAB6FQAAAAAAAHsVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdxUAAAAAAAB3FQAAAAAAAAAAAAAAAPC/"
				],
				[
					1757,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHsVAAAAAAAAfBUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAexUAAAAAAAB7FQAAAAAAAAAAAAAAAPC/"
				],
				[
					1758,
					1,
					"insert",
					{
						"characters": "cha"
					},
					"AwAAAHwVAAAAAAAAfRUAAAAAAAAAAAAAfRUAAAAAAAB+FQAAAAAAAAAAAAB+FQAAAAAAAH8VAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfBUAAAAAAAB8FQAAAAAAAAAAAAAAAPC/"
				],
				[
					1759,
					1,
					"insert",
					{
						"characters": "in"
					},
					"AgAAAH8VAAAAAAAAgBUAAAAAAAAAAAAAgBUAAAAAAACBFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfxUAAAAAAAB/FQAAAAAAAAAAAAAAAPC/"
				],
				[
					1760,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAIEVAAAAAAAAghUAAAAAAAAAAAAAghUAAAAAAACDFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgRUAAAAAAACBFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1761,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIMVAAAAAAAAhBUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgxUAAAAAAACDFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1762,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAIQVAAAAAAAAhhUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhBUAAAAAAACEFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1768,
					1,
					"left_delete",
					null,
					"AQAAAE0VAAAAAAAATRUAAAAAAAADAAAAbGV0",
					"AQAAAAAAAAABAAAATRUAAAAAAABQFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1770,
					1,
					"left_delete",
					null,
					"AQAAAE0VAAAAAAAATRUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAThUAAAAAAABOFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1774,
					3,
					"left_delete",
					null,
					"AwAAAEIVAAAAAAAAQhUAAAAAAAAqAAAAICAgICAgZm9yIChjaGFpbiBvZiBjaGFpbk5hbWVzKSB7CgogICAgICB9QRUAAAAAAABBFQAAAAAAAAEAAAAKQBUAAAAAAABAFQAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAbBUAAAAAAABCFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1777,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFYVAAAAAAAAVxUAAAAAAAAAAAAAVxUAAAAAAABdFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVhUAAAAAAABWFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1778,
					1,
					"paste",
					null,
					"AQAAAF0VAAAAAAAAhxUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXRUAAAAAAABdFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1781,
					3,
					"left_delete",
					null,
					"AwAAAGEVAAAAAAAAYRUAAAAAAAACAAAAICBfFQAAAAAAAF8VAAAAAAAAAgAAACAgXRUAAAAAAABdFQAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAYxUAAAAAAABjFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1784,
					1,
					"left_delete",
					null,
					"AQAAAHYUAAAAAAAAdhQAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAdxQAAAAAAAB3FAAAAAAAAAAAAAAAAPC/"
				],
				[
					1791,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAIAVAAAAAAAAgRUAAAAAAAAAAAAAgRUAAAAAAACHFQAAAAAAAAAAAACHFQAAAAAAAIgVAAAAAAAAAAAAAIgVAAAAAAAAjhUAAAAAAAAAAAAAgRUAAAAAAACBFQAAAAAAAAYAAAAgICAgICA",
					"AQAAAAAAAAABAAAAgBUAAAAAAACAFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1792,
					1,
					"paste",
					null,
					"AQAAAIgVAAAAAAAAHRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiBUAAAAAAACIFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1793,
					2,
					"left_delete",
					null,
					"AgAAABwWAAAAAAAAHBYAAAAAAAABAAAAIBsWAAAAAAAAGxYAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAHRYAAAAAAAAdFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1796,
					1,
					"left_delete",
					null,
					"AQAAAAEWAAAAAAAAARYAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAAhYAAAAAAAACFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1799,
					3,
					"indent",
					null,
					"DwAAAKwVAAAAAAAArhUAAAAAAAAAAAAAxBUAAAAAAADGFQAAAAAAAAAAAADtFQAAAAAAAO8VAAAAAAAAAAAAAAgWAAAAAAAAChYAAAAAAAAAAAAADRYAAAAAAAAPFgAAAAAAAAAAAACsFQAAAAAAAK4VAAAAAAAAAAAAAMYVAAAAAAAAyBUAAAAAAAAAAAAA8RUAAAAAAADzFQAAAAAAAAAAAAAOFgAAAAAAABAWAAAAAAAAAAAAABUWAAAAAAAAFxYAAAAAAAAAAAAArBUAAAAAAACuFQAAAAAAAAAAAADIFQAAAAAAAMoVAAAAAAAAAAAAAPUVAAAAAAAA9xUAAAAAAAAAAAAAFBYAAAAAAAAWFgAAAAAAAAAAAAAdFgAAAAAAAB8WAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGhYAAAAAAACsFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1802,
					1,
					"insert",
					{
						"characters": "\t\t\t"
					},
					"BAAAAIIVAAAAAAAAhBUAAAAAAAAAAAAAhBUAAAAAAACEFQAAAAAAAAYAAAAgICAgICCEFQAAAAAAAIYVAAAAAAAAAAAAAIYVAAAAAAAAiBUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiBUAAAAAAACCFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1809,
					1,
					"left_delete",
					null,
					"AQAAAMUVAAAAAAAAxRUAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAxhUAAAAAAADGFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1812,
					1,
					"left_delete",
					null,
					"AQAAAKoVAAAAAAAAqhUAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAqxUAAAAAAACrFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1815,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGoXAAAAAAAAaxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAahcAAAAAAABqFwAAAAAAAAAAAAAAAPC/"
				],
				[
					1816,
					1,
					"reindent",
					null,
					"AQAAAGsXAAAAAAAAcRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaxcAAAAAAABrFwAAAAAAAAAAAAAAAPC/"
				],
				[
					1817,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAHEXAAAAAAAAchcAAAAAAAAAAAAAchcAAAAAAABzFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcRcAAAAAAABxFwAAAAAAAAAAAAAAAPC/"
				],
				[
					1818,
					1,
					"insert",
					{
						"characters": " return"
					},
					"BwAAAHMXAAAAAAAAdBcAAAAAAAAAAAAAdBcAAAAAAAB1FwAAAAAAAAAAAAB1FwAAAAAAAHYXAAAAAAAAAAAAAHYXAAAAAAAAdxcAAAAAAAAAAAAAdxcAAAAAAAB4FwAAAAAAAAAAAAB4FwAAAAAAAHkXAAAAAAAAAAAAAHkXAAAAAAAAehcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcxcAAAAAAABzFwAAAAAAAAAAAAAAAPC/"
				],
				[
					1819,
					1,
					"insert",
					{
						"characters": " if"
					},
					"AwAAAHoXAAAAAAAAexcAAAAAAAAAAAAAexcAAAAAAAB8FwAAAAAAAAAAAAB8FwAAAAAAAH0XAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAehcAAAAAAAB6FwAAAAAAAAAAAAAAAPC/"
				],
				[
					1820,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH0XAAAAAAAAfhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfRcAAAAAAAB9FwAAAAAAAAAAAAAAAPC/"
				],
				[
					1821,
					3,
					"left_delete",
					null,
					"AwAAAH0XAAAAAAAAfRcAAAAAAAABAAAAIHwXAAAAAAAAfBcAAAAAAAABAAAAZnsXAAAAAAAAexcAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAfhcAAAAAAAB+FwAAAAAAAAAAAAAAAPC/"
				],
				[
					1822,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAHsXAAAAAAAAfBcAAAAAAAAAAAAAfBcAAAAAAAB9FwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAexcAAAAAAAB7FwAAAAAAAAAAAAAAAPC/"
				],
				[
					1823,
					1,
					"insert",
					{
						"characters": " highest"
					},
					"CAAAAH0XAAAAAAAAfhcAAAAAAAAAAAAAfhcAAAAAAAB/FwAAAAAAAAAAAAB/FwAAAAAAAIAXAAAAAAAAAAAAAIAXAAAAAAAAgRcAAAAAAAAAAAAAgRcAAAAAAACCFwAAAAAAAAAAAACCFwAAAAAAAIMXAAAAAAAAAAAAAIMXAAAAAAAAhBcAAAAAAAAAAAAAhBcAAAAAAACFFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfRcAAAAAAAB9FwAAAAAAAAAAAAAAAPC/"
				],
				[
					1824,
					1,
					"insert",
					{
						"characters": " APR"
					},
					"BAAAAIUXAAAAAAAAhhcAAAAAAAAAAAAAhhcAAAAAAACHFwAAAAAAAAAAAACHFwAAAAAAAIgXAAAAAAAAAAAAAIgXAAAAAAAAiRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhRcAAAAAAACFFwAAAAAAAAAAAAAAAPC/"
				],
				[
					1825,
					1,
					"insert",
					{
						"characters": " network"
					},
					"CAAAAIkXAAAAAAAAihcAAAAAAAAAAAAAihcAAAAAAACLFwAAAAAAAAAAAACLFwAAAAAAAIwXAAAAAAAAAAAAAIwXAAAAAAAAjRcAAAAAAAAAAAAAjRcAAAAAAACOFwAAAAAAAAAAAACOFwAAAAAAAI8XAAAAAAAAAAAAAI8XAAAAAAAAkBcAAAAAAAAAAAAAkBcAAAAAAACRFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiRcAAAAAAACJFwAAAAAAAAAAAAAAAPC/"
				],
				[
					1828,
					1,
					"reindent",
					null,
					"AQAAAHgVAAAAAAAAgBUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeBUAAAAAAAB4FQAAAAAAAAAAAAAAAPC/"
				],
				[
					1833,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BwAAAEcVAAAAAAAASBUAAAAAAAAAAAAASBUAAAAAAABIFQAAAAAAAAMAAABsZXR2FQAAAAAAAHYVAAAAAAAACAAAACAgICAgICAgSBUAAAAAAABJFQAAAAAAAAAAAABJFQAAAAAAAEoVAAAAAAAAAAAAAEoVAAAAAAAASxUAAAAAAAAAAAAASxUAAAAAAABMFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARxUAAAAAAABKFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1840,
					1,
					"left_delete",
					null,
					"AQAAAIMVAAAAAAAAgxUAAAAAAABEAAAACiAgICAgIGNvbnN0IG9yaWdpbmFsQXJyYXkgPSBbMSwgMiwgMywgNF0KICAgICAgY29uc3QgbmV3QXJyYXkgPSBbXQo",
					"AQAAAAAAAAABAAAAxxUAAAAAAACDFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1850,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BgAAAGMVAAAAAAAAZBUAAAAAAAAAAAAAZBUAAAAAAABkFQAAAAAAAAUAAABjaGFpbmQVAAAAAAAAZRUAAAAAAAAAAAAAZRUAAAAAAABmFQAAAAAAAAAAAABmFQAAAAAAAGcVAAAAAAAAAAAAAGcVAAAAAAAAaBUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYxUAAAAAAABoFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1851,
					1,
					"insert",
					{
						"characters": " chain"
					},
					"BgAAAGgVAAAAAAAAaRUAAAAAAAAAAAAAaRUAAAAAAABqFQAAAAAAAAAAAABqFQAAAAAAAGsVAAAAAAAAAAAAAGsVAAAAAAAAbBUAAAAAAAAAAAAAbBUAAAAAAABtFQAAAAAAAAAAAABtFQAAAAAAAG4VAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaBUAAAAAAABoFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1856,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAFIVAAAAAAAAUxUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUhUAAAAAAABSFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1862,
					4,
					"left_delete",
					null,
					"BAAAAHgUAAAAAAAAeBQAAAAAAADHAAAAICAgICAgaWYgKCh0eXBlb2YgYWxsTmV0d29ya3M/LltzZWxlY3RlZE5ldHdvcms/LnNsdWddPy5bdG9rZW5TeW1ib2xdPy50b3RhbEFwciA9PT0gInVuZGVmaW5lZCIpIHx8IGFsbE5ldHdvcmtzPy5bc2VsZWN0ZWROZXR3b3JrPy5zbHVnXT8uW3Rva2VuU3ltYm9sXT8udG90YWxBcHIgPT09IDApIHsKICAgICAgICByZXR1cm4gZmFsc2UKICAgICAgfXcUAAAAAAAAdxQAAAAAAAABAAAACnYUAAAAAAAAdhQAAAAAAAABAAAACnUUAAAAAAAAdRQAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAPxUAAAAAAAB4FAAAAAAAAAAAAAAAAPC/"
				],
				[
					1865,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAL8UAAAAAAAAwBQAAAAAAAAAAAAAwBQAAAAAAADGFAAAAAAAAAAAAADGFAAAAAAAAMcUAAAAAAAAAAAAAMcUAAAAAAAAzRQAAAAAAAAAAAAAwBQAAAAAAADAFAAAAAAAAAYAAAAgICAgICA",
					"AQAAAAAAAAABAAAAvxQAAAAAAAC/FAAAAAAAAAAAAAAAAPC/"
				],
				[
					1866,
					1,
					"paste",
					null,
					"AQAAAMcUAAAAAAAAjhUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxxQAAAAAAADHFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1869,
					3,
					"left_delete",
					null,
					"AwAAAMsUAAAAAAAAyxQAAAAAAAACAAAAICDJFAAAAAAAAMkUAAAAAAAAAgAAACAgxxQAAAAAAADHFAAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAzRQAAAAAAADNFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1872,
					1,
					"reindent",
					null,
					"AQAAALcUAAAAAAAAvxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtxQAAAAAAAC3FAAAAAAAAAAAAAAAAPC/"
				],
				[
					1878,
					1,
					"insert",
					{
						"characters": "cah"
					},
					"AwAAAL8UAAAAAAAAwBQAAAAAAAAAAAAAwBQAAAAAAADBFAAAAAAAAAAAAADBFAAAAAAAAMIUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvxQAAAAAAAC/FAAAAAAAAAAAAAAAAPC/"
				],
				[
					1879,
					2,
					"left_delete",
					null,
					"AgAAAMEUAAAAAAAAwRQAAAAAAAABAAAAaMAUAAAAAAAAwBQAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAwhQAAAAAAADCFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1880,
					1,
					"insert",
					{
						"characters": "hains."
					},
					"BgAAAMAUAAAAAAAAwRQAAAAAAAAAAAAAwRQAAAAAAADCFAAAAAAAAAAAAADCFAAAAAAAAMMUAAAAAAAAAAAAAMMUAAAAAAAAxBQAAAAAAAAAAAAAxBQAAAAAAADFFAAAAAAAAAAAAADFFAAAAAAAAMYUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwBQAAAAAAADAFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1881,
					1,
					"paste",
					null,
					"AQAAAMYUAAAAAAAAMBUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxhQAAAAAAADGFAAAAAAAAAAAAAAAAPC/"
				],
				[
					1884,
					2,
					"left_delete",
					null,
					"AgAAAFcWAAAAAAAAVxYAAAAAAADpAAAACiAgICAgIGNvbnNvbGUubG9nKG5ld0FycmF5KQoKICAgICAgY29uc3QgY2hhaW5zV2l0aFRvdGFsQVBSID0gY2hhaW5OYW1lcy5tYXAoKGNoYWluOiBzdHJpbmcpID0+IHsKICAgICAgICByZXR1cm4gYWNjLnB1c2goW2NoYWluLCBhbGxOZXR3b3Jrc1tjaGFpbl1bdG9rZW5TeW1ib2xdLnRvdGFsQXByLCBhbGxOZXR3b3Jrc1tjaGFpbl1bdG9rZW5TeW1ib2xdLnRvdGFsQXByRm9ybWF0dGVkXSkKICAgICAgfSlWFgAAAAAAAFYWAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAQBcAAAAAAABXFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1897,
					1,
					"insert",
					{
						"characters": "shouldHide"
					},
					"CwAAAOATAAAAAAAA4RMAAAAAAAAAAAAA4RMAAAAAAADhEwAAAAAAABUAAABpc05ldHdvcmtIaWdoZXN0WWllbGThEwAAAAAAAOITAAAAAAAAAAAAAOITAAAAAAAA4xMAAAAAAAAAAAAA4xMAAAAAAADkEwAAAAAAAAAAAADkEwAAAAAAAOUTAAAAAAAAAAAAAOUTAAAAAAAA5hMAAAAAAAAAAAAA5hMAAAAAAADnEwAAAAAAAAAAAADnEwAAAAAAAOgTAAAAAAAAAAAAAOgTAAAAAAAA6RMAAAAAAAAAAAAA6RMAAAAAAADqEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4BMAAAAAAAD1EwAAAAAAAAAAAAAAAPC/"
				],
				[
					1898,
					1,
					"insert",
					{
						"characters": "Alert"
					},
					"BQAAAOoTAAAAAAAA6xMAAAAAAAAAAAAA6xMAAAAAAADsEwAAAAAAAAAAAADsEwAAAAAAAO0TAAAAAAAAAAAAAO0TAAAAAAAA7hMAAAAAAAAAAAAA7hMAAAAAAADvEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6hMAAAAAAADqEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1910,
					1,
					"paste",
					null,
					"AgAAADQTAAAAAAAAQxMAAAAAAAAAAAAAQxMAAAAAAABDEwAAAAAAABUAAABpc05ldHdvcmtIaWdoZXN0WWllbGQ",
					"AQAAAAAAAAABAAAANBMAAAAAAABJEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1913,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BwAAAJATAAAAAAAAkRMAAAAAAAAAAAAAkRMAAAAAAACREwAAAAAAAD4AAABnZXQgYW4gYXJyYXkgb2YgcG90ZW50aWFsIG5ldHdvcmtzLCBzb3J0ZWQgYnkgZGVzY2VuZGluZyB5aWVsZJETAAAAAAAAkhMAAAAAAAAAAAAAkhMAAAAAAACTEwAAAAAAAAAAAACTEwAAAAAAAJQTAAAAAAAAAAAAAJQTAAAAAAAAlRMAAAAAAAAAAAAAlRMAAAAAAACWEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzhMAAAAAAACQEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1914,
					1,
					"insert",
					{
						"characters": " false"
					},
					"BgAAAJYTAAAAAAAAlxMAAAAAAAAAAAAAlxMAAAAAAACYEwAAAAAAAAAAAACYEwAAAAAAAJkTAAAAAAAAAAAAAJkTAAAAAAAAmhMAAAAAAAAAAAAAmhMAAAAAAACbEwAAAAAAAAAAAACbEwAAAAAAAJwTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlhMAAAAAAACWEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1915,
					1,
					"insert",
					{
						"characters": " is"
					},
					"AwAAAJwTAAAAAAAAnRMAAAAAAAAAAAAAnRMAAAAAAACeEwAAAAAAAAAAAACeEwAAAAAAAJ8TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnBMAAAAAAACcEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1916,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAJ8TAAAAAAAAoBMAAAAAAAAAAAAAoBMAAAAAAAChEwAAAAAAAAAAAAChEwAAAAAAAKITAAAAAAAAAAAAAKITAAAAAAAAoxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnxMAAAAAAACfEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1917,
					1,
					"insert",
					{
						"characters": " network"
					},
					"CAAAAKMTAAAAAAAApBMAAAAAAAAAAAAApBMAAAAAAAClEwAAAAAAAAAAAAClEwAAAAAAAKYTAAAAAAAAAAAAAKYTAAAAAAAApxMAAAAAAAAAAAAApxMAAAAAAACoEwAAAAAAAAAAAACoEwAAAAAAAKkTAAAAAAAAAAAAAKkTAAAAAAAAqhMAAAAAAAAAAAAAqhMAAAAAAACrEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoxMAAAAAAACjEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1918,
					1,
					"insert",
					{
						"characters": " has"
					},
					"BAAAAKsTAAAAAAAArBMAAAAAAAAAAAAArBMAAAAAAACtEwAAAAAAAAAAAACtEwAAAAAAAK4TAAAAAAAAAAAAAK4TAAAAAAAArxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqxMAAAAAAACrEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1919,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAK8TAAAAAAAAsBMAAAAAAAAAAAAAsBMAAAAAAACxEwAAAAAAAAAAAACxEwAAAAAAALITAAAAAAAAAAAAALITAAAAAAAAsxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArxMAAAAAAACvEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1920,
					1,
					"insert",
					{
						"characters": " highest"
					},
					"CAAAALMTAAAAAAAAtBMAAAAAAAAAAAAAtBMAAAAAAAC1EwAAAAAAAAAAAAC1EwAAAAAAALYTAAAAAAAAAAAAALYTAAAAAAAAtxMAAAAAAAAAAAAAtxMAAAAAAAC4EwAAAAAAAAAAAAC4EwAAAAAAALkTAAAAAAAAAAAAALkTAAAAAAAAuhMAAAAAAAAAAAAAuhMAAAAAAAC7EwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsxMAAAAAAACzEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1921,
					1,
					"insert",
					{
						"characters": " yield"
					},
					"BgAAALsTAAAAAAAAvBMAAAAAAAAAAAAAvBMAAAAAAAC9EwAAAAAAAAAAAAC9EwAAAAAAAL4TAAAAAAAAAAAAAL4TAAAAAAAAvxMAAAAAAAAAAAAAvxMAAAAAAADAEwAAAAAAAAAAAADAEwAAAAAAAMETAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuxMAAAAAAAC7EwAAAAAAAAAAAAAAAPC/"
				],
				[
					1922,
					1,
					"insert",
					{
						"characters": " or"
					},
					"AwAAAMETAAAAAAAAwhMAAAAAAAAAAAAAwhMAAAAAAADDEwAAAAAAAAAAAADDEwAAAAAAAMQTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwRMAAAAAAADBEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1923,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMQTAAAAAAAAxRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxBMAAAAAAADEEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1924,
					1,
					"insert",
					{
						"characters": "the"
					},
					"AwAAAMUTAAAAAAAAxhMAAAAAAAAAAAAAxhMAAAAAAADHEwAAAAAAAAAAAADHEwAAAAAAAMgTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxRMAAAAAAADFEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1925,
					1,
					"insert",
					{
						"characters": " user"
					},
					"BQAAAMgTAAAAAAAAyRMAAAAAAAAAAAAAyRMAAAAAAADKEwAAAAAAAAAAAADKEwAAAAAAAMsTAAAAAAAAAAAAAMsTAAAAAAAAzBMAAAAAAAAAAAAAzBMAAAAAAADNEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyBMAAAAAAADIEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1926,
					1,
					"insert",
					{
						"characters": " does"
					},
					"BQAAAM0TAAAAAAAAzhMAAAAAAAAAAAAAzhMAAAAAAADPEwAAAAAAAAAAAADPEwAAAAAAANATAAAAAAAAAAAAANATAAAAAAAA0RMAAAAAAAAAAAAA0RMAAAAAAADSEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzRMAAAAAAADNEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1927,
					1,
					"insert",
					{
						"characters": " not"
					},
					"BAAAANITAAAAAAAA0xMAAAAAAAAAAAAA0xMAAAAAAADUEwAAAAAAAAAAAADUEwAAAAAAANUTAAAAAAAAAAAAANUTAAAAAAAA1hMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0hMAAAAAAADSEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1928,
					1,
					"insert",
					{
						"characters": " have"
					},
					"BQAAANYTAAAAAAAA1xMAAAAAAAAAAAAA1xMAAAAAAADYEwAAAAAAAAAAAADYEwAAAAAAANkTAAAAAAAAAAAAANkTAAAAAAAA2hMAAAAAAAAAAAAA2hMAAAAAAADbEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1hMAAAAAAADWEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1929,
					1,
					"insert",
					{
						"characters": " toe"
					},
					"BAAAANsTAAAAAAAA3BMAAAAAAAAAAAAA3BMAAAAAAADdEwAAAAAAAAAAAADdEwAAAAAAAN4TAAAAAAAAAAAAAN4TAAAAAAAA3xMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2xMAAAAAAADbEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1930,
					1,
					"left_delete",
					null,
					"AQAAAN4TAAAAAAAA3hMAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAA3xMAAAAAAADfEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1931,
					1,
					"insert",
					{
						"characters": "kens"
					},
					"BAAAAN4TAAAAAAAA3xMAAAAAAAAAAAAA3xMAAAAAAADgEwAAAAAAAAAAAADgEwAAAAAAAOETAAAAAAAAAAAAAOETAAAAAAAA4hMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3hMAAAAAAADeEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1932,
					1,
					"insert",
					{
						"characters": " deposi"
					},
					"BwAAAOITAAAAAAAA4xMAAAAAAAAAAAAA4xMAAAAAAADkEwAAAAAAAAAAAADkEwAAAAAAAOUTAAAAAAAAAAAAAOUTAAAAAAAA5hMAAAAAAAAAAAAA5hMAAAAAAADnEwAAAAAAAAAAAADnEwAAAAAAAOgTAAAAAAAAAAAAAOgTAAAAAAAA6RMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4hMAAAAAAADiEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1933,
					1,
					"insert",
					{
						"characters": "ted"
					},
					"AwAAAOkTAAAAAAAA6hMAAAAAAAAAAAAA6hMAAAAAAADrEwAAAAAAAAAAAADrEwAAAAAAAOwTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6RMAAAAAAADpEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1934,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOwTAAAAAAAA7RMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7BMAAAAAAADsEwAAAAAAAAAAAAAAAPC/"
				],
				[
					1945,
					5,
					"left_delete",
					null,
					"BQAAAHEWAAAAAAAAcRYAAAAAAABeAAAALy8gc29ydCBjaGFpbnMgYnkgQVBSCiAgICAgIGNvbnN0IGNoYWluc1NvcnRlZEJ5QVBSID0gc29ydFR1cGxlc0Rlc2NlbmRpbmcoY2hhaW5zV2l0aFRvdGFsQVBSKW8WAAAAAAAAbxYAAAAAAAACAAAAICBtFgAAAAAAAG0WAAAAAAAAAgAAACAgaxYAAAAAAABrFgAAAAAAAAIAAAAgIGoWAAAAAAAAahYAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAzxYAAAAAAABxFgAAAAAAAAAAAAAAAPC/"
				],
				[
					1951,
					1,
					"left_delete",
					null,
					"AQAAAEwVAAAAAAAATBUAAAAAAAAdAQAACiAgICAgIGlmICgodHlwZW9mIGFsbE5ldHdvcmtzPy5bc2VsZWN0ZWROZXR3b3JrPy5zbHVnXT8uW3Rva2VuU3ltYm9sXT8udG90YWxBcHIgPT09ICJ1bmRlZmluZWQiKSB8fCBhbGxOZXR3b3Jrcz8uW3NlbGVjdGVkTmV0d29yaz8uc2x1Z10/Llt0b2tlblN5bWJvbF0/LnRvdGFsQXByID09PSAwKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgIH0KCiAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBvcmlnaW5hbEFycmF5KSB7CiAgICAgICAgbmV3QXJyYXkucHVzaChlbGVtZW50KQogICAgICB9",
					"AQAAAAAAAAABAAAAaRYAAAAAAABMFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1952,
					1,
					"left_delete",
					null,
					"AQAAAEsVAAAAAAAASxUAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAATBUAAAAAAABMFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1955,
					1,
					"reindent",
					null,
					"AQAAAEwVAAAAAAAAUhUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATBUAAAAAAABMFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1956,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAFIVAAAAAAAAUxUAAAAAAAAAAAAAUxUAAAAAAABZFQAAAAAAAAAAAABMFQAAAAAAAEwVAAAAAAAABgAAACAgICAgIA",
					"AQAAAAAAAAABAAAAUhUAAAAAAABSFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1957,
					1,
					"paste",
					null,
					"AQAAAFMVAAAAAAAAsRUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUxUAAAAAAABTFQAAAAAAAAAAAAAAAPC/"
				],
				[
					1972,
					1,
					"paste",
					null,
					"AgAAAJ4VAAAAAAAApBUAAAAAAAAAAAAApBUAAAAAAACkFQAAAAAAABIAAABjaGFpbnNXaXRoVG90YWxBUFI",
					"AQAAAAAAAAABAAAAnhUAAAAAAACwFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2011,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAA0WAAAAAAAADhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADRYAAAAAAAANFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2014,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAJwUAAAAAAAAnRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnBQAAAAAAACcFAAAAAAAAAAAAAAAAPC/"
				],
				[
					2015,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ0UAAAAAAAAnhQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnRQAAAAAAACdFAAAAAAAAAAAAAAAAPC/"
				],
				[
					2016,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAJ4UAAAAAAAAoBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnhQAAAAAAACeFAAAAAAAAAAAAAAAAPC/"
				],
				[
					2020,
					1,
					"insert",
					{
						"characters": "string,"
					},
					"BwAAAJ8UAAAAAAAAoBQAAAAAAAAAAAAAoBQAAAAAAAChFAAAAAAAAAAAAAChFAAAAAAAAKIUAAAAAAAAAAAAAKIUAAAAAAAAoxQAAAAAAAAAAAAAoxQAAAAAAACkFAAAAAAAAAAAAACkFAAAAAAAAKUUAAAAAAAAAAAAAKUUAAAAAAAAphQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnxQAAAAAAACfFAAAAAAAAAAAAAAAAPC/"
				],
				[
					2021,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKYUAAAAAAAApxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAphQAAAAAAACmFAAAAAAAAAAAAAAAAPC/"
				],
				[
					2022,
					1,
					"insert",
					{
						"characters": "number,"
					},
					"BwAAAKcUAAAAAAAAqBQAAAAAAAAAAAAAqBQAAAAAAACpFAAAAAAAAAAAAACpFAAAAAAAAKoUAAAAAAAAAAAAAKoUAAAAAAAAqxQAAAAAAAAAAAAAqxQAAAAAAACsFAAAAAAAAAAAAACsFAAAAAAAAK0UAAAAAAAAAAAAAK0UAAAAAAAArhQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApxQAAAAAAACnFAAAAAAAAAAAAAAAAPC/"
				],
				[
					2023,
					1,
					"insert",
					{
						"characters": " string"
					},
					"BwAAAK4UAAAAAAAArxQAAAAAAAAAAAAArxQAAAAAAACwFAAAAAAAAAAAAACwFAAAAAAAALEUAAAAAAAAAAAAALEUAAAAAAAAshQAAAAAAAAAAAAAshQAAAAAAACzFAAAAAAAAAAAAACzFAAAAAAAALQUAAAAAAAAAAAAALQUAAAAAAAAtRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArhQAAAAAAACuFAAAAAAAAAAAAAAAAPC/"
				],
				[
					2028,
					1,
					"left_delete",
					null,
					"AQAAALYUAAAAAAAAthQAAAAAAAAFAAAAID0gW10",
					"AQAAAAAAAAABAAAAuxQAAAAAAAC2FAAAAAAAAAAAAAAAAPC/"
				],
				[
					2035,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAGITAAAAAAAAYxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYhMAAAAAAABiEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2040,
					1,
					"insert",
					{
						"characters": "Show"
					},
					"BQAAAAAUAAAAAAAAARQAAAAAAAAAAAAAARQAAAAAAAABFAAAAAAAAAQAAABIaWRlARQAAAAAAAACFAAAAAAAAAAAAAACFAAAAAAAAAMUAAAAAAAAAAAAAAMUAAAAAAAABBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABBQAAAAAAAAAFAAAAAAAAAAAAAAAAPC/"
				],
				[
					2049,
					1,
					"insert",
					{
						"characters": "let"
					},
					"BAAAAJEUAAAAAAAAkhQAAAAAAAAAAAAAkhQAAAAAAACSFAAAAAAAAAUAAABjb25zdJIUAAAAAAAAkxQAAAAAAAAAAAAAkxQAAAAAAACUFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkRQAAAAAAACWFAAAAAAAAAAAAAAAAPC/"
				],
				[
					2059,
					1,
					"paste",
					null,
					"AgAAADQTAAAAAAAAQxMAAAAAAAAAAAAAQxMAAAAAAABDEwAAAAAAAA8AAABzaG91bGRIaWRlQWxlcnQ",
					"AQAAAAAAAAABAAAANBMAAAAAAABDEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2064,
					1,
					"insert",
					{
						"characters": "sjow"
					},
					"BQAAACgTAAAAAAAAKRMAAAAAAAAAAAAAKRMAAAAAAAApEwAAAAAAAAkAAABoaWRlQWxlcnQpEwAAAAAAACoTAAAAAAAAAAAAACoTAAAAAAAAKxMAAAAAAAAAAAAAKxMAAAAAAAAsEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKBMAAAAAAAAxEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2065,
					3,
					"left_delete",
					null,
					"AwAAACsTAAAAAAAAKxMAAAAAAAABAAAAdyoTAAAAAAAAKhMAAAAAAAABAAAAbykTAAAAAAAAKRMAAAAAAAABAAAAag",
					"AQAAAAAAAAABAAAALBMAAAAAAAAsEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2066,
					1,
					"insert",
					{
						"characters": "howAlert"
					},
					"CAAAACkTAAAAAAAAKhMAAAAAAAAAAAAAKhMAAAAAAAArEwAAAAAAAAAAAAArEwAAAAAAACwTAAAAAAAAAAAAACwTAAAAAAAALRMAAAAAAAAAAAAALRMAAAAAAAAuEwAAAAAAAAAAAAAuEwAAAAAAAC8TAAAAAAAAAAAAAC8TAAAAAAAAMBMAAAAAAAAAAAAAMBMAAAAAAAAxEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKRMAAAAAAAApEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2078,
					1,
					"paste",
					null,
					"AgAAAGMTAAAAAAAAbBMAAAAAAAAAAAAAbBMAAAAAAABsEwAAAAAAAAkAAABoaWRlQWxlcnQ",
					"AQAAAAAAAAABAAAAYxMAAAAAAABsEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2079,
					8,
					"left_delete",
					null,
					"CAAAAGsTAAAAAAAAaxMAAAAAAAABAAAAdGoTAAAAAAAAahMAAAAAAAABAAAAcmkTAAAAAAAAaRMAAAAAAAABAAAAZWgTAAAAAAAAaBMAAAAAAAABAAAAbGcTAAAAAAAAZxMAAAAAAAABAAAAQWYTAAAAAAAAZhMAAAAAAAABAAAAd2UTAAAAAAAAZRMAAAAAAAABAAAAb2QTAAAAAAAAZBMAAAAAAAABAAAAaA",
					"AQAAAAAAAAABAAAAbBMAAAAAAABsEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2080,
					2,
					"left_delete",
					null,
					"AgAAAGMTAAAAAAAAYxMAAAAAAAABAAAAc2ITAAAAAAAAYhMAAAAAAAABAAAAIQ",
					"AQAAAAAAAAABAAAAZBMAAAAAAABkEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2081,
					1,
					"paste",
					null,
					"AQAAAGITAAAAAAAAaxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYhMAAAAAAABiEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2089,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAALQUAAAAAAAAtRQAAAAAAAAAAAAAtRQAAAAAAAC2FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtBQAAAAAAAC0FAAAAAAAAAAAAAAAAPC/"
				],
				[
					2090,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALYUAAAAAAAAtxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAthQAAAAAAAC2FAAAAAAAAAAAAAAAAPC/"
				],
				[
					2091,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAALcUAAAAAAAAuRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtxQAAAAAAAC3FAAAAAAAAAAAAAAAAPC/"
				],
				[
					2097,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BgAAAJAUAAAAAAAAkRQAAAAAAAAAAAAAkRQAAAAAAACRFAAAAAAAAAMAAABsZXSRFAAAAAAAAJIUAAAAAAAAAAAAAJIUAAAAAAAAkxQAAAAAAAAAAAAAkxQAAAAAAACUFAAAAAAAAAAAAACUFAAAAAAAAJUUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkBQAAAAAAACTFAAAAAAAAAAAAAAAAPC/"
				],
				[
					2102,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAALYUAAAAAAAAuBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAthQAAAAAAAC2FAAAAAAAAAAAAAAAAPC/"
				],
				[
					2106,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAMETAAAAAAAAwhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwRMAAAAAAADBEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2107,
					1,
					"insert",
					{
						"characters": " ap"
					},
					"AwAAAMITAAAAAAAAwxMAAAAAAAAAAAAAwxMAAAAAAADEEwAAAAAAAAAAAADEEwAAAAAAAMUTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwhMAAAAAAADCEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2108,
					2,
					"left_delete",
					null,
					"AgAAAMQTAAAAAAAAxBMAAAAAAAABAAAAcMMTAAAAAAAAwxMAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAxRMAAAAAAADFEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2109,
					1,
					"insert",
					{
						"characters": "APR"
					},
					"AwAAAMMTAAAAAAAAxBMAAAAAAAAAAAAAxBMAAAAAAADFEwAAAAAAAAAAAADFEwAAAAAAAMYTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwxMAAAAAAADDEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2110,
					1,
					"insert",
					{
						"characters": " is"
					},
					"AwAAAMYTAAAAAAAAxxMAAAAAAAAAAAAAxxMAAAAAAADIEwAAAAAAAAAAAADIEwAAAAAAAMkTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxhMAAAAAAADGEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2111,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAMkTAAAAAAAAyhMAAAAAAAAAAAAAyhMAAAAAAADLEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyRMAAAAAAADJEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2112,
					1,
					"insert",
					{
						"characters": " or"
					},
					"AwAAAMsTAAAAAAAAzBMAAAAAAAAAAAAAzBMAAAAAAADNEwAAAAAAAAAAAADNEwAAAAAAAM4TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyxMAAAAAAADLEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2113,
					1,
					"insert",
					{
						"characters": " undefi"
					},
					"BwAAAM4TAAAAAAAAzxMAAAAAAAAAAAAAzxMAAAAAAADQEwAAAAAAAAAAAADQEwAAAAAAANETAAAAAAAAAAAAANETAAAAAAAA0hMAAAAAAAAAAAAA0hMAAAAAAADTEwAAAAAAAAAAAADTEwAAAAAAANQTAAAAAAAAAAAAANQTAAAAAAAA1RMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzhMAAAAAAADOEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2114,
					1,
					"insert",
					{
						"characters": "ned,"
					},
					"BAAAANUTAAAAAAAA1hMAAAAAAAAAAAAA1hMAAAAAAADXEwAAAAAAAAAAAADXEwAAAAAAANgTAAAAAAAAAAAAANgTAAAAAAAA2RMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1RMAAAAAAADVEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2119,
					2,
					"left_delete",
					null,
					"AgAAAGQSAAAAAAAAZBIAAAAAAABbAAAAICAvLyBnZXQgYSBib29sZWFuIGZsYWcgdG8gZGV0ZXJtaW5lIGlmIHRoZSBjdXJyZW50IG5ldHdvcmsgZG9lcyBub3QgaGF2ZSB0aGUgaGlnaGVzdCB5aWVsZGMSAAAAAAAAYxIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAvxIAAAAAAABkEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2122,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAK0SAAAAAAAArhIAAAAAAAAAAAAArhIAAAAAAACwEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArRIAAAAAAACtEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2129,
					1,
					"insert",
					{
						"characters": "\n\nr"
					},
					"BwAAAIAVAAAAAAAAgRUAAAAAAAAAAAAAgRUAAAAAAACHFQAAAAAAAAAAAACuEgAAAAAAAK4SAAAAAAAAAgAAACAghRUAAAAAAACGFQAAAAAAAAAAAACGFQAAAAAAAIwVAAAAAAAAAAAAAH8VAAAAAAAAfxUAAAAAAAAGAAAAICAgICAghhUAAAAAAACHFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgBUAAAAAAACAFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2130,
					1,
					"insert",
					{
						"characters": "eturn"
					},
					"BQAAAIcVAAAAAAAAiBUAAAAAAAAAAAAAiBUAAAAAAACJFQAAAAAAAAAAAACJFQAAAAAAAIoVAAAAAAAAAAAAAIoVAAAAAAAAixUAAAAAAAAAAAAAixUAAAAAAACMFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhxUAAAAAAACHFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2131,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIwVAAAAAAAAjRUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjBUAAAAAAACMFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2132,
					7,
					"left_delete",
					null,
					"BwAAAIwVAAAAAAAAjBUAAAAAAAABAAAAIIsVAAAAAAAAixUAAAAAAAABAAAAbooVAAAAAAAAihUAAAAAAAABAAAAcokVAAAAAAAAiRUAAAAAAAABAAAAdYgVAAAAAAAAiBUAAAAAAAABAAAAdIcVAAAAAAAAhxUAAAAAAAABAAAAZYYVAAAAAAAAhhUAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAjRUAAAAAAACNFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2133,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAIYVAAAAAAAAhxUAAAAAAAAAAAAAhxUAAAAAAACIFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhhUAAAAAAACGFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2134,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIgVAAAAAAAAiRUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiBUAAAAAAACIFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2135,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIkVAAAAAAAAixUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiRUAAAAAAACJFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2141,
					1,
					"paste",
					null,
					"AQAAAIoVAAAAAAAAohUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAihUAAAAAAACKFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2144,
					1,
					"left_delete",
					null,
					"AQAAAJ8VAAAAAAAAnxUAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAoBUAAAAAAACgFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2145,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAJ8VAAAAAAAAoBUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnxUAAAAAAACfFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2150,
					1,
					"insert",
					{
						"characters": "typeof"
					},
					"BgAAAIoVAAAAAAAAixUAAAAAAAAAAAAAixUAAAAAAACMFQAAAAAAAAAAAACMFQAAAAAAAI0VAAAAAAAAAAAAAI0VAAAAAAAAjhUAAAAAAAAAAAAAjhUAAAAAAACPFQAAAAAAAAAAAACPFQAAAAAAAJAVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAihUAAAAAAACKFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2151,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJAVAAAAAAAAkRUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkBUAAAAAAACQFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2154,
					1,
					"insert",
					{
						"characters": "==="
					},
					"AwAAAKkVAAAAAAAAqhUAAAAAAAAAAAAAqhUAAAAAAACrFQAAAAAAAAAAAACrFQAAAAAAAKwVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqRUAAAAAAACpFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2155,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKwVAAAAAAAArRUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArBUAAAAAAACsFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2156,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAK0VAAAAAAAArxUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArRUAAAAAAACtFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2157,
					1,
					"insert",
					{
						"characters": "undefined"
					},
					"CQAAAK4VAAAAAAAArxUAAAAAAAAAAAAArxUAAAAAAACwFQAAAAAAAAAAAACwFQAAAAAAALEVAAAAAAAAAAAAALEVAAAAAAAAshUAAAAAAAAAAAAAshUAAAAAAACzFQAAAAAAAAAAAACzFQAAAAAAALQVAAAAAAAAAAAAALQVAAAAAAAAtRUAAAAAAAAAAAAAtRUAAAAAAAC2FQAAAAAAAAAAAAC2FQAAAAAAALcVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArhUAAAAAAACuFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2158,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALcVAAAAAAAAuBUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtxUAAAAAAAC3FQAAAAAAAAAAAAAAAPC/"
				],
				[
					2159,
					1,
					"left_delete",
					null,
					"AQAAALcVAAAAAAAAtxUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAuBUAAAAAAAC4FQAAAAAAAAAAAAAAAPC/"
				],
				[
					2161,
					1,
					"insert",
					{
						"characters": " ||"
					},
					"AwAAALgVAAAAAAAAuRUAAAAAAAAAAAAAuRUAAAAAAAC6FQAAAAAAAAAAAAC6FQAAAAAAALsVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuBUAAAAAAAC4FQAAAAAAAAAAAAAAAPC/"
				],
				[
					2162,
					1,
					"insert",
					{
						"characters": " chains"
					},
					"BwAAALsVAAAAAAAAvBUAAAAAAAAAAAAAvBUAAAAAAAC9FQAAAAAAAAAAAAC9FQAAAAAAAL4VAAAAAAAAAAAAAL4VAAAAAAAAvxUAAAAAAAAAAAAAvxUAAAAAAADAFQAAAAAAAAAAAADAFQAAAAAAAMEVAAAAAAAAAAAAAMEVAAAAAAAAwhUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuxUAAAAAAAC7FQAAAAAAAAAAAAAAAPC/"
				],
				[
					2164,
					1,
					"insert_completion",
					{
						"completion": "chainsSortedByAPR",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "chainsSortedByAPR"
					},
					"AgAAALwVAAAAAAAAvBUAAAAAAAAGAAAAY2hhaW5zvBUAAAAAAADNFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwhUAAAAAAADCFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2165,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAM0VAAAAAAAAzxUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzRUAAAAAAADNFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2166,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAM4VAAAAAAAAzxUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzhUAAAAAAADOFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2168,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAANAVAAAAAAAA0hUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0BUAAAAAAADQFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2169,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAANEVAAAAAAAA0hUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0RUAAAAAAADRFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2171,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANMVAAAAAAAA1BUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0xUAAAAAAADTFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2172,
					1,
					"insert",
					{
						"characters": "==="
					},
					"AwAAANQVAAAAAAAA1RUAAAAAAAAAAAAA1RUAAAAAAADWFQAAAAAAAAAAAADWFQAAAAAAANcVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1BUAAAAAAADUFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2173,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAANcVAAAAAAAA2BUAAAAAAAAAAAAA2BUAAAAAAADZFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1xUAAAAAAADXFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2178,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANoVAAAAAAAA2xUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2hUAAAAAAADaFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2179,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAANsVAAAAAAAA3RUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2xUAAAAAAADbFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2180,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAANwVAAAAAAAA3RUAAAAAAAAAAAAA3RUAAAAAAADjFQAAAAAAAAAAAADjFQAAAAAAAOQVAAAAAAAAAAAAAOQVAAAAAAAA6hUAAAAAAAAAAAAA3RUAAAAAAADdFQAAAAAAAAYAAAAgICAgICDdFQAAAAAAAOUVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3BUAAAAAAADcFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2181,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAOUVAAAAAAAA5hUAAAAAAAAAAAAA5hUAAAAAAADnFQAAAAAAAAAAAADnFQAAAAAAAOgVAAAAAAAAAAAAAOgVAAAAAAAA6RUAAAAAAAAAAAAA6RUAAAAAAADqFQAAAAAAAAAAAADqFQAAAAAAAOsVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5RUAAAAAAADlFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2182,
					1,
					"insert",
					{
						"characters": " false"
					},
					"BgAAAOsVAAAAAAAA7BUAAAAAAAAAAAAA7BUAAAAAAADtFQAAAAAAAAAAAADtFQAAAAAAAO4VAAAAAAAAAAAAAO4VAAAAAAAA7xUAAAAAAAAAAAAA7xUAAAAAAADwFQAAAAAAAAAAAADwFQAAAAAAAPEVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6xUAAAAAAADrFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2185,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAH8VAAAAAAAAgBUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfxUAAAAAAAB/FQAAAAAAAAAAAAAAAPC/"
				],
				[
					2186,
					1,
					"reindent",
					null,
					"AQAAAIAVAAAAAAAAhhUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgBUAAAAAAACAFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2187,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAIYVAAAAAAAAhxUAAAAAAAAAAAAAhxUAAAAAAACIFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhhUAAAAAAACGFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2188,
					1,
					"insert",
					{
						"characters": " return"
					},
					"BwAAAIgVAAAAAAAAiRUAAAAAAAAAAAAAiRUAAAAAAACKFQAAAAAAAAAAAACKFQAAAAAAAIsVAAAAAAAAAAAAAIsVAAAAAAAAjBUAAAAAAAAAAAAAjBUAAAAAAACNFQAAAAAAAAAAAACNFQAAAAAAAI4VAAAAAAAAAAAAAI4VAAAAAAAAjxUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiBUAAAAAAACIFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2189,
					1,
					"insert",
					{
						"characters": " false"
					},
					"BgAAAI8VAAAAAAAAkBUAAAAAAAAAAAAAkBUAAAAAAACRFQAAAAAAAAAAAACRFQAAAAAAAJIVAAAAAAAAAAAAAJIVAAAAAAAAkxUAAAAAAAAAAAAAkxUAAAAAAACUFQAAAAAAAAAAAACUFQAAAAAAAJUVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjxUAAAAAAACPFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2190,
					1,
					"insert",
					{
						"characters": " if"
					},
					"AwAAAJUVAAAAAAAAlhUAAAAAAAAAAAAAlhUAAAAAAACXFQAAAAAAAAAAAACXFQAAAAAAAJgVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlRUAAAAAAACVFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2191,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJgVAAAAAAAAmRUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmBUAAAAAAACYFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2192,
					1,
					"insert",
					{
						"characters": "APR"
					},
					"AwAAAJkVAAAAAAAAmhUAAAAAAAAAAAAAmhUAAAAAAACbFQAAAAAAAAAAAACbFQAAAAAAAJwVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmRUAAAAAAACZFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2193,
					1,
					"insert",
					{
						"characters": " is"
					},
					"AwAAAJwVAAAAAAAAnRUAAAAAAAAAAAAAnRUAAAAAAACeFQAAAAAAAAAAAACeFQAAAAAAAJ8VAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnBUAAAAAAACcFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2194,
					1,
					"insert",
					{
						"characters": " undefined"
					},
					"CgAAAJ8VAAAAAAAAoBUAAAAAAAAAAAAAoBUAAAAAAAChFQAAAAAAAAAAAAChFQAAAAAAAKIVAAAAAAAAAAAAAKIVAAAAAAAAoxUAAAAAAAAAAAAAoxUAAAAAAACkFQAAAAAAAAAAAACkFQAAAAAAAKUVAAAAAAAAAAAAAKUVAAAAAAAAphUAAAAAAAAAAAAAphUAAAAAAACnFQAAAAAAAAAAAACnFQAAAAAAAKgVAAAAAAAAAAAAAKgVAAAAAAAAqRUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnxUAAAAAAACfFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2195,
					1,
					"insert",
					{
						"characters": " or"
					},
					"AwAAAKkVAAAAAAAAqhUAAAAAAAAAAAAAqhUAAAAAAACrFQAAAAAAAAAAAACrFQAAAAAAAKwVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqRUAAAAAAACpFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2196,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAKwVAAAAAAAArRUAAAAAAAAAAAAArRUAAAAAAACuFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArBUAAAAAAACsFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2199,
					1,
					"insert",
					{
						"characters": "\n\n//"
					},
					"BwAAACgWAAAAAAAAKRYAAAAAAAAAAAAAKRYAAAAAAAAvFgAAAAAAAAAAAAAvFgAAAAAAADAWAAAAAAAAAAAAADAWAAAAAAAANhYAAAAAAAAAAAAAKRYAAAAAAAApFgAAAAAAAAYAAAAgICAgICAwFgAAAAAAADEWAAAAAAAAAAAAADEWAAAAAAAAMhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKBYAAAAAAAAoFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2200,
					1,
					"insert",
					{
						"characters": " return"
					},
					"BwAAADIWAAAAAAAAMxYAAAAAAAAAAAAAMxYAAAAAAAA0FgAAAAAAAAAAAAA0FgAAAAAAADUWAAAAAAAAAAAAADUWAAAAAAAANhYAAAAAAAAAAAAANhYAAAAAAAA3FgAAAAAAAAAAAAA3FgAAAAAAADgWAAAAAAAAAAAAADgWAAAAAAAAORYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMhYAAAAAAAAyFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2201,
					1,
					"insert",
					{
						"characters": " false"
					},
					"BgAAADkWAAAAAAAAOhYAAAAAAAAAAAAAOhYAAAAAAAA7FgAAAAAAAAAAAAA7FgAAAAAAADwWAAAAAAAAAAAAADwWAAAAAAAAPRYAAAAAAAAAAAAAPRYAAAAAAAA+FgAAAAAAAAAAAAA+FgAAAAAAAD8WAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAORYAAAAAAAA5FgAAAAAAAAAAAAAAAPC/"
				],
				[
					2202,
					1,
					"insert",
					{
						"characters": " if"
					},
					"AwAAAD8WAAAAAAAAQBYAAAAAAAAAAAAAQBYAAAAAAABBFgAAAAAAAAAAAABBFgAAAAAAAEIWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPxYAAAAAAAA/FgAAAAAAAAAAAAAAAPC/"
				],
				[
					2203,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAEIWAAAAAAAAQxYAAAAAAAAAAAAAQxYAAAAAAABEFgAAAAAAAAAAAABEFgAAAAAAAEUWAAAAAAAAAAAAAEUWAAAAAAAARhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQhYAAAAAAABCFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2204,
					1,
					"insert",
					{
						"characters": " user"
					},
					"BQAAAEYWAAAAAAAARxYAAAAAAAAAAAAARxYAAAAAAABIFgAAAAAAAAAAAABIFgAAAAAAAEkWAAAAAAAAAAAAAEkWAAAAAAAAShYAAAAAAAAAAAAAShYAAAAAAABLFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARhYAAAAAAABGFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2205,
					1,
					"insert",
					{
						"characters": " isn't"
					},
					"BgAAAEsWAAAAAAAATBYAAAAAAAAAAAAATBYAAAAAAABNFgAAAAAAAAAAAABNFgAAAAAAAE4WAAAAAAAAAAAAAE4WAAAAAAAATxYAAAAAAAAAAAAATxYAAAAAAABQFgAAAAAAAAAAAABQFgAAAAAAAFEWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASxYAAAAAAABLFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2206,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFEWAAAAAAAAUhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAURYAAAAAAABRFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2207,
					1,
					"insert",
					{
						"characters": "in"
					},
					"AgAAAFIWAAAAAAAAUxYAAAAAAAAAAAAAUxYAAAAAAABUFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUhYAAAAAAABSFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2208,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAFQWAAAAAAAAVRYAAAAAAAAAAAAAVRYAAAAAAABWFgAAAAAAAAAAAABWFgAAAAAAAFcWAAAAAAAAAAAAAFcWAAAAAAAAWBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVBYAAAAAAABUFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2209,
					1,
					"insert",
					{
						"characters": " pool"
					},
					"BQAAAFgWAAAAAAAAWRYAAAAAAAAAAAAAWRYAAAAAAABaFgAAAAAAAAAAAABaFgAAAAAAAFsWAAAAAAAAAAAAAFsWAAAAAAAAXBYAAAAAAAAAAAAAXBYAAAAAAABdFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWBYAAAAAAABYFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2225,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAF4WAAAAAAAAXxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXhYAAAAAAABeFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2226,
					1,
					"reindent",
					null,
					"AQAAAF8WAAAAAAAAZRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXxYAAAAAAABfFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2228,
					1,
					"reindent",
					null,
					"AQAAAF4WAAAAAAAAZBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXhYAAAAAAABeFgAAAAAAAAAAAAAAAEVA"
				],
				[
					2229,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AwAAAGQWAAAAAAAAZRYAAAAAAAAAAAAAZhYAAAAAAABmFgAAAAAAAAYAAAAgICAgICBlFgAAAAAAAGYWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZBYAAAAAAABkFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2230,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGYWAAAAAAAAZxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZhYAAAAAAABmFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2231,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGcWAAAAAAAAaRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZxYAAAAAAABnFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2232,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAGgWAAAAAAAAaRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaBYAAAAAAABoFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2233,
					1,
					"paste",
					null,
					"AQAAAGkWAAAAAAAAcxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaRYAAAAAAABpFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2235,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHQWAAAAAAAAdRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdBYAAAAAAAB0FgAAAAAAAAAAAAAAAPC/"
				],
				[
					2236,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHUWAAAAAAAAdxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdRYAAAAAAAB1FgAAAAAAAAAAAAAAAPC/"
				],
				[
					2237,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAHYWAAAAAAAAdxYAAAAAAAAAAAAAdxYAAAAAAAB9FgAAAAAAAAAAAAB9FgAAAAAAAH4WAAAAAAAAAAAAAH4WAAAAAAAAhBYAAAAAAAAAAAAAdxYAAAAAAAB3FgAAAAAAAAYAAAAgICAgICB3FgAAAAAAAH8WAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdhYAAAAAAAB2FgAAAAAAAAAAAAAAAPC/"
				],
				[
					2238,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAH8WAAAAAAAAgBYAAAAAAAAAAAAAgBYAAAAAAACBFgAAAAAAAAAAAACBFgAAAAAAAIIWAAAAAAAAAAAAAIIWAAAAAAAAgxYAAAAAAAAAAAAAgxYAAAAAAACEFgAAAAAAAAAAAACEFgAAAAAAAIUWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfxYAAAAAAAB/FgAAAAAAAAAAAAAAAPC/"
				],
				[
					2239,
					1,
					"insert",
					{
						"characters": " false"
					},
					"BgAAAIUWAAAAAAAAhhYAAAAAAAAAAAAAhhYAAAAAAACHFgAAAAAAAAAAAACHFgAAAAAAAIgWAAAAAAAAAAAAAIgWAAAAAAAAiRYAAAAAAAAAAAAAiRYAAAAAAACKFgAAAAAAAAAAAACKFgAAAAAAAIsWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhRYAAAAAAACFFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2246,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AwAAAMIWAAAAAAAAwxYAAAAAAAAAAAAAwxYAAAAAAADDFgAAAAAAAAYAAAByZXR1cm7DFgAAAAAAAMQWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwhYAAAAAAADIFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2251,
					2,
					"left_delete",
					null,
					"AgAAAKYWAAAAAAAAphYAAAAAAAABAAAAZqUWAAAAAAAApRYAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAApxYAAAAAAACnFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2252,
					1,
					"insert",
					{
						"characters": "false"
					},
					"BQAAAKUWAAAAAAAAphYAAAAAAAAAAAAAphYAAAAAAACnFgAAAAAAAAAAAACnFgAAAAAAAKgWAAAAAAAAAAAAAKgWAAAAAAAAqRYAAAAAAAAAAAAAqRYAAAAAAACqFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApRYAAAAAAAClFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2255,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPsWAAAAAAAA/BYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+xYAAAAAAAD7FgAAAAAAAAAAAAAAAPC/"
				],
				[
					2256,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPwWAAAAAAAA/hYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/BYAAAAAAAD8FgAAAAAAAAAAAAAAAPC/"
				],
				[
					2257,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAP0WAAAAAAAA/hYAAAAAAAAAAAAA/hYAAAAAAAAEFwAAAAAAAAAAAAAEFwAAAAAAAAUXAAAAAAAAAAAAAAUXAAAAAAAACxcAAAAAAAAAAAAA/hYAAAAAAAD+FgAAAAAAAAYAAAAgICAgICD+FgAAAAAAAAYXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/RYAAAAAAAD9FgAAAAAAAAAAAAAAAPC/"
				],
				[
					2258,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAAYXAAAAAAAABxcAAAAAAAAAAAAABxcAAAAAAAAIFwAAAAAAAAAAAAAIFwAAAAAAAAkXAAAAAAAAAAAAAAkXAAAAAAAAChcAAAAAAAAAAAAAChcAAAAAAAALFwAAAAAAAAAAAAALFwAAAAAAAAwXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABhcAAAAAAAAGFwAAAAAAAAAAAAAAAPC/"
				],
				[
					2259,
					1,
					"insert",
					{
						"characters": " false"
					},
					"BgAAAAwXAAAAAAAADRcAAAAAAAAAAAAADRcAAAAAAAAOFwAAAAAAAAAAAAAOFwAAAAAAAA8XAAAAAAAAAAAAAA8XAAAAAAAAEBcAAAAAAAAAAAAAEBcAAAAAAAARFwAAAAAAAAAAAAARFwAAAAAAABIXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADBcAAAAAAAAMFwAAAAAAAAAAAAAAAPC/"
				],
				[
					2262,
					1,
					"insert",
					{
						"characters": "\n\nreturn"
					},
					"CwAAAGQXAAAAAAAAZRcAAAAAAAAAAAAAZRcAAAAAAABpFwAAAAAAAAAAAABpFwAAAAAAAGoXAAAAAAAAAAAAAGoXAAAAAAAAbhcAAAAAAAAAAAAAZRcAAAAAAABlFwAAAAAAAAQAAAAgICAgahcAAAAAAABrFwAAAAAAAAAAAABrFwAAAAAAAGwXAAAAAAAAAAAAAGwXAAAAAAAAbRcAAAAAAAAAAAAAbRcAAAAAAABuFwAAAAAAAAAAAABuFwAAAAAAAG8XAAAAAAAAAAAAAG8XAAAAAAAAcBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZBcAAAAAAABkFwAAAAAAAAAAAAAAAPC/"
				],
				[
					2263,
					1,
					"insert",
					{
						"characters": " true"
					},
					"BQAAAHAXAAAAAAAAcRcAAAAAAAAAAAAAcRcAAAAAAAByFwAAAAAAAAAAAAByFwAAAAAAAHMXAAAAAAAAAAAAAHMXAAAAAAAAdBcAAAAAAAAAAAAAdBcAAAAAAAB1FwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcBcAAAAAAABwFwAAAAAAAAAAAAAAAPC/"
				],
				[
					2266,
					1,
					"insert",
					{
						"characters": "\ncnoon"
					},
					"CAAAAAsWAAAAAAAADBYAAAAAAAAAAAAADBYAAAAAAAASFgAAAAAAAAAAAAASFgAAAAAAABQWAAAAAAAAAAAAABQWAAAAAAAAFRYAAAAAAAAAAAAAFRYAAAAAAAAWFgAAAAAAAAAAAAAWFgAAAAAAABcWAAAAAAAAAAAAABcWAAAAAAAAGBYAAAAAAAAAAAAAGBYAAAAAAAAZFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACxYAAAAAAAALFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2267,
					4,
					"left_delete",
					null,
					"BAAAABgWAAAAAAAAGBYAAAAAAAABAAAAbhcWAAAAAAAAFxYAAAAAAAABAAAAbxYWAAAAAAAAFhYAAAAAAAABAAAAbxUWAAAAAAAAFRYAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAGRYAAAAAAAAZFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2268,
					1,
					"insert",
					{
						"characters": "onsole.log"
					},
					"CgAAABUWAAAAAAAAFhYAAAAAAAAAAAAAFhYAAAAAAAAXFgAAAAAAAAAAAAAXFgAAAAAAABgWAAAAAAAAAAAAABgWAAAAAAAAGRYAAAAAAAAAAAAAGRYAAAAAAAAaFgAAAAAAAAAAAAAaFgAAAAAAABsWAAAAAAAAAAAAABsWAAAAAAAAHBYAAAAAAAAAAAAAHBYAAAAAAAAdFgAAAAAAAAAAAAAdFgAAAAAAAB4WAAAAAAAAAAAAAB4WAAAAAAAAHxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFRYAAAAAAAAVFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2269,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAB8WAAAAAAAAIRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHxYAAAAAAAAfFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2270,
					1,
					"insert",
					{
						"characters": "APR"
					},
					"AwAAACAWAAAAAAAAIRYAAAAAAAAAAAAAIRYAAAAAAAAiFgAAAAAAAAAAAAAiFgAAAAAAACMWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIBYAAAAAAAAgFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2271,
					3,
					"left_delete",
					null,
					"AwAAACIWAAAAAAAAIhYAAAAAAAABAAAAUiEWAAAAAAAAIRYAAAAAAAABAAAAUCAWAAAAAAAAIBYAAAAAAAABAAAAQQ",
					"AQAAAAAAAAABAAAAIxYAAAAAAAAjFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2272,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAACAWAAAAAAAAIhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIBYAAAAAAAAgFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2273,
					1,
					"insert",
					{
						"characters": "APR"
					},
					"AwAAACEWAAAAAAAAIhYAAAAAAAAAAAAAIhYAAAAAAAAjFgAAAAAAAAAAAAAjFgAAAAAAACQWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIRYAAAAAAAAhFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2274,
					1,
					"insert",
					{
						"characters": " is"
					},
					"AwAAACQWAAAAAAAAJRYAAAAAAAAAAAAAJRYAAAAAAAAmFgAAAAAAAAAAAAAmFgAAAAAAACcWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJBYAAAAAAAAkFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2275,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAACcWAAAAAAAAKBYAAAAAAAAAAAAAKBYAAAAAAAApFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJxYAAAAAAAAnFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2276,
					1,
					"insert",
					{
						"characters": " or"
					},
					"AwAAACkWAAAAAAAAKhYAAAAAAAAAAAAAKhYAAAAAAAArFgAAAAAAAAAAAAArFgAAAAAAACwWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKRYAAAAAAAApFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2277,
					1,
					"insert",
					{
						"characters": " undefined"
					},
					"CgAAACwWAAAAAAAALRYAAAAAAAAAAAAALRYAAAAAAAAuFgAAAAAAAAAAAAAuFgAAAAAAAC8WAAAAAAAAAAAAAC8WAAAAAAAAMBYAAAAAAAAAAAAAMBYAAAAAAAAxFgAAAAAAAAAAAAAxFgAAAAAAADIWAAAAAAAAAAAAADIWAAAAAAAAMxYAAAAAAAAAAAAAMxYAAAAAAAA0FgAAAAAAAAAAAAA0FgAAAAAAADUWAAAAAAAAAAAAADUWAAAAAAAANhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALBYAAAAAAAAsFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2283,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAKMWAAAAAAAApBYAAAAAAAAAAAAApBYAAAAAAACqFgAAAAAAAAAAAACqFgAAAAAAAKwWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoxYAAAAAAACjFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2284,
					1,
					"paste",
					null,
					"AQAAAKwWAAAAAAAA0BYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArBYAAAAAAACsFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2287,
					1,
					"insert",
					{
						"characters": "User"
					},
					"BQAAALkWAAAAAAAAuhYAAAAAAAAAAAAAuhYAAAAAAAC6FgAAAAAAABUAAABBUFIgaXMgMCBvciB1bmRlZmluZWS6FgAAAAAAALsWAAAAAAAAAAAAALsWAAAAAAAAvBYAAAAAAAAAAAAAvBYAAAAAAAC9FgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzhYAAAAAAAC5FgAAAAAAAAAAAAAAAPC/"
				],
				[
					2288,
					1,
					"insert",
					{
						"characters": " isn't"
					},
					"BgAAAL0WAAAAAAAAvhYAAAAAAAAAAAAAvhYAAAAAAAC/FgAAAAAAAAAAAAC/FgAAAAAAAMAWAAAAAAAAAAAAAMAWAAAAAAAAwRYAAAAAAAAAAAAAwRYAAAAAAADCFgAAAAAAAAAAAADCFgAAAAAAAMMWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvRYAAAAAAAC9FgAAAAAAAAAAAAAAAPC/"
				],
				[
					2289,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAMMWAAAAAAAAxBYAAAAAAAAAAAAAxBYAAAAAAADFFgAAAAAAAAAAAADFFgAAAAAAAMYWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwxYAAAAAAADDFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2290,
					1,
					"insert",
					{
						"characters": " pool"
					},
					"BQAAAMYWAAAAAAAAxxYAAAAAAAAAAAAAxxYAAAAAAADIFgAAAAAAAAAAAADIFgAAAAAAAMkWAAAAAAAAAAAAAMkWAAAAAAAAyhYAAAAAAAAAAAAAyhYAAAAAAADLFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxhYAAAAAAADGFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2295,
					1,
					"insert",
					{
						"characters": "\nconsole.log"
					},
					"DgAAAFQXAAAAAAAAVRcAAAAAAAAAAAAAVRcAAAAAAABbFwAAAAAAAAAAAABbFwAAAAAAAF0XAAAAAAAAAAAAAF0XAAAAAAAAXhcAAAAAAAAAAAAAXhcAAAAAAABfFwAAAAAAAAAAAABfFwAAAAAAAGAXAAAAAAAAAAAAAGAXAAAAAAAAYRcAAAAAAAAAAAAAYRcAAAAAAABiFwAAAAAAAAAAAABiFwAAAAAAAGMXAAAAAAAAAAAAAGMXAAAAAAAAZBcAAAAAAAAAAAAAZBcAAAAAAABlFwAAAAAAAAAAAABlFwAAAAAAAGYXAAAAAAAAAAAAAGYXAAAAAAAAZxcAAAAAAAAAAAAAZxcAAAAAAABoFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVBcAAAAAAABUFwAAAAAAAAAAAAAAAPC/"
				],
				[
					2296,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGgXAAAAAAAAahcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaBcAAAAAAABoFwAAAAAAAAAAAAAAAPC/"
				],
				[
					2297,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAGkXAAAAAAAAaxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaRcAAAAAAABpFwAAAAAAAAAAAAAAAPC/"
				],
				[
					2298,
					1,
					"insert",
					{
						"characters": "Nt"
					},
					"AgAAAGoXAAAAAAAAaxcAAAAAAAAAAAAAaxcAAAAAAABsFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAahcAAAAAAABqFwAAAAAAAAAAAAAAAPC/"
				],
				[
					2299,
					1,
					"left_delete",
					null,
					"AQAAAGsXAAAAAAAAaxcAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAbBcAAAAAAABsFwAAAAAAAAAAAAAAAPC/"
				],
				[
					2300,
					1,
					"insert",
					{
						"characters": "etwork"
					},
					"BgAAAGsXAAAAAAAAbBcAAAAAAAAAAAAAbBcAAAAAAABtFwAAAAAAAAAAAABtFwAAAAAAAG4XAAAAAAAAAAAAAG4XAAAAAAAAbxcAAAAAAAAAAAAAbxcAAAAAAABwFwAAAAAAAAAAAABwFwAAAAAAAHEXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaxcAAAAAAABrFwAAAAAAAAAAAAAAAPC/"
				],
				[
					2301,
					1,
					"insert",
					{
						"characters": " has"
					},
					"BAAAAHEXAAAAAAAAchcAAAAAAAAAAAAAchcAAAAAAABzFwAAAAAAAAAAAABzFwAAAAAAAHQXAAAAAAAAAAAAAHQXAAAAAAAAdRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcRcAAAAAAABxFwAAAAAAAAAAAAAAAPC/"
				],
				[
					2302,
					1,
					"insert",
					{
						"characters": " highest"
					},
					"CAAAAHUXAAAAAAAAdhcAAAAAAAAAAAAAdhcAAAAAAAB3FwAAAAAAAAAAAAB3FwAAAAAAAHgXAAAAAAAAAAAAAHgXAAAAAAAAeRcAAAAAAAAAAAAAeRcAAAAAAAB6FwAAAAAAAAAAAAB6FwAAAAAAAHsXAAAAAAAAAAAAAHsXAAAAAAAAfBcAAAAAAAAAAAAAfBcAAAAAAAB9FwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdRcAAAAAAAB1FwAAAAAAAAAAAAAAAPC/"
				],
				[
					2303,
					1,
					"insert",
					{
						"characters": " APR"
					},
					"BAAAAH0XAAAAAAAAfhcAAAAAAAAAAAAAfhcAAAAAAAB/FwAAAAAAAAAAAAB/FwAAAAAAAIAXAAAAAAAAAAAAAIAXAAAAAAAAgRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfRcAAAAAAAB9FwAAAAAAAAAAAAAAAPC/"
				],
				[
					2313,
					1,
					"paste",
					null,
					"AgAAACAXAAAAAAAAMRcAAAAAAAAAAAAAMRcAAAAAAAAxFwAAAAAAABEAAABjaGFpbnNTb3J0ZWRCeUFQUg",
					"AQAAAAAAAAABAAAAIBcAAAAAAAAxFwAAAAAAAAAAAAAAAPC/"
				],
				[
					2323,
					1,
					"insert",
					{
						"characters": "\n\nconsole.log"
					},
					"EAAAACQVAAAAAAAAJRUAAAAAAAAAAAAAJRUAAAAAAAArFQAAAAAAAAAAAAArFQAAAAAAACwVAAAAAAAAAAAAACwVAAAAAAAAMhUAAAAAAAAAAAAAJRUAAAAAAAAlFQAAAAAAAAYAAAAgICAgICAsFQAAAAAAAC0VAAAAAAAAAAAAAC0VAAAAAAAALhUAAAAAAAAAAAAALhUAAAAAAAAvFQAAAAAAAAAAAAAvFQAAAAAAADAVAAAAAAAAAAAAADAVAAAAAAAAMRUAAAAAAAAAAAAAMRUAAAAAAAAyFQAAAAAAAAAAAAAyFQAAAAAAADMVAAAAAAAAAAAAADMVAAAAAAAANBUAAAAAAAAAAAAANBUAAAAAAAA1FQAAAAAAAAAAAAA1FQAAAAAAADYVAAAAAAAAAAAAADYVAAAAAAAANxUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJBUAAAAAAAAkFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2324,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADcVAAAAAAAAORUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANxUAAAAAAAA3FQAAAAAAAAAAAAAAAPC/"
				],
				[
					2325,
					1,
					"insert",
					{
						"characters": "chains"
					},
					"BgAAADgVAAAAAAAAORUAAAAAAAAAAAAAORUAAAAAAAA6FQAAAAAAAAAAAAA6FQAAAAAAADsVAAAAAAAAAAAAADsVAAAAAAAAPBUAAAAAAAAAAAAAPBUAAAAAAAA9FQAAAAAAAAAAAAA9FQAAAAAAAD4VAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOBUAAAAAAAA4FQAAAAAAAAAAAAAAAPC/"
				],
				[
					2341,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOgWAAAAAAAA6RYAAAAAAAAAAAAA6RYAAAAAAADxFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6BYAAAAAAADoFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2342,
					1,
					"paste",
					null,
					"AQAAAPEWAAAAAAAAChcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8RYAAAAAAADxFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2345,
					1,
					"insert",
					{
						"characters": "console.lg"
					},
					"CgAAAPEWAAAAAAAA8hYAAAAAAAAAAAAA8hYAAAAAAADzFgAAAAAAAAAAAADzFgAAAAAAAPQWAAAAAAAAAAAAAPQWAAAAAAAA9RYAAAAAAAAAAAAA9RYAAAAAAAD2FgAAAAAAAAAAAAD2FgAAAAAAAPcWAAAAAAAAAAAAAPcWAAAAAAAA+BYAAAAAAAAAAAAA+BYAAAAAAAD5FgAAAAAAAAAAAAD5FgAAAAAAAPoWAAAAAAAAAAAAAPoWAAAAAAAA+xYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8RYAAAAAAADxFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2346,
					1,
					"left_delete",
					null,
					"AQAAAPoWAAAAAAAA+hYAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAA+xYAAAAAAAD7FgAAAAAAAAAAAAAAAPC/"
				],
				[
					2347,
					1,
					"insert",
					{
						"characters": "og("
					},
					"AwAAAPoWAAAAAAAA+xYAAAAAAAAAAAAA+xYAAAAAAAD8FgAAAAAAAAAAAAD8FgAAAAAAAP0WAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+hYAAAAAAAD6FgAAAAAAAAAAAAAAAPC/"
				],
				[
					2350,
					1,
					"left_delete",
					null,
					"AQAAAAkXAAAAAAAACRcAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAChcAAAAAAAAKFwAAAAAAAAAAAAAAAPC/"
				],
				[
					2351,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAkXAAAAAAAAChcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACRcAAAAAAAAJFwAAAAAAAAAAAAAAAPC/"
				],
				[
					2352,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAoXAAAAAAAACxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAChcAAAAAAAAKFwAAAAAAAAAAAAAAAPC/"
				],
				[
					2355,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAABcXAAAAAAAAGBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFxcAAAAAAAAXFwAAAAAAAAAAAAAAAPC/"
				],
				[
					2365,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACwTAAAAAAAALRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALBMAAAAAAAAsEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2366,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAC0TAAAAAAAALhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALRMAAAAAAAAtEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2367,
					1,
					"paste",
					null,
					"AQAAAC4TAAAAAAAAOBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALhMAAAAAAAAuEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2370,
					2,
					"left_delete",
					null,
					"AgAAADEVAAAAAAAAMRUAAAAAAAAaAAAACiAgICAgIGNvbnNvbGUubG9nKGNoYWlucykwFQAAAAAAADAVAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAASxUAAAAAAAAxFQAAAAAAAAAAAAAAAPC/"
				],
				[
					2373,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAALgWAAAAAAAAuRYAAAAAAAAAAAAAuRYAAAAAAAC6FgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuBYAAAAAAAC4FgAAAAAAAAAAAAAAAPC/"
				],
				[
					2374,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALoWAAAAAAAAuxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuhYAAAAAAAC6FgAAAAAAAAAAAAAAAPC/"
				],
				[
					2377,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJwXAAAAAAAAnRcAAAAAAAAAAAAAnRcAAAAAAACeFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnBcAAAAAAACcFwAAAAAAAAAAAAAAAPC/"
				],
				[
					2378,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ4XAAAAAAAAnxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnhcAAAAAAACeFwAAAAAAAAAAAAAAAPC/"
				],
				[
					2381,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAACAWAAAAAAAAIRYAAAAAAAAAAAAAIRYAAAAAAAAiFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIBYAAAAAAAAgFgAAAAAAAAAAAAAAAPC/"
				],
				[
					2382,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACIWAAAAAAAAIxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIhYAAAAAAAAiFgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "packages/frontend/src/components/Rebalancer/Modal.tsx",
			"settings":
			{
				"buffer_size": 10107,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					392,
					1,
					"left_delete",
					null,
					"AQAAAKwPAAAAAAAArA8AAAAAAAACAAAAICg",
					"AQAAAAAAAAABAAAArg8AAAAAAACsDwAAAAAAAAAAAAAAAPC/"
				],
				[
					394,
					3,
					"left_delete",
					null,
					"AwAAAK8PAAAAAAAArw8AAAAAAAACAAAAICCtDwAAAAAAAK0PAAAAAAAAAgAAACAgrA8AAAAAAACsDwAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAsQ8AAAAAAACxDwAAAAAAAAAAAAAAADxA"
				],
				[
					397,
					1,
					"left_delete",
					null,
					"AQAAAHAQAAAAAAAAcBAAAAAAAAAEAAAACiAgKQ",
					"AQAAAAAAAAABAAAAdBAAAAAAAABwEAAAAAAAAAAAAAAAAPC/"
				],
				[
					402,
					2,
					"left_delete",
					null,
					"AgAAAHUQAAAAAAAAdRAAAAAAAAAGAAAAcmV0dXJudBAAAAAAAAB0EAAAAAAAAAEAAAAg",
					"AQAAAAAAAAABAAAAdRAAAAAAAAB7EAAAAAAAAAAAAAAAAPC/"
				],
				[
					409,
					1,
					"insert",
					{
						"characters": "\n\t<br"
					},
					"BgAAAMQPAAAAAAAAxQ8AAAAAAAAAAAAAxQ8AAAAAAADHDwAAAAAAAAAAAADHDwAAAAAAAMkPAAAAAAAAAAAAAMkPAAAAAAAAyg8AAAAAAAAAAAAAyg8AAAAAAADLDwAAAAAAAAAAAADLDwAAAAAAAMwPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxA8AAAAAAADEDwAAAAAAAAAAAAAAAPC/"
				],
				[
					410,
					1,
					"insert",
					{
						"characters": " />"
					},
					"AwAAAMwPAAAAAAAAzQ8AAAAAAAAAAAAAzQ8AAAAAAADODwAAAAAAAAAAAADODwAAAAAAAM8PAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzA8AAAAAAADMDwAAAAAAAAAAAAAAAPC/"
				],
				[
					413,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAMkPAAAAAAAAyw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQ8AAAAAAADJDwAAAAAAAAAAAAAAAPC/"
				],
				[
					419,
					1,
					"left_delete",
					null,
					"AQAAAMFVAAAAAAAAwVUAAAAAAAAPAAAACiAgICAgICAgPGJyIC8+",
					"AQAAAAAAAAABAAAA0FUAAAAAAADBVQAAAAAAAAAAAAAAAPC/"
				],
				[
					430,
					1,
					"left_delete",
					null,
					"AQAAAMQPAAAAAAAAxA8AAAAAAAANAAAACiAgICAgIDxiciAvPg",
					"AQAAAAAAAAABAAAA0Q8AAAAAAADEDwAAAAAAAAAAAAAAAPC/"
				],
				[
					438,
					1,
					"insert",
					{
						"characters": " mt={"
					},
					"BQAAAMMPAAAAAAAAxA8AAAAAAAAAAAAAxA8AAAAAAADFDwAAAAAAAAAAAADFDwAAAAAAAMYPAAAAAAAAAAAAAMYPAAAAAAAAxw8AAAAAAAAAAAAAxw8AAAAAAADIDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAww8AAAAAAADDDwAAAAAAAAAAAAAAAPC/"
				],
				[
					439,
					1,
					"insert",
					{
						"characters": "2}"
					},
					"AgAAAMgPAAAAAAAAyQ8AAAAAAAAAAAAAyQ8AAAAAAADKDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyA8AAAAAAADIDwAAAAAAAAAAAAAAAPC/"
				],
				[
					441,
					1,
					"left_delete",
					null,
					"AQAAAMgPAAAAAAAAyA8AAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAAyQ8AAAAAAADJDwAAAAAAAAAAAAAAAPC/"
				],
				[
					442,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAAMgPAAAAAAAAyQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyA8AAAAAAADIDwAAAAAAAAAAAAAAAPC/"
				],
				[
					493,
					1,
					"left_delete",
					null,
					"AQAAAL8FAAAAAAAAvwUAAAAAAAAuAAAACmltcG9ydCB7IFRleHQgfSBmcm9tICdzcmMvY29tcG9uZW50cy91aS9UZXh0Jw",
					"AQAAAAAAAAABAAAA7QUAAAAAAAC/BQAAAAAAAAAAAAAAAPC/"
				],
				[
					501,
					4,
					"left_delete",
					null,
					"BAAAAB8GAAAAAAAAHwYAAAAAAADHCAAAdHlwZSBOZXR3b3JrQVBSVHVwbGVUeXBlID0gW3N0cmluZywgbnVtYmVyLCBzdHJpbmddCgppbnRlcmZhY2UgTmV0d29ya1NlbGVjdGlvblNlY3Rpb25Qcm9wcyB7CiAgbmV0d29ya3NXaXRoWWllbGRzOiBOZXR3b3JrQVBSVHVwbGVUeXBlW10sCiAgY2hhaW5TbHVnOiBzdHJpbmcsCiAgZGVzdGluYXRpb25OZXR3b3JrSWQ6IG51bWJlciwKICBzZXREZXN0aW5hdGlvbk5ldHdvcms6IChjaGFpblNsdWc6IHN0cmluZykgPT4gdm9pZAogIGdvVG9OZXh0U2VjdGlvbjogKCkgPT4gdm9pZAp9CgpmdW5jdGlvbiBOZXR3b3JrU2VsZWN0aW9uU2VjdGlvbihwcm9wczogTmV0d29ya1NlbGVjdGlvblNlY3Rpb25Qcm9wcykgewogIGNvbnN0IG5ldHdvcmtzID0gcHJvcHMubmV0d29ya3NXaXRoWWllbGRzCiAgY29uc3QgY2hhaW5TbHVnID0gcHJvcHMuY2hhaW5TbHVnCiAgY29uc3QgZGVzdGluYXRpb25OZXR3b3JrSWQgPSBwcm9wcy5kZXN0aW5hdGlvbk5ldHdvcmtJZAogIGNvbnN0IGdvVG9OZXh0U2VjdGlvbiA9IHByb3BzLmdvVG9OZXh0U2VjdGlvbgoKICAvLyBleGNsdWRlIHRoZSBzb3VyY2UgbmV0d29yawogIGNvbnN0IHBvdGVudGlhbERlc3RpbmF0aW9uTmV0d29ya09iamVjdHMgPSBuZXR3b3Jrcy5yZWR1Y2UoKGFjYzogTmV0d29ya1tdLCBuZXR3b3JrKSA9PiB7CiAgICBjb25zdCBmb3VuZE5ldHdvcmsgPSBmaW5kTmV0d29ya0J5U2x1ZyhuZXR3b3JrWzBdKQogICAgaWYgKGZvdW5kTmV0d29yayAmJiBuZXR3b3JrWzBdICE9PSBjaGFpblNsdWcpIHsKICAgICAgYWNjLnB1c2goZm91bmROZXR3b3JrKQogICAgfQogICAgcmV0dXJuIGFjYwogIH0sIFtdKQoKICByZXR1cm4gKAogICAgPD4KICAgICAgPFR5cG9ncmFwaHkgdmFyaWFudD0iaDQiIGNvbG9yPSJ0ZXh0UHJpbWFyeSI+U2VsZWN0IGRlc3RpbmF0aW9uPC9UeXBvZ3JhcGh5PgogICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PSJzdWJ0aXRsZTIiIGNvbG9yPSJ0ZXh0U2Vjb25kYXJ5Ij5DaG9vc2UgdGhlIG5ldHdvcmsgdG8gdHJhbnNmZXIgeW91ciBwb3NpdGlvbiB0bzwvVHlwb2dyYXBoeT4KICAgICAgPGJyIC8+CiAgICAgIDxiciAvPgogICAgICAKICAgICAgPEdyaWQgY29udGFpbmVyIGFsaWduSXRlbXM9ImNlbnRlciI+CiAgICAgICAgPEdyaWQgaXRlbSB4cz4KICAgICAgICAgIDxCb3ggZGlzcGxheT0iZmxleCIgYWxpZ25JdGVtcz0iY2VudGVyIiBqdXN0aWZ5Q29udGVudD0iY2VudGVyIj4KICAgICAgICAgICAgPFJhaXNlZE5ldHdvcmtTZWxlY3RvciAKICAgICAgICAgICAgICBzZWxlY3RlZE5ldHdvcms9e2ZpbmROZXR3b3JrQnlTbHVnKG5ldHdvcmtJZFRvU2x1ZyhkZXN0aW5hdGlvbk5ldHdvcmtJZCkpfSAKICAgICAgICAgICAgICBvblNlbGVjdD17ZSA9PiBwcm9wcy5zZXREZXN0aW5hdGlvbk5ldHdvcmsoZS50YXJnZXQudmFsdWUpfSAKICAgICAgICAgICAgICBhdmFpbGFibGVOZXR3b3Jrcz17cG90ZW50aWFsRGVzdGluYXRpb25OZXR3b3JrT2JqZWN0c30gCiAgICAgICAgICAgICAgLz4KICAgICAgICAgIDwvQm94PgogICAgICAgIDwvR3JpZD4KICAgICAgICA8RGl2aWRlciBvcmllbnRhdGlvbj0idmVydGljYWwiIGZsZXhJdGVtIC8+CiAgICAgICAgPEdyaWQgaXRlbSB4cz4KICAgICAgICAgIDxCb3ggZGlzcGxheT0iZmxleCIgZmxleERpcmVjdGlvbj0iY29sdW1uIiBhbGlnbkl0ZW1zPSJjZW50ZXIiPgogICAgICAgICAgICB7bmV0d29ya3MubWFwKCh0dXBsZTogTmV0d29ya0FQUlR1cGxlVHlwZSwgaW5kZXg6IG51bWJlcikgPT4gKAogICAgICAgICAgICAgICAgPEJveCBrZXk9e2luZGV4fSBteT17MX0+CiAgICAgICAgICAgICAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9ImJvZHkxIiBjb2xvcj0idGV4dFNlY29uZGFyeSIgYWxpZ249InJpZ2h0Ij57dHVwbGVbMF19PC9UeXBvZ3JhcGh5PgogICAgICAgICAgICAgICAgICA8VHlwb2dyYXBoeSB2YXJpYW50PSJoMyI+e3R1cGxlWzJdfTwvVHlwb2dyYXBoeT4KICAgICAgICAgICAgICAgIDwvQm94PgogICAgICAgICAgICApKX0KICAgICAgICAgIDwvQm94PgogICAgICAgIDwvR3JpZD4KICAgICAgPC9HcmlkPgoKICAgICAgPGJyIC8+CiAgICAgIDxiciAvPgogICAgICA8Qm94IHRleHRBbGlnbj0iY2VudGVyIj4KICAgICAgICA8QnV0dG9uIGZ1bGxXaWR0aCBsYXJnZSBoaWdobGlnaHRlZCBvbkNsaWNrPXtnb1RvTmV4dFNlY3Rpb259PlNlbGVjdCBOZXR3b3JrPC9CdXR0b24+CiAgICAgIDwvQm94PgogICAgPC8+CiAgKQp9HgYAAAAAAAAeBgAAAAAAAAEAAAAKHQYAAAAAAAAdBgAAAAAAAAEAAAAKHAYAAAAAAAAcBgAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAHwYAAAAAAADmDgAAAAAAAAAAAAAAAPC/"
				],
				[
					505,
					2,
					"left_delete",
					null,
					"AgAAAMAFAAAAAAAAwAUAAAAAAABcAAAAaW1wb3J0IHsgUmFpc2VkTmV0d29ya1NlbGVjdG9yIH0gZnJvbSAnc3JjL2NvbXBvbmVudHMvTmV0d29ya1NlbGVjdG9yL1JhaXNlZE5ldHdvcmtTZWxlY3Rvcie/BQAAAAAAAL8FAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAHAYAAAAAAADABQAAAAAAAAAAAAAAAPC/"
				],
				[
					506,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAL8FAAAAAAAAwAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwUAAAAAAAC/BQAAAAAAAAAAAAAAAPC/"
				],
				[
					512,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGMFAAAAAAAAZAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwUAAAAAAABjBQAAAAAAAAAAAAAAAPC/"
				],
				[
					513,
					1,
					"paste",
					null,
					"AQAAAGQFAAAAAAAAvwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAUAAAAAAABkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					517,
					1,
					"insert",
					{
						"characters": "NetworkSelec"
					},
					"DQAAAG0FAAAAAAAAbgUAAAAAAAAAAAAAbgUAAAAAAABuBQAAAAAAAA8AAABVbnN0YWtlV2l0aGRyYXduBQAAAAAAAG8FAAAAAAAAAAAAAG8FAAAAAAAAcAUAAAAAAAAAAAAAcAUAAAAAAABxBQAAAAAAAAAAAABxBQAAAAAAAHIFAAAAAAAAAAAAAHIFAAAAAAAAcwUAAAAAAAAAAAAAcwUAAAAAAAB0BQAAAAAAAAAAAAB0BQAAAAAAAHUFAAAAAAAAAAAAAHUFAAAAAAAAdgUAAAAAAAAAAAAAdgUAAAAAAAB3BQAAAAAAAAAAAAB3BQAAAAAAAHgFAAAAAAAAAAAAAHgFAAAAAAAAeQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfAUAAAAAAABtBQAAAAAAAAAAAAAAAPC/"
				],
				[
					518,
					1,
					"insert",
					{
						"characters": "tion"
					},
					"BAAAAHkFAAAAAAAAegUAAAAAAAAAAAAAegUAAAAAAAB7BQAAAAAAAAAAAAB7BQAAAAAAAHwFAAAAAAAAAAAAAHwFAAAAAAAAfQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQUAAAAAAAB5BQAAAAAAAAAAAAAAAPC/"
				],
				[
					529,
					1,
					"paste",
					null,
					"AgAAALAFAAAAAAAAwAUAAAAAAAAAAAAAwAUAAAAAAADABQAAAAAAAA8AAABVbnN0YWtlV2l0aGRyYXc",
					"AQAAAAAAAAABAAAAvwUAAAAAAACwBQAAAAAAAAAAAAAAAPC/"
				],
				[
					570,
					1,
					"left_delete",
					null,
					"AQAAAKUDAAAAAAAApQMAAAAAAAApAAAACmltcG9ydCBOZXR3b3JrIGZyb20gJ3NyYy9tb2RlbHMvTmV0d29yayc",
					"AQAAAAAAAAABAAAAzgMAAAAAAAClAwAAAAAAAAAAAAAAAPC/"
				],
				[
					581,
					1,
					"left_delete",
					null,
					"AQAAAKUCAAAAAAAApQIAAAAAAAAtAAAAaW1wb3J0IHsgZmluZE5ldHdvcmtCeVNsdWcgfSBmcm9tICdzcmMvdXRpbHMn",
					"AQAAAAAAAAABAAAA0gIAAAAAAAClAgAAAAAAAAAAAAAAAPC/"
				],
				[
					582,
					1,
					"left_delete",
					null,
					"AQAAAKQCAAAAAAAApAIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAApQIAAAAAAAClAgAAAAAAAAAAAAAAAPC/"
				],
				[
					629,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAwFAAAAAAAADQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAUAAAAAAAAMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					630,
					1,
					"paste",
					null,
					"AQAAAA0FAAAAAAAAaAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQUAAAAAAAANBQAAAAAAAAAAAAAAAPC/"
				],
				[
					635,
					2,
					"left_delete",
					null,
					"AgAAAE8FAAAAAAAATwUAAAAAAAAIAAAAU2VjdGlvbnNOBQAAAAAAAE4FAAAAAAAAAQAAAC8",
					"AQAAAAAAAAABAAAATwUAAAAAAABXBQAAAAAAAAAAAAAAAPC/"
				],
				[
					640,
					1,
					"insert",
					{
						"characters": "Footer"
					},
					"BwAAAE8FAAAAAAAAUAUAAAAAAAAAAAAAUAUAAAAAAABQBQAAAAAAAA8AAABVbnN0YWtlV2l0aGRyYXdQBQAAAAAAAFEFAAAAAAAAAAAAAFEFAAAAAAAAUgUAAAAAAAAAAAAAUgUAAAAAAABTBQAAAAAAAAAAAABTBQAAAAAAAFQFAAAAAAAAAAAAAFQFAAAAAAAAVQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATwUAAAAAAABeBQAAAAAAAAAAAAAAAPC/"
				],
				[
					645,
					1,
					"insert",
					{
						"characters": "Footer"
					},
					"BwAAABYFAAAAAAAAFwUAAAAAAAAAAAAAFwUAAAAAAAAXBQAAAAAAABYAAABVbnN0YWtlV2l0aGRyYXdTZWN0aW9uFwUAAAAAAAAYBQAAAAAAAAAAAAAYBQAAAAAAABkFAAAAAAAAAAAAABkFAAAAAAAAGgUAAAAAAAAAAAAAGgUAAAAAAAAbBQAAAAAAAAAAAAAbBQAAAAAAABwFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgUAAAAAAAAsBQAAAAAAAAAAAAAAAPC/"
				],
				[
					648,
					3,
					"left_delete",
					null,
					"AwAAAAIGAAAAAAAAAgYAAAAAAABuAQAACmZ1bmN0aW9uIFJlYmFsYW5jZU1vZGFsRm9vdGVyKHByb3BzKSB7CiAgY29uc3QgY3VycmVudFN0ZXAgPSBwcm9wcy5jdXJyZW50U3RlcAogIGNvbnN0IHRvdGFsU3RlcHMgPSBwcm9wcy50b3RhbFN0ZXBzCgogIHJldHVybiBjdXJyZW50U3RlcCAhPT0gMCAKICA/IDxCb3ggdGV4dEFsaWduPSJjZW50ZXIiIG10PXs0fT4KICAgICAgPERpdmlkZXIgLz4KICAgICAgPGJyIC8+CiAgICAgIDxUeXBvZ3JhcGh5IHZhcmlhbnQ9ImJvZHkyIiBjb21wb25lbnQ9InNwYW4iIGNvbG9yPSJzZWNvbmRhcnkiPntNYXRoLnJvdW5kKChjdXJyZW50U3RlcCAvIHRvdGFsU3RlcHMpICogMTAwKX0lPC9UeXBvZ3JhcGh5PgogICAgPC9Cb3g+CiAgOiA8PjwvPgp9AQYAAAAAAAABBgAAAAAAAAEAAAAKAAYAAAAAAAAABgAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAcAcAAAAAAAACBgAAAAAAAAAAAAAAAPC/"
				],
				[
					658,
					1,
					"paste",
					null,
					"AgAAAEJLAAAAAAAASEsAAAAAAAAAAAAASEsAAAAAAABISwAAAAAAABQAAABSZWJhbGFuY2VNb2RhbEZvb3Rlcg",
					"AQAAAAAAAAABAAAAQksAAAAAAABWSwAAAAAAAAAAAAAAAPC/"
				],
				[
					679,
					3,
					"left_delete",
					null,
					"AwAAAGUEAAAAAAAAZQQAAAAAAAAHAAAARGl2aWRlcmQEAAAAAAAAZAQAAAAAAAABAAAAIGMEAAAAAAAAYwQAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAZQQAAAAAAABsBAAAAAAAAAAAAAAAAPC/"
				],
				[
					750,
					1,
					"insert",
					{
						"characters": "\nimport"
					},
					"BwAAAPcFAAAAAAAA+AUAAAAAAAAAAAAA+AUAAAAAAAD5BQAAAAAAAAAAAAD5BQAAAAAAAPoFAAAAAAAAAAAAAPoFAAAAAAAA+wUAAAAAAAAAAAAA+wUAAAAAAAD8BQAAAAAAAAAAAAD8BQAAAAAAAP0FAAAAAAAAAAAAAP0FAAAAAAAA/gUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wUAAAAAAAD3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					751,
					1,
					"insert",
					{
						"characters": " P"
					},
					"AgAAAP4FAAAAAAAA/wUAAAAAAAAAAAAA/wUAAAAAAAAABgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gUAAAAAAAD+BQAAAAAAAAAAAAAAAPC/"
				],
				[
					752,
					1,
					"left_delete",
					null,
					"AQAAAP8FAAAAAAAA/wUAAAAAAAABAAAAUA",
					"AQAAAAAAAAABAAAAAAYAAAAAAAAABgAAAAAAAAAAAAAAAPC/"
				],
				[
					753,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAP8FAAAAAAAAAQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wUAAAAAAAD/BQAAAAAAAAAAAAAAAPC/"
				],
				[
					754,
					1,
					"paste",
					null,
					"AQAAAAAGAAAAAAAABgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAYAAAAAAAAABgAAAAAAAAAAAAAAAPC/"
				],
				[
					757,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAAGAAAAAAAAAQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAYAAAAAAAAABgAAAAAAAAAAAAAAAPC/"
				],
				[
					760,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAcGAAAAAAAACAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwYAAAAAAAAHBgAAAAAAAAAAAAAAAPC/"
				],
				[
					763,
					1,
					"insert",
					{
						"characters": "Section"
					},
					"BwAAAAcGAAAAAAAACAYAAAAAAAAAAAAACAYAAAAAAAAJBgAAAAAAAAAAAAAJBgAAAAAAAAoGAAAAAAAAAAAAAAoGAAAAAAAACwYAAAAAAAAAAAAACwYAAAAAAAAMBgAAAAAAAAAAAAAMBgAAAAAAAA0GAAAAAAAAAAAAAA0GAAAAAAAADgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwYAAAAAAAAHBgAAAAAAAAAAAAAAAPC/"
				],
				[
					771,
					1,
					"paste",
					null,
					"AgAAAFUPAAAAAAAAYg8AAAAAAAAAAAAAYg8AAAAAAABiDwAAAAAAAAwAAAA8cD5IZWxsbzwvcD4",
					"AQAAAAAAAAABAAAAYQ8AAAAAAABVDwAAAAAAAAAAAAAAAPC/"
				],
				[
					776,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AgAAAFUPAAAAAAAAVg8AAAAAAAAAAAAAVg8AAAAAAABWDwAAAAAAAA0AAABVbndyYXBTZWN0aW9u",
					"AQAAAAAAAAABAAAAVQ8AAAAAAABiDwAAAAAAAAAAAAAAAPC/"
				],
				[
					777,
					1,
					"paste",
					null,
					"AQAAAFYPAAAAAAAAYw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVg8AAAAAAABWDwAAAAAAAAAAAAAAAPC/"
				],
				[
					778,
					1,
					"insert",
					{
						"characters": " />"
					},
					"AwAAAGMPAAAAAAAAZA8AAAAAAAAAAAAAZA8AAAAAAABlDwAAAAAAAAAAAABlDwAAAAAAAGYPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYw8AAAAAAABjDwAAAAAAAAAAAAAAAPC/"
				],
				[
					786,
					1,
					"insert",
					{
						"characters": " from"
					},
					"BQAAABAGAAAAAAAAEQYAAAAAAAAAAAAAEQYAAAAAAAASBgAAAAAAAAAAAAASBgAAAAAAABMGAAAAAAAAAAAAABMGAAAAAAAAFAYAAAAAAAAAAAAAFAYAAAAAAAAVBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAYAAAAAAAAQBgAAAAAAAAAAAAAAAPC/"
				],
				[
					787,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABUGAAAAAAAAFgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQYAAAAAAAAVBgAAAAAAAAAAAAAAAPC/"
				],
				[
					793,
					1,
					"paste",
					null,
					"AQAAABYGAAAAAAAASgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgYAAAAAAAAWBgAAAAAAAAAAAAAAAPC/"
				],
				[
					798,
					1,
					"insert",
					{
						"characters": "Unwrap"
					},
					"BwAAADoGAAAAAAAAOwYAAAAAAAAAAAAAOwYAAAAAAAA7BgAAAAAAAA8AAABVbnN0YWtlV2l0aGRyYXc7BgAAAAAAADwGAAAAAAAAAAAAADwGAAAAAAAAPQYAAAAAAAAAAAAAPQYAAAAAAAA+BgAAAAAAAAAAAAA+BgAAAAAAAD8GAAAAAAAAAAAAAD8GAAAAAAAAQAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgYAAAAAAABJBgAAAAAAAAAAAAAAAPC/"
				],
				[
					802,
					3,
					"left_delete",
					null,
					"AwAAALsPAAAAAAAAuw8AAAAAAABgBAAAICAvLyB1bndyYXAgaWYgRVRIIG9yIERBSSBvbiBHbm9zaXMKICBhc3luYyBmdW5jdGlvbiB1bndyYXBJZk5hdGl2ZVRva2VuKCkgewogICAgaWYgKHRva2VuU3ltYm9sID09PSAiRVRIIikgewogICAgICB0cnkgewogICAgICAgIGNvbnN0IHVud3JhcFR4ID0gYXdhaXQgdW53cmFwRVRIKGVyYzIwUG9zaXRpb25CYWxhbmNlKQogICAgICAgIGF3YWl0IHVud3JhcFR4LndhaXQoKQogICAgICAgICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coIlN1Y2Nlc3NmdWxseSB1bndyYXBwZWQgRVRIIikpCiAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcihlcnJvcikpCiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcikKICAgICAgfQogICAgfSBlbHNlIGlmICh0b2tlblN5bWJvbCA9PT0gIkRBSSIgJiYgY2hhaW5TbHVnID09PSAiZ25vc2lzIikgewogICAgICBjb25zdCB3REFJQ29udHJhY3RBZGRyZXNzID0gYWRkcmVzc2VzPy5bcmVhY3RBcHBOZXR3b3JrXT8uYnJpZGdlcz8uW3Rva2VuU3ltYm9sXT8uW2NoYWluU2x1Z10/LmwyQ2Fub25pY2FsVG9rZW4KICAgICAgY29uc3Qgd0RBSUFiaSA9IFsiZnVuY3Rpb24gd2l0aGRyYXcodWludDI1NiB3YWQpIGV4dGVybmFsIl0KCiAgICAgIGNvbnN0IHdEQUlDb250cmFjdCA9IG5ldyBldGhlcnMuQ29udHJhY3Qod0RBSUNvbnRyYWN0QWRkcmVzcywgd0RBSUFiaSwgc2lnbmVyKQoKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCB1bndyYXBUeCA9IGF3YWl0IHdEQUlDb250cmFjdC53aXRoZHJhdyhlcmMyMFBvc2l0aW9uQmFsYW5jZSwgeyBnYXNMaW1pdDogZ2FzTGltaXQgfSkKICAgICAgICBhd2FpdCB1bndyYXBUeC53YWl0KCkKICAgICAgICAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCJTdWNjZXNzZnVsbHkgdW53cmFwcGVkIERBSSIpKQogICAgICAgICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKQogICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpCiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGNvbnNvbGUubG9nKCJUb2tlbiBpcyBFUkMyMCwgbm8gdW53cmFwIG5lY2Vzc2FyeSIpCiAgICB9CiAgfboPAAAAAAAAug8AAAAAAAABAAAACrkPAAAAAAAAuQ8AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAGxQAAAAAAAC7DwAAAAAAAAAAAAAAAPC/"
				],
				[
					805,
					1,
					"insert",
					{
						"characters": "tokenS"
					},
					"BgAAAJUPAAAAAAAAlg8AAAAAAAAAAAAAlg8AAAAAAACXDwAAAAAAAAAAAACXDwAAAAAAAJgPAAAAAAAAAAAAAJgPAAAAAAAAmQ8AAAAAAAAAAAAAmQ8AAAAAAACaDwAAAAAAAAAAAACaDwAAAAAAAJsPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQ8AAAAAAACVDwAAAAAAAAAAAAAAAPC/"
				],
				[
					806,
					1,
					"insert",
					{
						"characters": "ymbol={"
					},
					"BwAAAJsPAAAAAAAAnA8AAAAAAAAAAAAAnA8AAAAAAACdDwAAAAAAAAAAAACdDwAAAAAAAJ4PAAAAAAAAAAAAAJ4PAAAAAAAAnw8AAAAAAAAAAAAAnw8AAAAAAACgDwAAAAAAAAAAAACgDwAAAAAAAKEPAAAAAAAAAAAAAKEPAAAAAAAAog8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmw8AAAAAAACbDwAAAAAAAAAAAAAAAPC/"
				],
				[
					807,
					1,
					"insert",
					{
						"characters": "token"
					},
					"BQAAAKIPAAAAAAAAow8AAAAAAAAAAAAAow8AAAAAAACkDwAAAAAAAAAAAACkDwAAAAAAAKUPAAAAAAAAAAAAAKUPAAAAAAAApg8AAAAAAAAAAAAApg8AAAAAAACnDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAog8AAAAAAACiDwAAAAAAAAAAAAAAAPC/"
				],
				[
					808,
					1,
					"insert_completion",
					{
						"completion": "tokenSymbol",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "tokenSymbol"
					},
					"AgAAAKIPAAAAAAAAog8AAAAAAAAFAAAAdG9rZW6iDwAAAAAAAK0PAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApw8AAAAAAACnDwAAAAAAAAAAAAAAAPC/"
				],
				[
					809,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAK0PAAAAAAAArg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQ8AAAAAAACtDwAAAAAAAAAAAAAAAPC/"
				],
				[
					810,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK4PAAAAAAAArw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArg8AAAAAAACuDwAAAAAAAAAAAAAAAPC/"
				],
				[
					821,
					1,
					"paste",
					null,
					"AgAAAJUPAAAAAAAA9g8AAAAAAAAAAAAA9g8AAAAAAAD2DwAAAAAAABkAAAB0b2tlblN5bWJvbD17dG9rZW5TeW1ib2x9",
					"AQAAAAAAAAABAAAArg8AAAAAAACVDwAAAAAAAAAAAAAAAPC/"
				],
				[
					825,
					2,
					"left_delete",
					null,
					"AgAAABINAAAAAAAAEg0AAAAAAAAnAAAAbmV0d29ya3NXaXRoWWllbGRzPXtuZXR3b3Jrc1dpdGhZaWVsZHN9EQ0AAAAAAAARDQAAAAAAAAEAAAAg",
					"AQAAAAAAAAABAAAAOQ0AAAAAAAASDQAAAAAAAAAAAAAAAPC/"
				],
				[
					828,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALkNAAAAAAAAug0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQ0AAAAAAAC5DQAAAAAAAAAAAAAAAPC/"
				],
				[
					829,
					1,
					"paste",
					null,
					"AQAAALoNAAAAAAAA4Q0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAug0AAAAAAAC6DQAAAAAAAAAAAAAAAPC/"
				],
				[
					870,
					3,
					"left_delete",
					null,
					"AwAAAARDAAAAAAAABEMAAAAAAACLAQAAICBhc3luYyBmdW5jdGlvbiB1bndyYXBFVEgoYW1vdW50VG9VbndyYXA6IHN0cmluZykgewogICAgY29uc3Qgd0VUSENvbnRyYWN0QWRkcmVzcyA9IGFkZHJlc3Nlcz8uW3JlYWN0QXBwTmV0d29ya10/LmJyaWRnZXM/Llt0b2tlblN5bWJvbF0/LltjaGFpblNsdWddPy5sMkNhbm9uaWNhbFRva2VuCiAgICBjb25zdCB3ZXRoQWJpID0gWyJmdW5jdGlvbiB3aXRoZHJhdyh1aW50IHdhZCkgcHVibGljIl0KCiAgICBjb25zdCB3ZXRoQ29udHJhY3QgPSBuZXcgZXRoZXJzLkNvbnRyYWN0KHdFVEhDb250cmFjdEFkZHJlc3MsIHdldGhBYmksIHNpZ25lcikKCiAgICByZXR1cm4gYXdhaXQgd2V0aENvbnRyYWN0LndpdGhkcmF3KGFtb3VudFRvVW53cmFwLCB7IGdhc0xpbWl0OiBnYXNMaW1pdCB9KQogIH0DQwAAAAAAAANDAAAAAAAAAQAAAAoCQwAAAAAAAAJDAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAj0QAAAAAAAAEQwAAAAAAAAAAAAAAAPC/"
				],
				[
					895,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPYPAAAAAAAA9w8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9g8AAAAAAAD2DwAAAAAAAAAAAAAAAPC/"
				],
				[
					896,
					1,
					"paste",
					null,
					"AQAAAPcPAAAAAAAA/w8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9w8AAAAAAAD3DwAAAAAAAAAAAAAAAPC/"
				],
				[
					897,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAP8PAAAAAAAAABAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/w8AAAAAAAD/DwAAAAAAAAAAAAAAAPC/"
				],
				[
					898,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAAAQAAAAAAAAAhAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAPC/"
				],
				[
					899,
					1,
					"paste",
					null,
					"AQAAAAEQAAAAAAAACRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAARAAAAAAAAABEAAAAAAAAAAAAAAAAPC/"
				],
				[
					903,
					2,
					"left_delete",
					null,
					"AgAAAIwOAAAAAAAAjA4AAAAAAAA3AAAAZ29Ub05leHRTZWN0aW9uPXsoKSA9PiBzZXRDdXJyZW50U3RlcChjdXJyZW50U3RlcCArIDEpfYsOAAAAAAAAiw4AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAww4AAAAAAACMDgAAAAAAAAAAAAAAAPC/"
				],
				[
					906,
					1,
					"left_delete",
					null,
					"AQAAAIENAAAAAAAAgQ0AAAAAAAA4AAAAIGdvVG9OZXh0U2VjdGlvbj17KCkgPT4gc2V0Q3VycmVudFN0ZXAoY3VycmVudFN0ZXAgKyAxKX0",
					"AQAAAAAAAAABAAAAuQ0AAAAAAACBDQAAAAAAAAAAAAAAAPC/"
				],
				[
					909,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABENAAAAAAAAEg0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQ0AAAAAAAARDQAAAAAAAAAAAAAAAPC/"
				],
				[
					910,
					1,
					"paste",
					null,
					"AQAAABINAAAAAAAASQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEg0AAAAAAAASDQAAAAAAAAAAAAAAAPC/"
				],
				[
					913,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAEOAAAAAAAAAg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQ4AAAAAAAABDgAAAAAAAAAAAAAAAPC/"
				],
				[
					914,
					1,
					"paste",
					null,
					"AQAAAAIOAAAAAAAAOQ4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAg4AAAAAAAACDgAAAAAAAAAAAAAAAPC/"
				],
				[
					917,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJQPAAAAAAAAlQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlA8AAAAAAACUDwAAAAAAAAAAAAAAAPC/"
				],
				[
					918,
					1,
					"paste",
					null,
					"AQAAAJUPAAAAAAAAzA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQ8AAAAAAACVDwAAAAAAAAAAAAAAAPC/"
				],
				[
					922,
					2,
					"left_delete",
					null,
					"AgAAAO8PAAAAAAAA7w8AAAAAAAAPAAAAc2lnbmVyPXtzaWduZXJ97g8AAAAAAADuDwAAAAAAAAEAAAAg",
					"AQAAAAAAAAABAAAA/g8AAAAAAADvDwAAAAAAAAAAAAAAAPC/"
				],
				[
					925,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB4QAAAAAAAAHxAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHhAAAAAAAAAeEAAAAAAAAAAAAAAAAPC/"
				],
				[
					926,
					1,
					"paste",
					null,
					"AQAAAB8QAAAAAAAALhAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHxAAAAAAAAAfEAAAAAAAAAAAAAAAAPC/"
				],
				[
					930,
					2,
					"left_delete",
					null,
					"AgAAAFwOAAAAAAAAXA4AAAAAAAAPAAAAc2lnbmVyPXtzaWduZXJ9Ww4AAAAAAABbDgAAAAAAAAEAAAAg",
					"AQAAAAAAAAABAAAAaw4AAAAAAABcDgAAAAAAAAAAAAAAAPC/"
				],
				[
					933,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIsOAAAAAAAAjA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiw4AAAAAAACLDgAAAAAAAAAAAAAAAPC/"
				],
				[
					934,
					1,
					"paste",
					null,
					"AQAAAIwOAAAAAAAAmw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjA4AAAAAAACMDgAAAAAAAAAAAAAAAPC/"
				],
				[
					938,
					2,
					"left_delete",
					null,
					"AgAAAMQOAAAAAAAAxA4AAAAAAAATAAAAZ2FzTGltaXQ9e2dhc0xpbWl0fcMOAAAAAAAAww4AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA1w4AAAAAAADEDgAAAAAAAAAAAAAAAPC/"
				],
				[
					941,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJsOAAAAAAAAnA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmw4AAAAAAACbDgAAAAAAAAAAAAAAAPC/"
				],
				[
					942,
					1,
					"paste",
					null,
					"AQAAAJwOAAAAAAAArw4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnA4AAAAAAACcDgAAAAAAAAAAAAAAAPC/"
				],
				[
					948,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEIQAAAAAAAAQxAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQhAAAAAAAABCEAAAAAAAAAAAAAAAAPC/"
				],
				[
					949,
					1,
					"paste",
					null,
					"AQAAAEMQAAAAAAAAVxAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQxAAAAAAAABDEAAAAAAAAAAAAAAAAPC/"
				],
				[
					954,
					1,
					"insert",
					{
						"characters": "erc"
					},
					"BAAAAEMQAAAAAAAARBAAAAAAAAAAAAAARBAAAAAAAABEEAAAAAAAAAMAAABFUkNEEAAAAAAAAEUQAAAAAAAAAAAAAEUQAAAAAAAARhAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARhAAAAAAAABDEAAAAAAAAAAAAAAAAPC/"
				],
				[
					961,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAFcQAAAAAAAAWBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVxAAAAAAAABXEAAAAAAAAAAAAAAAAPC/"
				],
				[
					962,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAFgQAAAAAAAAWhAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWBAAAAAAAABYEAAAAAAAAAAAAAAAAPC/"
				],
				[
					963,
					1,
					"paste",
					null,
					"AQAAAFkQAAAAAAAAbRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWRAAAAAAAABZEAAAAAAAAAAAAAAAAPC/"
				],
				[
					968,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHQQAAAAAAAAdRAAAAAAAAAAAAAAdRAAAAAAAAB3EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdBAAAAAAAAB0EAAAAAAAAAAAAAAAAPC/"
				],
				[
					971,
					1,
					"insert",
					{
						"characters": "\t<p"
					},
					"AwAAAHQQAAAAAAAAdhAAAAAAAAAAAAAAdhAAAAAAAAB3EAAAAAAAAAAAAAB3EAAAAAAAAHgQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdBAAAAAAAAB0EAAAAAAAAAAAAAAAAPC/"
				],
				[
					972,
					1,
					"insert",
					{
						"characters": ">End<"
					},
					"BQAAAHgQAAAAAAAAeRAAAAAAAAAAAAAAeRAAAAAAAAB6EAAAAAAAAAAAAAB6EAAAAAAAAHsQAAAAAAAAAAAAAHsQAAAAAAAAfBAAAAAAAAAAAAAAfBAAAAAAAAB9EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeBAAAAAAAAB4EAAAAAAAAAAAAAAAAPC/"
				],
				[
					973,
					1,
					"insert",
					{
						"characters": "/p>"
					},
					"AwAAAH0QAAAAAAAAfhAAAAAAAAAAAAAAfhAAAAAAAAB/EAAAAAAAAAAAAAB/EAAAAAAAAIAQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfRAAAAAAAAB9EAAAAAAAAAAAAAAAAPC/"
				],
				[
					976,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHEQAAAAAAAAchAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcRAAAAAAAABxEAAAAAAAAAAAAAAAAPC/"
				],
				[
					982,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG4QAAAAAAAAbxAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbhAAAAAAAABuEAAAAAAAAAAAAAAAAPC/"
				],
				[
					983,
					1,
					"paste",
					null,
					"AQAAAG8QAAAAAAAAmhAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbxAAAAAAAABvEAAAAAAAAAAAAAAAAPC/"
				],
				[
					1024,
					1,
					"left_delete",
					null,
					"AQAAAKMyAAAAAAAAozIAAAAAAADnAgAAICBmdW5jdGlvbiBjb252ZXJ0SFRva2VucygpIHsKICAgIGNvbnN0IGNvbnRyYWN0QWJpID0gc2FkZGxlU3dhcEFiaQoKICAgIC8vIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGUgY29udHJhY3QKICAgIGNvbnN0IG9wdGltaXNtQ29udHJhY3QgPSAiMHhhNTAzOTViZEVhY2E3MDYyMjU1MTA5ZmVkRTAxMmVGRTYzZDZENDAyIgoKICAgIGNvbnN0IGNvbnRyYWN0QWRkcmVzcyA9IG9wdGltaXNtQ29udHJhY3QKICAgIGNvbnN0IGNvbnRyYWN0ID0gbmV3IGV0aGVycy5Db250cmFjdChjb250cmFjdEFkZHJlc3MsIGNvbnRyYWN0QWJpLCBzaWduZXIpCgogICAgY29uc3QgdG9rZW5JbmRleEZyb20gPSAxIC8vIGhUb2tlbgogICAgY29uc3QgdG9rZW5JbmRleFRvID0gMCAvLyBjYW5vbmljYWwKICAgIGNvbnN0IGR4ID0gMTAwMDAwMDAwMDAwMDAwMAogICAgY29uc3QgbWluRHkgPSAxMDAwMDAwMDAwMDAwMDAKICAgIGNvbnN0IGRlYWRsaW5lID0gZ2V0RGVhZGxpbmUoMikKICAgIAogICAgY29udHJhY3Quc3dhcCgKICAgICAgdG9rZW5JbmRleEZyb20sCiAgICAgIHRva2VuSW5kZXhUbywKICAgICAgZHgsCiAgICAgIG1pbkR5LAogICAgICBkZWFkbGluZSwKICAgICAgewogICAgICAgIGdhc0xpbWl0OiBnYXNMaW1pdAogICAgICB9CiAgICApCiAgICAgIC50aGVuKChiYWxhbmNlKSA9PiBjb25zb2xlLmxvZyhgc3VjY2Vzc2ApKQogICAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcihlcnJvcikpCiAgfQo",
					"AQAAAAAAAAABAAAAijUAAAAAAACjMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1029,
					1,
					"left_delete",
					null,
					"AQAAAKIyAAAAAAAAojIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAozIAAAAAAACjMgAAAAAAAAAAAAAAAPC/"
				],
				[
					1032,
					1,
					"left_delete",
					null,
					"AQAAAB40AAAAAAAAHjQAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAHzQAAAAAAAAfNAAAAAAAAAAAAAAAAPC/"
				],
				[
					1033,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAB40AAAAAAAAHzQAAAAAAAAAAAAAHzQAAAAAAAAhNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHjQAAAAAAAAeNAAAAAAAAAAAAAAAAPC/"
				],
				[
					1095,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAH0PAAAAAAAAfg8AAAAAAAAAAAAAIDQAAAAAAAAgNAAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAfQ8AAAAAAAB9DwAAAAAAAAAAAAAAAPC/"
				],
				[
					1096,
					1,
					"paste",
					null,
					"AQAAAH4PAAAAAAAAlg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfg8AAAAAAAB+DwAAAAAAAAAAAAAAAPC/"
				],
				[
					1103,
					6,
					"left_delete",
					null,
					"BgAAAIMPAAAAAAAAgw8AAAAAAAABAAAALoIPAAAAAAAAgg8AAAAAAAABAAAAc4EPAAAAAAAAgQ8AAAAAAAABAAAAcIAPAAAAAAAAgA8AAAAAAAABAAAAb38PAAAAAAAAfw8AAAAAAAABAAAAcn4PAAAAAAAAfg8AAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAhA8AAAAAAACEDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1106,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAJAPAAAAAAAAkQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkA8AAAAAAACQDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1107,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJEPAAAAAAAAkw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQ8AAAAAAACRDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1108,
					1,
					"paste",
					null,
					"AQAAAJIPAAAAAAAApA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkg8AAAAAAACSDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1118,
					1,
					"insert",
					{
						"characters": "props."
					},
					"BgAAAJIPAAAAAAAAkw8AAAAAAAAAAAAAkw8AAAAAAACUDwAAAAAAAAAAAACUDwAAAAAAAJUPAAAAAAAAAAAAAJUPAAAAAAAAlg8AAAAAAAAAAAAAlg8AAAAAAACXDwAAAAAAAAAAAACXDwAAAAAAAJgPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkg8AAAAAAACSDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1123,
					1,
					"insert",
					{
						"characters": "etS"
					},
					"AwAAAJkPAAAAAAAAmg8AAAAAAAAAAAAAmg8AAAAAAACbDwAAAAAAAAAAAACbDwAAAAAAAJwPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQ8AAAAAAACZDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1126,
					1,
					"insert",
					{
						"characters": "etS"
					},
					"AwAAAH8PAAAAAAAAgA8AAAAAAAAAAAAAgA8AAAAAAACBDwAAAAAAAAAAAACBDwAAAAAAAIIPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfw8AAAAAAAB/DwAAAAAAAAAAAAAAAPC/"
				],
				[
					1129,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAGsGAAAAAAAAbAYAAAAAAAAAAAAAbAYAAAAAAABuBgAAAAAAAAAAAABuBgAAAAAAAG8GAAAAAAAAAAAAAG8GAAAAAAAAcQYAAAAAAAAAAAAAbAYAAAAAAABsBgAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAawYAAAAAAABrBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1131,
					1,
					"reindent",
					null,
					"AQAAAGwGAAAAAAAAbgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAYAAAAAAABsBgAAAAAAAAAAAAAAACxA"
				],
				[
					1132,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BgAAAG4GAAAAAAAAbwYAAAAAAAAAAAAAcAYAAAAAAABwBgAAAAAAAAIAAAAgIG8GAAAAAAAAcAYAAAAAAAAAAAAAcAYAAAAAAABxBgAAAAAAAAAAAABxBgAAAAAAAHIGAAAAAAAAAAAAAHIGAAAAAAAAcwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgYAAAAAAABuBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1133,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHMGAAAAAAAAdAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwYAAAAAAABzBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1134,
					1,
					"paste",
					null,
					"AQAAAHQGAAAAAAAAiQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAYAAAAAAAB0BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1135,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAIkGAAAAAAAAigYAAAAAAAAAAAAAigYAAAAAAACLBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQYAAAAAAACJBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1136,
					1,
					"insert",
					{
						"characters": " props."
					},
					"BwAAAIsGAAAAAAAAjAYAAAAAAAAAAAAAjAYAAAAAAACNBgAAAAAAAAAAAACNBgAAAAAAAI4GAAAAAAAAAAAAAI4GAAAAAAAAjwYAAAAAAAAAAAAAjwYAAAAAAACQBgAAAAAAAAAAAACQBgAAAAAAAJEGAAAAAAAAAAAAAJEGAAAAAAAAkgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwYAAAAAAACLBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1137,
					1,
					"paste",
					null,
					"AQAAAJIGAAAAAAAApwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgYAAAAAAACSBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1148,
					1,
					"paste",
					null,
					"AgAAANIPAAAAAAAA5w8AAAAAAAAAAAAA5w8AAAAAAADnDwAAAAAAABsAAABwcm9wcy5zZXRTaG93UmViYWxhbmNlTW9kYWw",
					"AQAAAAAAAAABAAAA7Q8AAAAAAADSDwAAAAAAAAAAAAAAAPC/"
				],
				[
					1153,
					1,
					"left_delete",
					null,
					"AQAAANlDAAAAAAAA2UMAAAAAAAAGAAAAcHJvcHMu",
					"AQAAAAAAAAABAAAA30MAAAAAAADZQwAAAAAAAAAAAAAAAPC/"
				],
				[
					1160,
					1,
					"left_delete",
					null,
					"AQAAAJRDAAAAAAAAlEMAAAAAAAAGAAAAcHJvcHMu",
					"AQAAAAAAAAABAAAAmkMAAAAAAACUQwAAAAAAAAAAAAAAAPC/"
				],
				[
					1166,
					1,
					"insert",
					{
						"characters": "\nconst"
					},
					"BwAAAGsGAAAAAAAAbAYAAAAAAAAAAAAAbAYAAAAAAABuBgAAAAAAAAAAAABuBgAAAAAAAG8GAAAAAAAAAAAAAG8GAAAAAAAAcAYAAAAAAAAAAAAAcAYAAAAAAABxBgAAAAAAAAAAAABxBgAAAAAAAHIGAAAAAAAAAAAAAHIGAAAAAAAAcwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawYAAAAAAABrBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1167,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHMGAAAAAAAAdAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwYAAAAAAABzBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1168,
					1,
					"paste",
					null,
					"AQAAAHQGAAAAAAAAhgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAYAAAAAAAB0BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1169,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAIYGAAAAAAAAhwYAAAAAAAAAAAAAhwYAAAAAAACIBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgYAAAAAAACGBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1170,
					1,
					"insert",
					{
						"characters": " props."
					},
					"BwAAAIgGAAAAAAAAiQYAAAAAAAAAAAAAiQYAAAAAAACKBgAAAAAAAAAAAACKBgAAAAAAAIsGAAAAAAAAAAAAAIsGAAAAAAAAjAYAAAAAAAAAAAAAjAYAAAAAAACNBgAAAAAAAAAAAACNBgAAAAAAAI4GAAAAAAAAAAAAAI4GAAAAAAAAjwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAYAAAAAAACIBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1171,
					1,
					"paste",
					null,
					"AQAAAI8GAAAAAAAAoQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwYAAAAAAACPBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1186,
					3,
					"left_delete",
					null,
					"AwAAAHYEAAAAAAAAdgQAAAAAAAAQAAAAQ2lyY3VsYXJQcm9ncmVzc3UEAAAAAAAAdQQAAAAAAAABAAAAIHQEAAAAAAAAdAQAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAdgQAAAAAAACGBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1199,
					1,
					"left_delete",
					null,
					"AwAAAF8EAAAAAAAAXwQAAAAAAAAEAAAAQ2FyZF4EAAAAAAAAXgQAAAAAAAABAAAAIF0EAAAAAAAAXQQAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAXwQAAAAAAABjBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1245,
					1,
					"left_delete",
					null,
					"AQAAAGMCAAAAAAAAYwIAAAAAAABBAAAACmltcG9ydCB7IENoYWluU2x1ZywgdXRpbHMgYXMgc2RrVXRpbHMgfSBmcm9tICdAaG9wLXByb3RvY29sL3Nkayc",
					"AQAAAAAAAAABAAAApAIAAAAAAABjAgAAAAAAAAAAAAAAAPC/"
				],
				[
					1261,
					2,
					"left_delete",
					null,
					"AgAAAGQCAAAAAAAAZAIAAAAAAACMAAAAaW1wb3J0IHsgdXNlU2VsZWN0ZWROZXR3b3JrIH0gZnJvbSAnc3JjL2hvb2tzJwppbXBvcnQgeyByZWFjdEFwcE5ldHdvcmsgfSBmcm9tICdzcmMvY29uZmlnJwppbXBvcnQgeyB1c2VBcHAgfSBmcm9tICdzcmMvY29udGV4dHMvQXBwQ29udGV4dCdjAgAAAAAAAGMCAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAA8AIAAAAAAABkAgAAAAAAAAAAAAAAAPC/"
				],
				[
					1264,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKIAAAAAAAAAowAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogAAAAAAAACiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1265,
					1,
					"paste",
					null,
					"AQAAAKMAAAAAAAAALwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowAAAAAAAACjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1269,
					2,
					"left_delete",
					null,
					"AgAAAP8AAAAAAAAA/wAAAAAAAAAwAAAAaW1wb3J0IHsgdXNlQXBwIH0gZnJvbSAnc3JjL2NvbnRleHRzL0FwcENvbnRleHQn/gAAAAAAAAD+AAAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAALwEAAAAAAAD/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					1272,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKIAAAAAAAAAowAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogAAAAAAAACiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1273,
					1,
					"paste",
					null,
					"AQAAAKMAAAAAAAAA0wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowAAAAAAAACjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1300,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAADcDAAAAAAAAOAMAAAAAAAAAAAAAOAMAAAAAAAA5AwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwMAAAAAAAA3AwAAAAAAAAAAAAAAAPC/"
				],
				[
					1301,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADkDAAAAAAAAOgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQMAAAAAAAA5AwAAAAAAAAAAAAAAAPC/"
				],
				[
					1305,
					2,
					"left_delete",
					null,
					"AgAAAGsDAAAAAAAAawMAAAAAAAA7AAAAaW1wb3J0IHsgdXNlUG9vbFN0YXRzIH0gZnJvbSAnc3JjL3BhZ2VzL1Bvb2xzL3VzZVBvb2xTdGF0cydqAwAAAAAAAGoDAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAApgMAAAAAAABrAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1312,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAC8BAAAAAAAAMAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwEAAAAAAAAvAQAAAAAAAAAAAAAAAPC/"
				],
				[
					1313,
					1,
					"paste",
					null,
					"AQAAADABAAAAAAAAawEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAEAAAAAAAAwAQAAAAAAAAAAAAAAAPC/"
				],
				[
					1314,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGsBAAAAAAAAbAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawEAAAAAAABrAQAAAAAAAAAAAAAAAPC/"
				],
				[
					1323,
					2,
					"left_delete",
					null,
					"AgAAAC4DAAAAAAAALgMAAAAAAABFAAAAaW1wb3J0IHsgbmV0d29ya0lkVG9TbHVnLCBuZXR3b3JrU2x1Z1RvSWQgfSBmcm9tICdzcmMvdXRpbHMvbmV0d29ya3MnLQMAAAAAAAAtAwAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAcwMAAAAAAAAuAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1326,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGsBAAAAAAAAbAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawEAAAAAAABrAQAAAAAAAAAAAAAAAPC/"
				],
				[
					1327,
					1,
					"paste",
					null,
					"AQAAAGwBAAAAAAAAsQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAEAAAAAAABsAQAAAAAAAAAAAAAAAPC/"
				],
				[
					1330,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKIAAAAAAAAAowAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogAAAAAAAACiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1334,
					1,
					"left_delete",
					null,
					"AQAAAMsCAAAAAAAAywIAAAAAAACpAAAAaW1wb3J0ICogYXMgYWRkcmVzc2VzIGZyb20gJ0Bob3AtcHJvdG9jb2wvY29yZS9hZGRyZXNzZXMnCmltcG9ydCAqIGFzIG5ldHdvcmtzIGZyb20gJ0Bob3AtcHJvdG9jb2wvY29yZS9uZXR3b3JrcycKaW1wb3J0ICogYXMgbWV0YWRhdGEgZnJvbSAnQGhvcC1wcm90b2NvbC9jb3JlL21ldGFkYXRhJw",
					"AQAAAAAAAAABAAAAdAMAAAAAAADLAgAAAAAAAAAAAAAAAPC/"
				],
				[
					1337,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALIBAAAAAAAAswEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgEAAAAAAACyAQAAAAAAAAAAAAAAAPC/"
				],
				[
					1338,
					1,
					"paste",
					null,
					"AQAAALMBAAAAAAAAXAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswEAAAAAAACzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					1341,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGgAAAAAAAAAaQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAAAAAAAAABoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1344,
					1,
					"left_delete",
					null,
					"AQAAAKMAAAAAAAAAowAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAApAAAAAAAAACkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1348,
					2,
					"left_delete",
					null,
					"AgAAADMDAAAAAAAAMwMAAAAAAABBAAAAaW1wb3J0IHsgaG9wU3Rha2luZ1Jld2FyZHNDb250cmFjdHMgfSBmcm9tICdzcmMvY29uZmlnL2FkZHJlc3NlcycyAwAAAAAAADIDAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAdAMAAAAAAAAzAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1351,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAF0CAAAAAAAAXgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQIAAAAAAABdAgAAAAAAAAAAAAAAAPC/"
				],
				[
					1352,
					1,
					"paste",
					null,
					"AQAAAF4CAAAAAAAAnwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgIAAAAAAABeAgAAAAAAAAAAAAAAAPC/"
				],
				[
					1405,
					2,
					"left_delete",
					null,
					"AgAAAFkdAAAAAAAAWR0AAAAAAAACAAAAICBXHQAAAAAAAFcdAAAAAAAAAgAAACAg",
					"AQAAAAAAAAABAAAAWx0AAAAAAABbHQAAAAAAAAAAAAAAAPC/"
				],
				[
					1481,
					1,
					"insert",
					{
						"characters": "\n\n/*"
					},
					"BwAAAKsfAAAAAAAArB8AAAAAAAAAAAAArB8AAAAAAACuHwAAAAAAAAAAAACuHwAAAAAAAK8fAAAAAAAAAAAAAK8fAAAAAAAAsR8AAAAAAAAAAAAArB8AAAAAAACsHwAAAAAAAAIAAAAgIK8fAAAAAAAAsB8AAAAAAAAAAAAAsB8AAAAAAACxHwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqx8AAAAAAACrHwAAAAAAAAAAAAAAAPC/"
				],
				[
					1482,
					1,
					"insert",
					{
						"characters": " CHAIN"
					},
					"BgAAALEfAAAAAAAAsh8AAAAAAAAAAAAAsh8AAAAAAACzHwAAAAAAAAAAAACzHwAAAAAAALQfAAAAAAAAAAAAALQfAAAAAAAAtR8AAAAAAAAAAAAAtR8AAAAAAAC2HwAAAAAAAAAAAAC2HwAAAAAAALcfAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsR8AAAAAAACxHwAAAAAAAAAAAAAAAPC/"
				],
				[
					1483,
					2,
					"left_delete",
					null,
					"AgAAALYfAAAAAAAAth8AAAAAAAABAAAATrUfAAAAAAAAtR8AAAAAAAABAAAASQ",
					"AQAAAAAAAAABAAAAtx8AAAAAAAC3HwAAAAAAAAAAAAAAAPC/"
				],
				[
					1484,
					1,
					"insert",
					{
						"characters": "NGE"
					},
					"AwAAALUfAAAAAAAAth8AAAAAAAAAAAAAth8AAAAAAAC3HwAAAAAAAAAAAAC3HwAAAAAAALgfAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtR8AAAAAAAC1HwAAAAAAAAAAAAAAAPC/"
				],
				[
					1485,
					1,
					"insert",
					{
						"characters": " NETWORK"
					},
					"CAAAALgfAAAAAAAAuR8AAAAAAAAAAAAAuR8AAAAAAAC6HwAAAAAAAAAAAAC6HwAAAAAAALsfAAAAAAAAAAAAALsfAAAAAAAAvB8AAAAAAAAAAAAAvB8AAAAAAAC9HwAAAAAAAAAAAAC9HwAAAAAAAL4fAAAAAAAAAAAAAL4fAAAAAAAAvx8AAAAAAAAAAAAAvx8AAAAAAADAHwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuB8AAAAAAAC4HwAAAAAAAAAAAAAAAPC/"
				],
				[
					1486,
					1,
					"insert",
					{
						"characters": " */"
					},
					"AwAAAMAfAAAAAAAAwR8AAAAAAAAAAAAAwR8AAAAAAADCHwAAAAAAAAAAAADCHwAAAAAAAMMfAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwB8AAAAAAADAHwAAAAAAAAAAAAAAAPC/"
				],
				[
					1490,
					1,
					"left_delete",
					null,
					"AwAAAMUfAAAAAAAAxR8AAAAAAAAzAQAAICBhc3luYyBmdW5jdGlvbiBjaGFuZ2VOZXR3b3JrKCkgewogICAgdHJ5IHsKICAgICAgY2hlY2tDb25uZWN0ZWROZXR3b3JrSWQoZGVzdGluYXRpb25OZXR3b3JrSWQpCgogICAgICBjb25zdCBldmVudCA9IHsgdGFyZ2V0OiB7IHZhbHVlOiBuZXR3b3JrSWRUb1NsdWcoZGVzdGluYXRpb25OZXR3b3JrSWQpIH0gfQogICAgICBzZWxlY3RTb3VyY2VOZXR3b3JrKGV2ZW50IGFzIFJlYWN0LkNoYW5nZUV2ZW50PHsgdmFsdWU6IGFueSB9PikKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpCiAgICB9CiAgfcQfAAAAAAAAxB8AAAAAAAABAAAACsMfAAAAAAAAwx8AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA+CAAAAAAAADFHwAAAAAAAAAAAAAAAPC/"
				],
				[
					1498,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAGYzAAAAAAAAZzMAAAAAAAAAAAAAZzMAAAAAAABpMwAAAAAAAAAAAABpMwAAAAAAAGozAAAAAAAAAAAAAGozAAAAAAAAbDMAAAAAAAAAAAAAZzMAAAAAAABnMwAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAZjMAAAAAAABmMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1499,
					1,
					"paste",
					null,
					"AQAAAGozAAAAAAAAnTQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAajMAAAAAAABqMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1502,
					1,
					"left_delete",
					null,
					"AQAAAGozAAAAAAAAajMAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAbDMAAAAAAABsMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1513,
					1,
					"paste",
					null,
					"AQAAAGoNAAAAAAAAdw0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAag0AAAAAAABqDQAAAAAAAAAAAAAAAPC/"
				],
				[
					1514,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHcNAAAAAAAAeA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdw0AAAAAAAB3DQAAAAAAAAAAAAAAAPC/"
				],
				[
					1517,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAHcNAAAAAAAAeA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdw0AAAAAAAB3DQAAAAAAAAAAAAAAAPC/"
				],
				[
					1518,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAHgNAAAAAAAAeg0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeA0AAAAAAAB4DQAAAAAAAAAAAAAAAPC/"
				],
				[
					1519,
					1,
					"paste",
					null,
					"AQAAAHkNAAAAAAAAhg0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQ0AAAAAAAB5DQAAAAAAAAAAAAAAAPC/"
				],
				[
					1552,
					1,
					"paste",
					null,
					"AQAAAKUzAAAAAAAAuTMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApTMAAAAAAAClMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1555,
					1,
					"insert",
					{
						"characters": "newChainI"
					},
					"CgAAAKUzAAAAAAAApjMAAAAAAAAAAAAApjMAAAAAAACmMwAAAAAAABQAAABkZXN0aW5hdGlvbk5ldHdvcmtJZKYzAAAAAAAApzMAAAAAAAAAAAAApzMAAAAAAACoMwAAAAAAAAAAAACoMwAAAAAAAKkzAAAAAAAAAAAAAKkzAAAAAAAAqjMAAAAAAAAAAAAAqjMAAAAAAACrMwAAAAAAAAAAAACrMwAAAAAAAKwzAAAAAAAAAAAAAKwzAAAAAAAArTMAAAAAAAAAAAAArTMAAAAAAACuMwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuTMAAAAAAAClMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1556,
					1,
					"insert",
					{
						"characters": "d:"
					},
					"AgAAAK4zAAAAAAAArzMAAAAAAAAAAAAArzMAAAAAAACwMwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArjMAAAAAAACuMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1557,
					1,
					"insert",
					{
						"characters": " n"
					},
					"AgAAALAzAAAAAAAAsTMAAAAAAAAAAAAAsTMAAAAAAACyMwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsDMAAAAAAACwMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1558,
					1,
					"insert",
					{
						"characters": "umber"
					},
					"BQAAALIzAAAAAAAAszMAAAAAAAAAAAAAszMAAAAAAAC0MwAAAAAAAAAAAAC0MwAAAAAAALUzAAAAAAAAAAAAALUzAAAAAAAAtjMAAAAAAAAAAAAAtjMAAAAAAAC3MwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsjMAAAAAAACyMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1572,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BgAAALozAAAAAAAAuzMAAAAAAAAAAAAAuzMAAAAAAAC9MwAAAAAAAAAAAAC9MwAAAAAAAL8zAAAAAAAAAAAAAL8zAAAAAAAAwDMAAAAAAAAAAAAAwDMAAAAAAADEMwAAAAAAAAAAAAC7MwAAAAAAALszAAAAAAAABAAAACAgICA",
					"AQAAAAAAAAABAAAAujMAAAAAAAC6MwAAAAAAAAAAAAAAAPC/"
				],
				[
					1574,
					1,
					"reindent",
					null,
					"AQAAALszAAAAAAAAvzMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuzMAAAAAAAC7MwAAAAAAAAAAAAAAADxA"
				],
				[
					1575,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BgAAAL8zAAAAAAAAwDMAAAAAAAAAAAAAwTMAAAAAAADBMwAAAAAAAAQAAAAgICAgwDMAAAAAAADBMwAAAAAAAAAAAADBMwAAAAAAAMIzAAAAAAAAAAAAAMIzAAAAAAAAwzMAAAAAAAAAAAAAwzMAAAAAAADEMwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvzMAAAAAAAC/MwAAAAAAAAAAAAAAAPC/"
				],
				[
					1576,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMQzAAAAAAAAxTMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxDMAAAAAAADEMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1577,
					1,
					"paste",
					null,
					"AQAAAMUzAAAAAAAA2TMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxTMAAAAAAADFMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1578,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAANkzAAAAAAAA2jMAAAAAAAAAAAAA2jMAAAAAAADbMwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2TMAAAAAAADZMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1579,
					1,
					"insert",
					{
						"characters": " props"
					},
					"BgAAANszAAAAAAAA3DMAAAAAAAAAAAAA3DMAAAAAAADdMwAAAAAAAAAAAADdMwAAAAAAAN4zAAAAAAAAAAAAAN4zAAAAAAAA3zMAAAAAAAAAAAAA3zMAAAAAAADgMwAAAAAAAAAAAADgMwAAAAAAAOEzAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2zMAAAAAAADbMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1587,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAOEzAAAAAAAA4jMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4TMAAAAAAADhMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1588,
					1,
					"paste",
					null,
					"AQAAAOIzAAAAAAAA7DMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4jMAAAAAAADiMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1623,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHAQAAAAAAAAcRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcBAAAAAAAABwEAAAAAAAAAAAAAAAAPC/"
				],
				[
					1624,
					1,
					"paste",
					null,
					"AQAAAHEQAAAAAAAAgBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcRAAAAAAAABxEAAAAAAAAAAAAAAAAPC/"
				],
				[
					1625,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAIAQAAAAAAAAgRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgBAAAAAAAACAEAAAAAAAAAAAAAAAAPC/"
				],
				[
					1626,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIEQAAAAAAAAgxAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgRAAAAAAAACBEAAAAAAAAAAAAAAAAPC/"
				],
				[
					1627,
					1,
					"paste",
					null,
					"AQAAAIIQAAAAAAAAkRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAghAAAAAAAACCEAAAAAAAAAAAAAAAAPC/"
				],
				[
					1630,
					1,
					"left_delete",
					null,
					"AgAAAHEQAAAAAAAAcRAAAAAAAAAhAAAAbmV0d29ya1NsdWdUb0lkPXtuZXR3b3JrU2x1Z1RvSWR9cBAAAAAAAABwEAAAAAAAAAEAAAAg",
					"AQAAAAAAAAABAAAAkhAAAAAAAABxEAAAAAAAAAAAAAAAAPC/"
				],
				[
					1646,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CAAAAPQ0AAAAAAAA9TQAAAAAAAAAAAAA9TQAAAAAAAD7NAAAAAAAAAAAAAD7NAAAAAAAAPw0AAAAAAAAAAAAAPw0AAAAAAAA/TQAAAAAAAAAAAAA/TQAAAAAAAD+NAAAAAAAAAAAAAD+NAAAAAAAAP80AAAAAAAAAAAAAP80AAAAAAAAADUAAAAAAAAAAAAAADUAAAAAAAABNQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9DQAAAAAAAD0NAAAAAAAAAAAAAAAAPC/"
				],
				[
					1647,
					1,
					"insert",
					{
						"characters": " error"
					},
					"BgAAAAE1AAAAAAAAAjUAAAAAAAAAAAAAAjUAAAAAAAADNQAAAAAAAAAAAAADNQAAAAAAAAQ1AAAAAAAAAAAAAAQ1AAAAAAAABTUAAAAAAAAAAAAABTUAAAAAAAAGNQAAAAAAAAAAAAAGNQAAAAAAAAc1AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAATUAAAAAAAABNQAAAAAAAAAAAAAAAPC/"
				],
				[
					1657,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAMM0AAAAAAAAxDQAAAAAAAAAAAAAxDQAAAAAAADKNAAAAAAAAAAAAADKNAAAAAAAAMs0AAAAAAAAAAAAAMs0AAAAAAAA0TQAAAAAAAAAAAAAxDQAAAAAAADENAAAAAAAAAYAAAAgICAgICA",
					"AQAAAAAAAAABAAAAwzQAAAAAAADDNAAAAAAAAAAAAAAAAPC/"
				],
				[
					1658,
					1,
					"paste",
					null,
					"AQAAAMs0AAAAAAAA2jQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyzQAAAAAAADLNAAAAAAAAAAAAAAAAPC/"
				],
				[
					1661,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAMs0AAAAAAAAzDQAAAAAAAAAAAAAzDQAAAAAAADNNAAAAAAAAAAAAADNNAAAAAAAAM40AAAAAAAAAAAAAM40AAAAAAAAzzQAAAAAAAAAAAAAzzQAAAAAAADQNAAAAAAAAAAAAADQNAAAAAAAANE0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyzQAAAAAAADLNAAAAAAAAAAAAAAAAPC/"
				],
				[
					1662,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANE0AAAAAAAA0jQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0TQAAAAAAADRNAAAAAAAAAAAAAAAAPC/"
				],
				[
					1709,
					1,
					"paste",
					null,
					"AgAAANI0AAAAAAAA5jQAAAAAAAAAAAAA5jQAAAAAAADmNAAAAAAAAA8AAABuZXR3b3JrU2x1Z1RvSWQ",
					"AQAAAAAAAAABAAAA0jQAAAAAAADhNAAAAAAAAAAAAAAAAPC/"
				],
				[
					1712,
					1,
					"insert",
					{
						"characters": "\n\nreturn"
					},
					"CwAAADA1AAAAAAAAMTUAAAAAAAAAAAAAMTUAAAAAAAA1NQAAAAAAAAAAAAA1NQAAAAAAADY1AAAAAAAAAAAAADY1AAAAAAAAOjUAAAAAAAAAAAAAMTUAAAAAAAAxNQAAAAAAAAQAAAAgICAgNjUAAAAAAAA3NQAAAAAAAAAAAAA3NQAAAAAAADg1AAAAAAAAAAAAADg1AAAAAAAAOTUAAAAAAAAAAAAAOTUAAAAAAAA6NQAAAAAAAAAAAAA6NQAAAAAAADs1AAAAAAAAAAAAADs1AAAAAAAAPDUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMDUAAAAAAAAwNQAAAAAAAAAAAAAAAPC/"
				],
				[
					1713,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADw1AAAAAAAAPTUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPDUAAAAAAAA8NQAAAAAAAAAAAAAAAPC/"
				],
				[
					1714,
					11,
					"left_delete",
					null,
					"CwAAADw1AAAAAAAAPDUAAAAAAAABAAAAIDs1AAAAAAAAOzUAAAAAAAABAAAAbjo1AAAAAAAAOjUAAAAAAAABAAAAcjk1AAAAAAAAOTUAAAAAAAABAAAAdTg1AAAAAAAAODUAAAAAAAABAAAAdDc1AAAAAAAANzUAAAAAAAABAAAAZTY1AAAAAAAANjUAAAAAAAABAAAAcjQ1AAAAAAAANDUAAAAAAAACAAAAICAyNQAAAAAAADI1AAAAAAAAAgAAACAgMTUAAAAAAAAxNQAAAAAAAAEAAAAKMDUAAAAAAAAwNQAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAPTUAAAAAAAA9NQAAAAAAAAAAAAAAAPC/"
				],
				[
					1722,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAALgzAAAAAAAAuTMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuDMAAAAAAAC4MwAAAAAAAAAAAAAAAPC/"
				],
				[
					1723,
					1,
					"insert",
					{
						"characters": " string"
					},
					"BwAAALkzAAAAAAAAujMAAAAAAAAAAAAAujMAAAAAAAC7MwAAAAAAAAAAAAC7MwAAAAAAALwzAAAAAAAAAAAAALwzAAAAAAAAvTMAAAAAAAAAAAAAvTMAAAAAAAC+MwAAAAAAAAAAAAC+MwAAAAAAAL8zAAAAAAAAAAAAAL8zAAAAAAAAwDMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuTMAAAAAAAC5MwAAAAAAAAAAAAAAAPC/"
				],
				[
					1726,
					1,
					"insert",
					{
						"characters": "<Promise"
					},
					"CAAAALozAAAAAAAAuzMAAAAAAAAAAAAAuzMAAAAAAAC8MwAAAAAAAAAAAAC8MwAAAAAAAL0zAAAAAAAAAAAAAL0zAAAAAAAAvjMAAAAAAAAAAAAAvjMAAAAAAAC/MwAAAAAAAAAAAAC/MwAAAAAAAMAzAAAAAAAAAAAAAMAzAAAAAAAAwTMAAAAAAAAAAAAAwTMAAAAAAADCMwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAujMAAAAAAAC6MwAAAAAAAAAAAAAAAPC/"
				],
				[
					1727,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAMIzAAAAAAAAwzMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwjMAAAAAAADCMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1728,
					1,
					"left_delete",
					null,
					"AQAAAMIzAAAAAAAAwjMAAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAAwzMAAAAAAADDMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1731,
					1,
					"left_delete",
					null,
					"AQAAALozAAAAAAAAujMAAAAAAAABAAAAPA",
					"AQAAAAAAAAABAAAAuzMAAAAAAAC7MwAAAAAAAAAAAAAAAPC/"
				],
				[
					1734,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AQAAAMEzAAAAAAAAwjMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwTMAAAAAAADBMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1737,
					1,
					"insert",
					{
						"characters": "?"
					},
					"AQAAAMgzAAAAAAAAyTMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyDMAAAAAAADIMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1738,
					1,
					"left_delete",
					null,
					"AQAAAMgzAAAAAAAAyDMAAAAAAAABAAAAPw",
					"AQAAAAAAAAABAAAAyTMAAAAAAADJMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1739,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAMgzAAAAAAAAyTMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyDMAAAAAAADIMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1749,
					1,
					"left_delete",
					null,
					"AQAAADY1AAAAAAAANjUAAAAAAAAFAAAAZXJyb3I",
					"AQAAAAAAAAABAAAANjUAAAAAAAA7NQAAAAAAAAAAAAAAAPC/"
				],
				[
					1750,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAADY1AAAAAAAAODUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANjUAAAAAAAA2NQAAAAAAAAAAAAAAAPC/"
				],
				[
					1751,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAADc1AAAAAAAAODUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANzUAAAAAAAA3NQAAAAAAAAAAAAAAAPC/"
				],
				[
					1756,
					3,
					"left_delete",
					null,
					"AwAAADg1AAAAAAAAODUAAAAAAAABAAAAIjc1AAAAAAAANzUAAAAAAAABAAAAMDY1AAAAAAAANjUAAAAAAAABAAAAIg",
					"AQAAAAAAAAABAAAAOTUAAAAAAAA5NQAAAAAAAAAAAAAAAPC/"
				],
				[
					1757,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAADY1AAAAAAAANzUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANjUAAAAAAAA2NQAAAAAAAAAAAAAAAPC/"
				],
				[
					1762,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AgAAAMIzAAAAAAAAwzMAAAAAAAAAAAAAwzMAAAAAAADDMwAAAAAAAAYAAABzdHJpbmc",
					"AQAAAAAAAAABAAAAwjMAAAAAAADIMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1763,
					1,
					"left_delete",
					null,
					"AQAAAMIzAAAAAAAAwjMAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAwzMAAAAAAADDMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1764,
					1,
					"insert",
					{
						"characters": "number"
					},
					"BgAAAMIzAAAAAAAAwzMAAAAAAAAAAAAAwzMAAAAAAADEMwAAAAAAAAAAAADEMwAAAAAAAMUzAAAAAAAAAAAAAMUzAAAAAAAAxjMAAAAAAAAAAAAAxjMAAAAAAADHMwAAAAAAAAAAAADHMwAAAAAAAMgzAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwjMAAAAAAADCMwAAAAAAAAAAAAAAAPC/"
				],
				[
					1781,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ0NAAAAAAAAng0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQ0AAAAAAACdDQAAAAAAAAAAAAAAAPC/"
				],
				[
					1782,
					1,
					"paste",
					null,
					"AQAAAJ4NAAAAAAAAsA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAng0AAAAAAACeDQAAAAAAAAAAAAAAAPC/"
				],
				[
					1783,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAALANAAAAAAAAsQ0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsA0AAAAAAACwDQAAAAAAAAAAAAAAAPC/"
				],
				[
					1784,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAALENAAAAAAAAsw0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQ0AAAAAAACxDQAAAAAAAAAAAAAAAPC/"
				],
				[
					1785,
					1,
					"paste",
					null,
					"AQAAALINAAAAAAAAxA0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsg0AAAAAAACyDQAAAAAAAAAAAAAAAPC/"
				],
				[
					1989,
					1,
					"insert",
					{
						"characters": "420"
					},
					"BAAAABU0AAAAAAAAFjQAAAAAAAAAAAAAFjQAAAAAAAAWNAAAAAAAABAAAABwcm9wcy5uZXdDaGFpbklkFjQAAAAAAAAXNAAAAAAAAAAAAAAXNAAAAAAAABg0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJTQAAAAAAAAVNAAAAAAAAAAAAAAAAPC/"
				],
				[
					1999,
					1,
					"paste",
					null,
					"AgAAAP4zAAAAAAAACDQAAAAAAAAAAAAACDQAAAAAAAAINAAAAAAAABQAAABkZXN0aW5hdGlvbk5ldHdvcmtJZA",
					"AQAAAAAAAAABAAAA/jMAAAAAAAASNAAAAAAAAAAAAAAAAPC/"
				],
				[
					2002,
					3,
					"left_delete",
					null,
					"AwAAAA00AAAAAAAADTQAAAAAAAABAAAAMAw0AAAAAAAADDQAAAAAAAABAAAAMgs0AAAAAAAACzQAAAAAAAABAAAANA",
					"AQAAAAAAAAABAAAADjQAAAAAAAAONAAAAAAAAAAAAAAAAPC/"
				],
				[
					2003,
					1,
					"insert",
					{
						"characters": "props."
					},
					"BgAAAAs0AAAAAAAADDQAAAAAAAAAAAAADDQAAAAAAAANNAAAAAAAAAAAAAANNAAAAAAAAA40AAAAAAAAAAAAAA40AAAAAAAADzQAAAAAAAAAAAAADzQAAAAAAAAQNAAAAAAAAAAAAAAQNAAAAAAAABE0AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACzQAAAAAAAALNAAAAAAAAAAAAAAAAPC/"
				],
				[
					2004,
					1,
					"paste",
					null,
					"AQAAABE0AAAAAAAAGzQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAETQAAAAAAAARNAAAAAAAAAAAAAAAAPC/"
				],
				[
					2014,
					1,
					"paste",
					null,
					"AgAAAJM0AAAAAAAAnTQAAAAAAAAAAAAAnTQAAAAAAACdNAAAAAAAABQAAABkZXN0aW5hdGlvbk5ldHdvcmtJZA",
					"AQAAAAAAAAABAAAAkzQAAAAAAACnNAAAAAAAAAAAAAAAAPC/"
				],
				[
					2019,
					1,
					"paste",
					null,
					"AgAAAPc0AAAAAAAAATUAAAAAAAAAAAAAATUAAAAAAAABNQAAAAAAABQAAABkZXN0aW5hdGlvbk5ldHdvcmtJZA",
					"AQAAAAAAAAABAAAA9zQAAAAAAAALNQAAAAAAAAAAAAAAAPC/"
				],
				[
					2024,
					1,
					"left_delete",
					null,
					"AQAAAPMzAAAAAAAA8zMAAAAAAAAoAAAACiAgICBjb25zdCBuZXdDaGFpbklkID0gcHJvcHMubmV3Q2hhaW5JZA",
					"AQAAAAAAAAABAAAAGzQAAAAAAADzMwAAAAAAAAAAAAAAAPC/"
				],
				[
					2026,
					1,
					"left_delete",
					null,
					"AQAAAPMzAAAAAAAA8zMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA9DMAAAAAAAD0MwAAAAAAAAAAAAAAMH5A"
				],
				[
					2040,
					1,
					"paste",
					null,
					"AgAAAGoNAAAAAAAAgQ0AAAAAAAAAAAAAgQ0AAAAAAACBDQAAAAAAAA0AAABjaGFuZ2VOZXR3b3Jr",
					"AQAAAAAAAAABAAAAag0AAAAAAAB3DQAAAAAAAAAAAAAAAPC/"
				],
				[
					2045,
					1,
					"paste",
					null,
					"AgAAAIMNAAAAAAAAmg0AAAAAAAAAAAAAmg0AAAAAAACaDQAAAAAAAA0AAABjaGFuZ2VOZXR3b3Jr",
					"AQAAAAAAAAABAAAAgw0AAAAAAACQDQAAAAAAAAAAAAAAAPC/"
				],
				[
					2067,
					1,
					"left_delete",
					null,
					"AQAAAB01AAAAAAAAHTUAAAAAAAAPAAAACiAgICAgIHJldHVybiAw",
					"AQAAAAAAAAABAAAALDUAAAAAAAAdNQAAAAAAAAAAAAAAAPC/"
				],
				[
					2070,
					1,
					"left_delete",
					null,
					"AQAAANQ0AAAAAAAA1DQAAAAAAAAYAAAACiAgICAgIHJldHVybiBuZXdDaGFpbklk",
					"AQAAAAAAAAABAAAA7DQAAAAAAADUNAAAAAAAAAAAAAAAAPC/"
				],
				[
					2071,
					1,
					"left_delete",
					null,
					"AQAAANM0AAAAAAAA0zQAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA1DQAAAAAAADUNAAAAAAAAAAAAAAAAPC/"
				],
				[
					2074,
					1,
					"insert",
					{
						"characters": "void"
					},
					"BQAAAPYzAAAAAAAA9zMAAAAAAAAAAAAA9zMAAAAAAAD3MwAAAAAAAA8AAABQcm9taXNlPG51bWJlcj73MwAAAAAAAPgzAAAAAAAAAAAAAPgzAAAAAAAA+TMAAAAAAAAAAAAA+TMAAAAAAAD6MwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABTQAAAAAAAD2MwAAAAAAAAAAAAAAAPC/"
				],
				[
					2077,
					1,
					"left_delete",
					null,
					"AQAAADo0AAAAAAAAOjQAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAOzQAAAAAAAA7NAAAAAAAAAAAAAAAAPC/"
				],
				[
					2113,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AQAAAPYzAAAAAAAA9zMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9jMAAAAAAAD2MwAAAAAAAAAAAAAAAPC/"
				],
				[
					2116,
					1,
					"insert",
					{
						"characters": "Promise"
					},
					"BwAAAPYzAAAAAAAA9zMAAAAAAAAAAAAA9zMAAAAAAAD4MwAAAAAAAAAAAAD4MwAAAAAAAPkzAAAAAAAAAAAAAPkzAAAAAAAA+jMAAAAAAAAAAAAA+jMAAAAAAAD7MwAAAAAAAAAAAAD7MwAAAAAAAPwzAAAAAAAAAAAAAPwzAAAAAAAA/TMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9jMAAAAAAAD2MwAAAAAAAAAAAAAAAPC/"
				],
				[
					2119,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAAI0AAAAAAAAAzQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAjQAAAAAAAACNAAAAAAAAAAAAAAAAPC/"
				],
				[
					2142,
					1,
					"left_delete",
					null,
					"BAAAAHsRAAAAAAAAexEAAAAAAABYCgAALy8gYnJpZGdlIGNhbm9uaWNhbCB0b2tlbnMKICBhc3luYyBmdW5jdGlvbiBzd2FwQW5kU2VuZCgpIHsKICAgIGNvbnN0IGwyQW1tV3JhcHBlckNvbnRyYWN0QWRkcmVzcyA9IGFkZHJlc3Nlcz8uW3JlYWN0QXBwTmV0d29ya10/LmJyaWRnZXM/Llt0b2tlblN5bWJvbF0/LltjaGFpblNsdWddPy5sMkFtbVdyYXBwZXIKICAgIGNvbnN0IGwyQW1tV3JhcHBlckNvbnRyYWN0ID0gbmV3IGV0aGVycy5Db250cmFjdChsMkFtbVdyYXBwZXJDb250cmFjdEFkZHJlc3MsIEwyX0FtbVdyYXBwZXJBYmksIHNpZ25lcikKICAgIGNvbnN0IGNhbm9uaWNhbFRva2VuQ29udHJhY3RBZGRyZXNzID0gYWRkcmVzc2VzPy5bcmVhY3RBcHBOZXR3b3JrXT8uYnJpZGdlcz8uW3Rva2VuU3ltYm9sXT8uW2NoYWluU2x1Z10/LmwyQ2Fub25pY2FsVG9rZW4KCiAgICBjb25zdCBhbW91bnQ6IHN0cmluZyA9IGVyYzIwUG9zaXRpb25CYWxhbmNlCgogICAgLy8gYXBwcm92ZSBMUCB0b2tlbiBzcGVuZGluZwogICAgdHJ5IHsKICAgICAgY29uc3QgYXBwcm92ZVR4ID0gYXdhaXQgYXBwcm92ZVRva2VuKGNhbm9uaWNhbFRva2VuQ29udHJhY3RBZGRyZXNzLCBsMkFtbVdyYXBwZXJDb250cmFjdEFkZHJlc3MsIGFtb3VudCkKICAgICAgaWYgKHR5cGVvZiBhcHByb3ZlVHggIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgYXdhaXQgYXBwcm92ZVR4LndhaXQoKQogICAgICAgICAgLnRoZW4oKCkgPT4gewogICAgICAgICAgICBjb25zb2xlLmxvZygiQXBwcm92ZWQgc3VjY2Vzc2Z1bGx5IikKICAgICAgICAgIH0pCiAgICAgICAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcihlcnJvcikpCiAgICAgIH0KICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpCiAgICAgIHJldHVybgogICAgfQoKICAgIGNvbnN0IHJlY2lwaWVudCA9IGFkZHJlc3M/LmFkZHJlc3MKICAgIGxldCBib25kZXJGZWU6IHN0cmluZwogICAgY29uc3QgYW1vdW50T3V0TWluID0gYW1vdW50ICE9PSBudWxsID8gQmlnTnVtYmVyLmZyb20oYW1vdW50KS5tdWwoNzApLmRpdigxMDApLnRvU3RyaW5nKCkgOiAiMCIKICAgIGNvbnN0IGRlYWRsaW5lID0gZ2V0RGVhZGxpbmUoMTUpCiAgICBjb25zdCBkZXN0aW5hdGlvbkFtb3VudE91dE1pbiA9IGFtb3VudE91dE1pbgogICAgY29uc3QgZGVzdGluYXRpb25EZWFkbGluZSA9IGdldERlYWRsaW5lKDMwKQoKICAgIGNvbnN0IGRlc3RpbmF0aW9uTmV0d29ya1NsdWcgPSBuZXR3b3JrSWRUb1NsdWcoZGVzdGluYXRpb25OZXR3b3JrSWQpCgogICAgY29uc29sZS5sb2coYEdldHRpbmcgYm9uZGVyIGZlZSBmb3IgYnJpZGdpbmcgJHthbW91bnR9ICR7dG9rZW5TeW1ib2x9IGZyb20gJHtjaGFpblNsdWd9IHRvICR7ZGVzdGluYXRpb25OZXR3b3JrU2x1Z31gKQoKICAgIHRyeSB7CiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHBzOi8vYXBpLmhvcC5leGNoYW5nZS92MS9xdW90ZT9hbW91bnQ9JHthbW91bnR9JnRva2VuPSR7dG9rZW5TeW1ib2x9JmZyb21DaGFpbj0ke2NoYWluU2x1Z30mdG9DaGFpbj0ke2Rlc3RpbmF0aW9uTmV0d29ya1NsdWd9JnNsaXBwYWdlPTAuNWApCiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCkKICAKICAgICAgYm9uZGVyRmVlID0gZGF0YS5ib25kZXJGZWUKCiAgICAgIGlmIChyZWFjdEFwcE5ldHdvcmsgPT09ICJnb2VybGkiKSB7CiAgICAgICAgYm9uZGVyRmVlID0gQmlnTnVtYmVyLmZyb20oYm9uZGVyRmVlKS5tdWwoMTUpLmRpdigxMCkudG9TdHJpbmcoKSAvLyAxLjV4CiAgICAgIH0KCiAgICAgIGNvbnNvbGUubG9nKCJCb25kZXIgZmVlOiIsIGJvbmRlckZlZSkKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpCiAgICAgIHJldHVybgogICAgfQoKICAgIGxldCB2YWx1ZSA9ICIwIgogICAgaWYgKHRva2VuU3ltYm9sID09PSAiRVRIIiB8fCAodG9rZW5TeW1ib2wgPT09ICJEQUkiICYmIGNoYWluU2x1ZyA9PT0gImdub3NpcyIpKSB7CiAgICAgIHZhbHVlID0gYW1vdW50CiAgICB9CiAgICAKICAgIC8vIGJyaWRnZSB0b2tlbnMKICAgIHRyeSB7CiAgICAgIGNvbnN0IGJyaWRnZVR4ID0gYXdhaXQgbDJBbW1XcmFwcGVyQ29udHJhY3Quc3dhcEFuZFNlbmQoCiAgICAgICAgZGVzdGluYXRpb25OZXR3b3JrSWQsCiAgICAgICAgcmVjaXBpZW50LAogICAgICAgIGFtb3VudCwKICAgICAgICBib25kZXJGZWUsCiAgICAgICAgYW1vdW50T3V0TWluLAogICAgICAgIGRlYWRsaW5lLAogICAgICAgIGRlc3RpbmF0aW9uQW1vdW50T3V0TWluLAogICAgICAgIGRlc3RpbmF0aW9uRGVhZGxpbmUsCiAgICAgICAgewogICAgICAgICAgdmFsdWU6IHZhbHVlLAogICAgICAgICAgZ2FzTGltaXQ6IGdhc0xpbWl0CiAgICAgICAgfQogICAgICApCgogICAgICBzZXRCcmlkZ2VUeEhhc2goYnJpZGdlVHguaGFzaCkKCiAgICAgIGF3YWl0IGJyaWRnZVR4LndhaXQoKQogICAgICAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCJTdWNjZXNzZnVsbHkgc2VudCB0b2tlbnMiKSkKICAgICAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcihlcnJvcikpCiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICBjb25zb2xlLmVycm9yKGVycm9yKQogICAgfQogIH15EQAAAAAAAHkRAAAAAAAAAgAAACAgeBEAAAAAAAB4EQAAAAAAAAEAAAAKdxEAAAAAAAB3EQAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAexEAAAAAAADTGwAAAAAAAAAAAAAAAPC/"
				],
				[
					2145,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEsRAAAAAAAATBEAAAAAAAAAAAAATBEAAAAAAABQEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASxEAAAAAAABLEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2148,
					1,
					"insert",
					{
						"characters": "<B"
					},
					"AgAAAEsRAAAAAAAATBEAAAAAAAAAAAAATBEAAAAAAABNEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASxEAAAAAAABLEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2149,
					1,
					"insert",
					{
						"characters": "ridgeSection"
					},
					"DAAAAE0RAAAAAAAAThEAAAAAAAAAAAAAThEAAAAAAABPEQAAAAAAAAAAAABPEQAAAAAAAFARAAAAAAAAAAAAAFARAAAAAAAAUREAAAAAAAAAAAAAUREAAAAAAABSEQAAAAAAAAAAAABSEQAAAAAAAFMRAAAAAAAAAAAAAFMRAAAAAAAAVBEAAAAAAAAAAAAAVBEAAAAAAABVEQAAAAAAAAAAAABVEQAAAAAAAFYRAAAAAAAAAAAAAFYRAAAAAAAAVxEAAAAAAAAAAAAAVxEAAAAAAABYEQAAAAAAAAAAAABYEQAAAAAAAFkRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATREAAAAAAABNEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2150,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFkRAAAAAAAAWhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWREAAAAAAABZEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2151,
					1,
					"insert",
					{
						"characters": "/>"
					},
					"AgAAAFoRAAAAAAAAWxEAAAAAAAAAAAAAWxEAAAAAAABcEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWhEAAAAAAABaEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2156,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAO4FAAAAAAAA7wUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7gUAAAAAAADuBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2157,
					1,
					"paste",
					null,
					"AQAAAO8FAAAAAAAAOAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7wUAAAAAAADvBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2160,
					1,
					"insert",
					{
						"characters": "br"
					},
					"AwAAAPgFAAAAAAAA+QUAAAAAAAAAAAAA+QUAAAAAAAD5BQAAAAAAAAYAAABVbndyYXD5BQAAAAAAAPoFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gUAAAAAAAD4BQAAAAAAAAAAAAAAAPC/"
				],
				[
					2161,
					1,
					"left_delete",
					null,
					"AgAAAPkFAAAAAAAA+QUAAAAAAAABAAAAcvgFAAAAAAAA+AUAAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAA+gUAAAAAAAD6BQAAAAAAAAAAAAAAAPC/"
				],
				[
					2162,
					1,
					"insert",
					{
						"characters": "Bridge"
					},
					"BgAAAPgFAAAAAAAA+QUAAAAAAAAAAAAA+QUAAAAAAAD6BQAAAAAAAAAAAAD6BQAAAAAAAPsFAAAAAAAAAAAAAPsFAAAAAAAA/AUAAAAAAAAAAAAA/AUAAAAAAAD9BQAAAAAAAAAAAAD9BQAAAAAAAP4FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AUAAAAAAAD4BQAAAAAAAAAAAAAAAPC/"
				],
				[
					2165,
					1,
					"insert",
					{
						"characters": "Bridge"
					},
					"BwAAADEGAAAAAAAAMgYAAAAAAAAAAAAAMgYAAAAAAAAyBgAAAAAAAAYAAABVbndyYXAyBgAAAAAAADMGAAAAAAAAAAAAADMGAAAAAAAANAYAAAAAAAAAAAAANAYAAAAAAAA1BgAAAAAAAAAAAAA1BgAAAAAAADYGAAAAAAAAAAAAADYGAAAAAAAANwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwYAAAAAAAAxBgAAAAAAAAAAAAAAAPC/"
				],
				[
					2168,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKYRAAAAAAAApxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAphEAAAAAAACmEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2174,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKMRAAAAAAAApBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoxEAAAAAAACjEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2175,
					1,
					"paste",
					null,
					"AQAAAKQRAAAAAAAA2xEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApBEAAAAAAACkEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2176,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANsRAAAAAAAA3BEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2xEAAAAAAADbEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2199,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANsRAAAAAAAA3BEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2xEAAAAAAADbEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2200,
					1,
					"paste",
					null,
					"AQAAANwRAAAAAAAAixIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3BEAAAAAAADcEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2217,
					1,
					"left_delete",
					null,
					"AgAAACIDAAAAAAAAIgMAAAAAAABSAAAAaW1wb3J0IEwyX0FtbVdyYXBwZXJBYmkgZnJvbSAnQGhvcC1wcm90b2NvbC9jb3JlL2FiaS9nZW5lcmF0ZWQvTDJfQW1tV3JhcHBlci5qc29uJyEDAAAAAAAAIQMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAdAMAAAAAAAAiAwAAAAAAAAAAAAAAAPC/"
				],
				[
					2228,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADgSAAAAAAAAORIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOBIAAAAAAAA4EgAAAAAAAAAAAAAAAPC/"
				],
				[
					2229,
					1,
					"paste",
					null,
					"AQAAADkSAAAAAAAAahIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAORIAAAAAAAA5EgAAAAAAAAAAAAAAAPC/"
				],
				[
					2232,
					1,
					"insert",
					{
						"characters": "ERC"
					},
					"BAAAADkSAAAAAAAAOhIAAAAAAAAAAAAAOhIAAAAAAAA6EgAAAAAAAAYAAABzZXRFUkM6EgAAAAAAADsSAAAAAAAAAAAAADsSAAAAAAAAPBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPxIAAAAAAAA5EgAAAAAAAAAAAAAAAPC/"
				],
				[
					2233,
					1,
					"left_delete",
					null,
					"AwAAADsSAAAAAAAAOxIAAAAAAAABAAAAQzoSAAAAAAAAOhIAAAAAAAABAAAAUjkSAAAAAAAAORIAAAAAAAABAAAARQ",
					"AQAAAAAAAAABAAAAPBIAAAAAAAA8EgAAAAAAAAAAAAAAAPC/"
				],
				[
					2234,
					1,
					"insert",
					{
						"characters": "erc"
					},
					"AwAAADkSAAAAAAAAOhIAAAAAAAAAAAAAOhIAAAAAAAA7EgAAAAAAAAAAAAA7EgAAAAAAADwSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAORIAAAAAAAA5EgAAAAAAAAAAAAAAAPC/"
				],
				[
					2239,
					1,
					"insert",
					{
						"characters": "erc"
					},
					"BAAAAE8SAAAAAAAAUBIAAAAAAAAAAAAAUBIAAAAAAABQEgAAAAAAAAYAAABzZXRFUkNQEgAAAAAAAFESAAAAAAAAAAAAAFESAAAAAAAAUhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVRIAAAAAAABPEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2268,
					1,
					"left_delete",
					null,
					"AgAAAFsPAAAAAAAAWw8AAAAAAAAbAAAAYXBwcm92ZVRva2VuPXthcHByb3ZlVG9rZW59Wg8AAAAAAABaDwAAAAAAAAEAAAAg",
					"AQAAAAAAAAABAAAAdg8AAAAAAABbDwAAAAAAAAAAAAAAAPC/"
				],
				[
					2269,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFoPAAAAAAAAWw8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWg8AAAAAAABaDwAAAAAAAAAAAAAAAPC/"
				],
				[
					2270,
					1,
					"paste",
					null,
					"AQAAAFsPAAAAAAAAdg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWw8AAAAAAABbDwAAAAAAAAAAAAAAAPC/"
				],
				[
					2279,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGQSAAAAAAAAZRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZBIAAAAAAABkEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2280,
					1,
					"paste",
					null,
					"AQAAAGUSAAAAAAAAgBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZRIAAAAAAABlEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2284,
					1,
					"left_delete",
					null,
					"AgAAAFsPAAAAAAAAWw8AAAAAAAAbAAAAYXBwcm92ZVRva2VuPXthcHByb3ZlVG9rZW59Wg8AAAAAAABaDwAAAAAAAAEAAAAg",
					"AQAAAAAAAAABAAAAdg8AAAAAAABbDwAAAAAAAAAAAAAAAPC/"
				],
				[
					2287,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAAQAAAAAAAAARAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAPC/"
				],
				[
					2288,
					1,
					"paste",
					null,
					"AQAAAAEQAAAAAAAAHBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAARAAAAAAAAABEAAAAAAAAAAAAAAAAPC/"
				],
				[
					2294,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGQSAAAAAAAAZRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZBIAAAAAAABkEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2295,
					1,
					"paste",
					null,
					"AQAAAGUSAAAAAAAAfhIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZRIAAAAAAABlEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2299,
					1,
					"left_delete",
					null,
					"AgAAAFsPAAAAAAAAWw8AAAAAAAAZAAAAZ2V0RGVhZGxpbmU9e2dldERlYWRsaW5lfVoPAAAAAAAAWg8AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAdA8AAAAAAABbDwAAAAAAAAAAAAAAAPC/"
				],
				[
					2302,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOYPAAAAAAAA5w8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5g8AAAAAAADmDwAAAAAAAAAAAAAAAPC/"
				],
				[
					2303,
					1,
					"paste",
					null,
					"AQAAAOcPAAAAAAAAABAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5w8AAAAAAADnDwAAAAAAAAAAAAAAAPC/"
				],
				[
					2331,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANoRAAAAAAAA2xEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2hEAAAAAAADaEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2332,
					1,
					"paste",
					null,
					"AQAAANsRAAAAAAAA7xEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2xEAAAAAAADbEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2333,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAO8RAAAAAAAA8BEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7xEAAAAAAADvEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2334,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPARAAAAAAAA8hEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8BEAAAAAAADwEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2335,
					1,
					"paste",
					null,
					"AQAAAPERAAAAAAAABRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8REAAAAAAADxEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2338,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJASAAAAAAAAkRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkBIAAAAAAACQEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2339,
					1,
					"paste",
					null,
					"AQAAAJESAAAAAAAAoBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkRIAAAAAAACREgAAAAAAAAAAAAAAAPC/"
				],
				[
					2340,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAKASAAAAAAAAoRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoBIAAAAAAACgEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2341,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAKESAAAAAAAAoxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoRIAAAAAAAChEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2342,
					1,
					"paste",
					null,
					"AQAAAKISAAAAAAAAsRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAohIAAAAAAACiEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2387,
					1,
					"left_delete",
					null,
					"AQAAAFcDAAAAAAAAVwMAAAAAAAAtAAAACmltcG9ydCB7IGlzRGFya01vZGUgfSBmcm9tICdzcmMvdGhlbWUvdGhlbWUn",
					"AQAAAAAAAAABAAAAhAMAAAAAAABXAwAAAAAAAAAAAAAAAPC/"
				],
				[
					2409,
					1,
					"left_delete",
					null,
					"AQAAAFcDAAAAAAAAVwMAAAAAAAA9AAAACmltcG9ydCB7IG1ha2VTdHlsZXMsIFRoZW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJw",
					"AQAAAAAAAAABAAAAlAMAAAAAAABXAwAAAAAAAAAAAAAAAPC/"
				],
				[
					2412,
					1,
					"left_delete",
					null,
					"AgAAACIDAAAAAAAAIgMAAAAAAAA0AAAACi8vIGltcG9ydCBUcmFuc2FjdGlvbiBmcm9tICdzcmMvbW9kZWxzL1RyYW5zYWN0aW9uJyEDAAAAAAAAIQMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAVgMAAAAAAAAiAwAAAAAAAAAAAAAAAPC/"
				],
				[
					2415,
					1,
					"left_delete",
					null,
					"AQAAADIAAAAAAAAAMgAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAMwAAAAAAAAAzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2418,
					1,
					"left_delete",
					null,
					"AQAAAFsCAAAAAAAAWwIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAXAIAAAAAAABcAgAAAAAAAAAAAAAAAPC/"
				],
				[
					2423,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMMRAAAAAAAAxBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwxEAAAAAAADDEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2424,
					1,
					"paste",
					null,
					"AQAAAMQRAAAAAAAA2BEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxBEAAAAAAADEEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2425,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAANgRAAAAAAAA2REAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2BEAAAAAAADYEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2426,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAANkRAAAAAAAA2xEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2REAAAAAAADZEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2427,
					1,
					"paste",
					null,
					"AQAAANoRAAAAAAAA7hEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2hEAAAAAAADaEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2436,
					1,
					"insert",
					{
						"characters": ".split"
					},
					"BgAAAMQ6AAAAAAAAxToAAAAAAAAAAAAAxToAAAAAAADGOgAAAAAAAAAAAADGOgAAAAAAAMc6AAAAAAAAAAAAAMc6AAAAAAAAyDoAAAAAAAAAAAAAyDoAAAAAAADJOgAAAAAAAAAAAADJOgAAAAAAAMo6AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxDoAAAAAAADEOgAAAAAAAAAAAAAAAPC/"
				],
				[
					2437,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMo6AAAAAAAAzDoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyjoAAAAAAADKOgAAAAAAAAAAAAAAAPC/"
				],
				[
					2438,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAMs6AAAAAAAAzToAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyzoAAAAAAADLOgAAAAAAAAAAAAAAAPC/"
				],
				[
					2439,
					1,
					"paste",
					null,
					"AQAAAMw6AAAAAAAA1DoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzDoAAAAAAADMOgAAAAAAAAAAAAAAAPC/"
				],
				[
					2441,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAANY6AAAAAAAA2DoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1joAAAAAAADWOgAAAAAAAAAAAAAAAPC/"
				],
				[
					2442,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAANc6AAAAAAAA2DoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1zoAAAAAAADXOgAAAAAAAAAAAAAAAPC/"
				],
				[
					2477,
					1,
					"insert",
					{
						"characters": "\n\nconsole.log"
					},
					"EAAAAE01AAAAAAAATjUAAAAAAAAAAAAATjUAAAAAAABSNQAAAAAAAAAAAABSNQAAAAAAAFM1AAAAAAAAAAAAAFM1AAAAAAAAVzUAAAAAAAAAAAAATjUAAAAAAABONQAAAAAAAAQAAAAgICAgUzUAAAAAAABUNQAAAAAAAAAAAABUNQAAAAAAAFU1AAAAAAAAAAAAAFU1AAAAAAAAVjUAAAAAAAAAAAAAVjUAAAAAAABXNQAAAAAAAAAAAABXNQAAAAAAAFg1AAAAAAAAAAAAAFg1AAAAAAAAWTUAAAAAAAAAAAAAWTUAAAAAAABaNQAAAAAAAAAAAABaNQAAAAAAAFs1AAAAAAAAAAAAAFs1AAAAAAAAXDUAAAAAAAAAAAAAXDUAAAAAAABdNQAAAAAAAAAAAABdNQAAAAAAAF41AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATTUAAAAAAABNNQAAAAAAAAAAAAAAAPC/"
				],
				[
					2478,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAF41AAAAAAAAYDUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXjUAAAAAAABeNQAAAAAAAAAAAAAAAPC/"
				],
				[
					2479,
					1,
					"paste",
					null,
					"AQAAAF81AAAAAAAAcTUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXzUAAAAAAABfNQAAAAAAAAAAAAAAAPC/"
				],
				[
					2480,
					1,
					"insert",
					{
						"characters": ".tost"
					},
					"BQAAAHE1AAAAAAAAcjUAAAAAAAAAAAAAcjUAAAAAAABzNQAAAAAAAAAAAABzNQAAAAAAAHQ1AAAAAAAAAAAAAHQ1AAAAAAAAdTUAAAAAAAAAAAAAdTUAAAAAAAB2NQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcTUAAAAAAABxNQAAAAAAAAAAAAAAAPC/"
				],
				[
					2481,
					2,
					"left_delete",
					null,
					"AgAAAHU1AAAAAAAAdTUAAAAAAAABAAAAdHQ1AAAAAAAAdDUAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAdjUAAAAAAAB2NQAAAAAAAAAAAAAAAPC/"
				],
				[
					2482,
					1,
					"insert",
					{
						"characters": "Ss"
					},
					"AgAAAHQ1AAAAAAAAdTUAAAAAAAAAAAAAdTUAAAAAAAB2NQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdDUAAAAAAAB0NQAAAAAAAAAAAAAAAPC/"
				],
				[
					2483,
					1,
					"left_delete",
					null,
					"AQAAAHU1AAAAAAAAdTUAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAdjUAAAAAAAB2NQAAAAAAAAAAAAAAAPC/"
				],
				[
					2484,
					1,
					"insert",
					{
						"characters": "tring"
					},
					"BQAAAHU1AAAAAAAAdjUAAAAAAAAAAAAAdjUAAAAAAAB3NQAAAAAAAAAAAAB3NQAAAAAAAHg1AAAAAAAAAAAAAHg1AAAAAAAAeTUAAAAAAAAAAAAAeTUAAAAAAAB6NQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdTUAAAAAAAB1NQAAAAAAAAAAAAAAAPC/"
				],
				[
					2485,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHo1AAAAAAAAfDUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAejUAAAAAAAB6NQAAAAAAAAAAAAAAAPC/"
				],
				[
					2487,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHw1AAAAAAAAfTUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfDUAAAAAAAB8NQAAAAAAAAAAAAAAAPC/"
				],
				[
					2488,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH01AAAAAAAAfjUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfTUAAAAAAAB9NQAAAAAAAAAAAAAAAPC/"
				],
				[
					2498,
					1,
					"paste",
					null,
					"AQAAAH41AAAAAAAAhjUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfjUAAAAAAAB+NQAAAAAAAAAAAAAAAPC/"
				],
				[
					2499,
					1,
					"insert",
					{
						"characters": ".toString"
					},
					"CQAAAIY1AAAAAAAAhzUAAAAAAAAAAAAAhzUAAAAAAACINQAAAAAAAAAAAACINQAAAAAAAIk1AAAAAAAAAAAAAIk1AAAAAAAAijUAAAAAAAAAAAAAijUAAAAAAACLNQAAAAAAAAAAAACLNQAAAAAAAIw1AAAAAAAAAAAAAIw1AAAAAAAAjTUAAAAAAAAAAAAAjTUAAAAAAACONQAAAAAAAAAAAACONQAAAAAAAI81AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhjUAAAAAAACGNQAAAAAAAAAAAAAAAPC/"
				],
				[
					2500,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAI81AAAAAAAAkTUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjzUAAAAAAACPNQAAAAAAAAAAAAAAAPC/"
				],
				[
					2535,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAH0SAAAAAAAAfhIAAAAAAAAAAAAAfhIAAAAAAACCEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfRIAAAAAAAB9EgAAAAAAAAAAAAAAAPC/"
				],
				[
					2538,
					1,
					"insert",
					{
						"characters": "<Bridgge"
					},
					"CAAAAH0SAAAAAAAAfhIAAAAAAAAAAAAAfhIAAAAAAAB/EgAAAAAAAAAAAAB/EgAAAAAAAIASAAAAAAAAAAAAAIASAAAAAAAAgRIAAAAAAAAAAAAAgRIAAAAAAACCEgAAAAAAAAAAAACCEgAAAAAAAIMSAAAAAAAAAAAAAIMSAAAAAAAAhBIAAAAAAAAAAAAAhBIAAAAAAACFEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfRIAAAAAAAB9EgAAAAAAAAAAAAAAAPC/"
				],
				[
					2539,
					2,
					"left_delete",
					null,
					"AgAAAIQSAAAAAAAAhBIAAAAAAAABAAAAZYMSAAAAAAAAgxIAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAAhRIAAAAAAACFEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2540,
					1,
					"insert",
					{
						"characters": "ge"
					},
					"AgAAAIMSAAAAAAAAhBIAAAAAAAAAAAAAhBIAAAAAAACFEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgxIAAAAAAACDEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2541,
					2,
					"left_delete",
					null,
					"AgAAAIQSAAAAAAAAhBIAAAAAAAABAAAAZYMSAAAAAAAAgxIAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAAhRIAAAAAAACFEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2542,
					1,
					"insert",
					{
						"characters": "eDataSe"
					},
					"BwAAAIMSAAAAAAAAhBIAAAAAAAAAAAAAhBIAAAAAAACFEgAAAAAAAAAAAACFEgAAAAAAAIYSAAAAAAAAAAAAAIYSAAAAAAAAhxIAAAAAAAAAAAAAhxIAAAAAAACIEgAAAAAAAAAAAACIEgAAAAAAAIkSAAAAAAAAAAAAAIkSAAAAAAAAihIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgxIAAAAAAACDEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2543,
					1,
					"insert",
					{
						"characters": "ction"
					},
					"BQAAAIoSAAAAAAAAixIAAAAAAAAAAAAAixIAAAAAAACMEgAAAAAAAAAAAACMEgAAAAAAAI0SAAAAAAAAAAAAAI0SAAAAAAAAjhIAAAAAAAAAAAAAjhIAAAAAAACPEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAihIAAAAAAACKEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2544,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAI8SAAAAAAAAkBIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjxIAAAAAAACPEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2550,
					1,
					"paste",
					null,
					"AQAAAJASAAAAAAAAxxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkBIAAAAAAACQEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2551,
					1,
					"insert",
					{
						"characters": " />"
					},
					"AwAAAMcSAAAAAAAAyBIAAAAAAAAAAAAAyBIAAAAAAADJEgAAAAAAAAAAAADJEgAAAAAAAMoSAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxxIAAAAAAADHEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2552,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAMoSAAAAAAAAyxIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyhIAAAAAAADKEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2560,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEQFAAAAAAAARQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAUAAAAAAABEBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2561,
					1,
					"paste",
					null,
					"AQAAAEUFAAAAAAAAVgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQUAAAAAAABFBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2567,
					1,
					"paste",
					null,
					"AQAAAEUFAAAAAAAAXQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQUAAAAAAABFBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2568,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF0FAAAAAAAAXgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQUAAAAAAABdBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2578,
					1,
					"paste",
					null,
					"AgAAAE4FAAAAAAAAXwUAAAAAAAAAAAAAXwUAAAAAAABfBQAAAAAAAA0AAABCcmlkZ2VTZWN0aW9u",
					"AQAAAAAAAAABAAAATgUAAAAAAABbBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2586,
					1,
					"paste",
					null,
					"AQAAAGIFAAAAAAAAiwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYgUAAAAAAABiBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2587,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIsFAAAAAAAAjAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwUAAAAAAACLBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2597,
					1,
					"left_delete",
					null,
					"AQAAAIsFAAAAAAAAiwUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAjAUAAAAAAACMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2600,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAJwFAAAAAAAAnQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAUAAAAAAACcBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2610,
					1,
					"left_delete",
					null,
					"AQAAAJUFAAAAAAAAlQUAAAAAAAAHAAAAU2VjdGlvbg",
					"AQAAAAAAAAABAAAAnAUAAAAAAACVBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2618,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABkTAAAAAAAAGhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGRMAAAAAAAAZEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2619,
					1,
					"paste",
					null,
					"AQAAABoTAAAAAAAAOxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGhMAAAAAAAAaEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2622,
					1,
					"insert",
					{
						"characters": "provider"
					},
					"CAAAABoTAAAAAAAAGxMAAAAAAAAAAAAAGxMAAAAAAAAcEwAAAAAAAAAAAAAcEwAAAAAAAB0TAAAAAAAAAAAAAB0TAAAAAAAAHhMAAAAAAAAAAAAAHhMAAAAAAAAfEwAAAAAAAAAAAAAfEwAAAAAAACATAAAAAAAAAAAAACATAAAAAAAAIRMAAAAAAAAAAAAAIRMAAAAAAAAiEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGhMAAAAAAAAaEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2623,
					1,
					"insert",
					{
						"characters": "={pro"
					},
					"BQAAACITAAAAAAAAIxMAAAAAAAAAAAAAIxMAAAAAAAAkEwAAAAAAAAAAAAAkEwAAAAAAACUTAAAAAAAAAAAAACUTAAAAAAAAJhMAAAAAAAAAAAAAJhMAAAAAAAAnEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIhMAAAAAAAAiEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2624,
					1,
					"insert",
					{
						"characters": "vider}"
					},
					"BgAAACcTAAAAAAAAKBMAAAAAAAAAAAAAKBMAAAAAAAApEwAAAAAAAAAAAAApEwAAAAAAACoTAAAAAAAAAAAAACoTAAAAAAAAKxMAAAAAAAAAAAAAKxMAAAAAAAAsEwAAAAAAAAAAAAAsEwAAAAAAAC0TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJxMAAAAAAAAnEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2625,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAC0TAAAAAAAALhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALRMAAAAAAAAtEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2646,
					1,
					"paste",
					null,
					"AgAAAC4TAAAAAAAAOBMAAAAAAAAAAAAAOBMAAAAAAAA4EwAAAAAAAA8AAABzZXRCcmlkZ2VUeEhhc2g",
					"AQAAAAAAAAABAAAALhMAAAAAAAA9EwAAAAAAAAAAAAAAAPC/"
				],
				[
					2651,
					1,
					"paste",
					null,
					"AgAAADoTAAAAAAAARBMAAAAAAAAAAAAARBMAAAAAAABEEwAAAAAAAA8AAABzZXRCcmlkZ2VUeEhhc2g",
					"AQAAAAAAAAABAAAAOhMAAAAAAABJEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2654,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEUTAAAAAAAARhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARRMAAAAAAABFEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2655,
					1,
					"paste",
					null,
					"AQAAAEYTAAAAAAAAZhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARhMAAAAAAABGEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2656,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAGYTAAAAAAAAZxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZhMAAAAAAABmEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2657,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGcTAAAAAAAAaRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZxMAAAAAAABnEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2658,
					1,
					"paste",
					null,
					"AQAAAGgTAAAAAAAAiBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaBMAAAAAAABoEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2677,
					2,
					"left_delete",
					null,
					"AgAAAAkYAAAAAAAACRgAAAAAAADOAQAACiAgYXN5bmMgZnVuY3Rpb24gc2V0QnJpZGdlZFRva2VuRGF0YSgpIHsKICAgIGNvbnN0IGJvbmRUeFJlY2VpcHQgPSBhd2FpdCBwcm92aWRlcj8uZ2V0VHJhbnNhY3Rpb25SZWNlaXB0KGJvbmRUeEhhc2gpCiAgICBsZXQgdG9rZW5zUmVjZWl2ZWQ6IHN0cmluZwoKICAgIGlmICh0eXBlb2YgYm9uZFR4UmVjZWlwdD8ubG9ncyAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgdG9rZW5zUmVjZWl2ZWQgPSBwYXJzZUludChib25kVHhSZWNlaXB0LmxvZ3NbMTFdLmRhdGEsIDE2KS50b1N0cmluZygpCiAgICAgIGNvbnNvbGUubG9nKCJCcmlkZ2VkIHRva2VuIGJhbGFuY2U6IiwgdG9rZW5zUmVjZWl2ZWQpCiAgICAgIHNldE51bWJlck9mQnJpZGdlZFRva2Vuc1JlY2VpdmVkKHRva2Vuc1JlY2VpdmVkKQogICAgfSBlbHNlIHsKICAgICAgY29uc29sZS5sb2coIkNvdWxkIG5vdCBnZXQgYm9uZCBkYXRhIikKICAgIH0KICB9CBgAAAAAAAAIGAAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAA1xkAAAAAAAAJGAAAAAAAAAAAAAAAAPC/"
				],
				[
					2681,
					4,
					"left_delete",
					null,
					"BAAAAPQXAAAAAAAA9BcAAAAAAAAUAAAALyogQ0hBTkdFIE5FVFdPUksgKi/yFwAAAAAAAPIXAAAAAAAAAgAAACAg8RcAAAAAAADxFwAAAAAAAAEAAAAK8BcAAAAAAADwFwAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAACBgAAAAAAAD0FwAAAAAAAAAAAAAAAPC/"
				],
				[
					2698,
					1,
					"paste",
					null,
					"AgAAAE4FAAAAAAAAXAUAAAAAAAAAAAAAXAUAAAAAAABcBQAAAAAAABEAAABCcmlkZ2VEYXRhU2VjdGlvbg",
					"AQAAAAAAAAABAAAATgUAAAAAAABfBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2699,
					1,
					"insert",
					{
						"characters": "Section"
					},
					"BwAAAFwFAAAAAAAAXQUAAAAAAAAAAAAAXQUAAAAAAABeBQAAAAAAAAAAAABeBQAAAAAAAF8FAAAAAAAAAAAAAF8FAAAAAAAAYAUAAAAAAAAAAAAAYAUAAAAAAABhBQAAAAAAAAAAAABhBQAAAAAAAGIFAAAAAAAAAAAAAGIFAAAAAAAAYwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAUAAAAAAABcBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2704,
					1,
					"paste",
					null,
					"AgAAAI8FAAAAAAAAnQUAAAAAAAAAAAAAnQUAAAAAAACdBQAAAAAAAAoAAABCcmlkZ2VEYXRh",
					"AQAAAAAAAAABAAAAjwUAAAAAAACZBQAAAAAAAAAAAAAAAPC/"
				],
				[
					2724,
					1,
					"paste",
					null,
					"AgAAANgSAAAAAAAA7RIAAAAAAAAAAAAA7RIAAAAAAADtEgAAAAAAABEAAABCcmlkZ2VEYXRhU2VjdGlvbg",
					"AQAAAAAAAAABAAAA2BIAAAAAAADpEgAAAAAAAAAAAAAAAPC/"
				],
				[
					2743,
					1,
					"left_delete",
					null,
					"AQAAAKQMAAAAAAAApAwAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAApQwAAAAAAAClDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2744,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAAKQMAAAAAAAApQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAwAAAAAAACkDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2775,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADkTAAAAAAAAOhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAORMAAAAAAAA5EwAAAAAAAAAAAAAAAPC/"
				],
				[
					2776,
					1,
					"paste",
					null,
					"AQAAADoTAAAAAAAARxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOhMAAAAAAAA6EwAAAAAAAAAAAAAAAPC/"
				],
				[
					2777,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAEcTAAAAAAAASBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARxMAAAAAAABHEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2778,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAEgTAAAAAAAAShMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASBMAAAAAAABIEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2779,
					1,
					"paste",
					null,
					"AQAAAEkTAAAAAAAAVhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASRMAAAAAAABJEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2787,
					1,
					"paste",
					null,
					"AQAAADoTAAAAAAAAThMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOhMAAAAAAAA6EwAAAAAAAAAAAAAAAPC/"
				],
				[
					2788,
					1,
					"insert",
					{
						"characters": "={"
					},
					"AgAAAE4TAAAAAAAATxMAAAAAAAAAAAAATxMAAAAAAABQEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAThMAAAAAAABOEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2789,
					1,
					"paste",
					null,
					"AQAAAFATAAAAAAAAZBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUBMAAAAAAABQEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2790,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAGQTAAAAAAAAZRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZBMAAAAAAABkEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2791,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGUTAAAAAAAAZhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZRMAAAAAAABlEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2800,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADkTAAAAAAAAOhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAORMAAAAAAAA5EwAAAAAAAAAAAAAAAPC/"
				],
				[
					2801,
					1,
					"paste",
					null,
					"AQAAADoTAAAAAAAATBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOhMAAAAAAAA6EwAAAAAAAAAAAAAAAPC/"
				],
				[
					2802,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAEwTAAAAAAAATRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATBMAAAAAAABMEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2803,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAE0TAAAAAAAATxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATRMAAAAAAABNEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2804,
					1,
					"paste",
					null,
					"AQAAAE4TAAAAAAAAYBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAThMAAAAAAABOEwAAAAAAAAAAAAAAAPC/"
				],
				[
					2864,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIMrAAAAAAAAhCsAAAAAAAAAAAAAhCsAAAAAAACKKwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgysAAAAAAACDKwAAAAAAAAAAAAAAAPC/"
				],
				[
					2865,
					1,
					"paste",
					null,
					"AQAAAIorAAAAAAAAtysAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiisAAAAAAACKKwAAAAAAAAAAAAAAAPC/"
				],
				[
					2873,
					1,
					"paste",
					null,
					"AgAAAJorAAAAAAAAnysAAAAAAAAAAAAAnysAAAAAAACfKwAAAAAAABwAAAAiRmFpbGVkIHRvIGZldGNoIHVzZXIgZGF0YS4i",
					"AQAAAAAAAAABAAAAtisAAAAAAACaKwAAAAAAAAAAAAAAAPC/"
				],
				[
					2876,
					1,
					"insert",
					{
						"characters": "await"
					},
					"BQAAAJgqAAAAAAAAmSoAAAAAAAAAAAAAmSoAAAAAAACaKgAAAAAAAAAAAACaKgAAAAAAAJsqAAAAAAAAAAAAAJsqAAAAAAAAnCoAAAAAAAAAAAAAnCoAAAAAAACdKgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmCoAAAAAAACYKgAAAAAAAAAAAAAAAPC/"
				],
				[
					2877,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ0qAAAAAAAAnioAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnSoAAAAAAACdKgAAAAAAAAAAAAAAAPC/"
				],
				[
					2882,
					1,
					"left_delete",
					null,
					"AQAAAKArAAAAAAAAoCsAAAAAAAAFAAAAZXJyb3I",
					"AQAAAAAAAAABAAAAoCsAAAAAAAClKwAAAAAAAAAAAAAAAPC/"
				],
				[
					2888,
					1,
					"left_delete",
					null,
					"AQAAAIkrAAAAAAAAiSsAAAAAAAAYAAAACiAgICAgIHRocm93IG5ldyBFcnJvcigp",
					"AQAAAAAAAAABAAAAoSsAAAAAAACJKwAAAAAAAAAAAAAAAPC/"
				],
				[
					2895,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CAAAAFgrAAAAAAAAWSsAAAAAAAAAAAAAWSsAAAAAAABfKwAAAAAAAAAAAABfKwAAAAAAAGArAAAAAAAAAAAAAGArAAAAAAAAYSsAAAAAAAAAAAAAYSsAAAAAAABiKwAAAAAAAAAAAABiKwAAAAAAAGMrAAAAAAAAAAAAAGMrAAAAAAAAZCsAAAAAAAAAAAAAZCsAAAAAAABlKwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWCsAAAAAAABYKwAAAAAAAAAAAAAAAPC/"
				],
				[
					2900,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFgrAAAAAAAAWSsAAAAAAAAAAAAAWSsAAAAAAABfKwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWCsAAAAAAABYKwAAAAAAAAAAAAAAAPC/"
				],
				[
					2917,
					1,
					"left_delete",
					null,
					"AgAAAKQMAAAAAAAApAwAAAAAAAABAAAANFgrAAAAAAAAWCsAAAAAAAAGAAAAICAgICAg",
					"AQAAAAAAAAABAAAApQwAAAAAAAClDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2918,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAKQMAAAAAAAApQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAwAAAAAAACkDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2942,
					1,
					"reindent",
					null,
					"AQAAAFkrAAAAAAAAXysAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWSsAAAAAAABZKwAAAAAAAAAAAAAAAPC/"
				],
				[
					2943,
					4,
					"left_delete",
					null,
					"BAAAAF0rAAAAAAAAXSsAAAAAAAACAAAAICBbKwAAAAAAAFsrAAAAAAAAAgAAACAgWSsAAAAAAABZKwAAAAAAAAIAAAAgIFgrAAAAAAAAWCsAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAXysAAAAAAABfKwAAAAAAAAAAAAAAAPC/"
				],
				[
					2946,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGUrAAAAAAAAZisAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZSsAAAAAAABlKwAAAAAAAAAAAAAAAPC/"
				],
				[
					2949,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CAAAAJcrAAAAAAAAmCsAAAAAAAAAAAAAmCsAAAAAAACeKwAAAAAAAAAAAACeKwAAAAAAAJ8rAAAAAAAAAAAAAJ8rAAAAAAAAoCsAAAAAAAAAAAAAoCsAAAAAAAChKwAAAAAAAAAAAAChKwAAAAAAAKIrAAAAAAAAAAAAAKIrAAAAAAAAoysAAAAAAAAAAAAAoysAAAAAAACkKwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlysAAAAAAACXKwAAAAAAAAAAAAAAAPC/"
				],
				[
					2950,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAKQrAAAAAAAApSsAAAAAAAAAAAAApSsAAAAAAACmKwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApCsAAAAAAACkKwAAAAAAAAAAAAAAAPC/"
				],
				[
					2951,
					1,
					"left_delete",
					null,
					"AQAAAKUrAAAAAAAApSsAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAApisAAAAAAACmKwAAAAAAAAAAAAAAAPC/"
				],
				[
					2952,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAKUrAAAAAAAApisAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApSsAAAAAAAClKwAAAAAAAAAAAAAAAPC/"
				],
				[
					2964,
					1,
					"paste",
					null,
					"AQAAAGYrAAAAAAAAcCsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZisAAAAAAABmKwAAAAAAAAAAAAAAAPC/"
				],
				[
					2974,
					1,
					"paste",
					null,
					"AgAAALYqAAAAAAAAwCoAAAAAAAAAAAAAwCoAAAAAAADAKgAAAAAAABQAAABkZXN0aW5hdGlvbk5ldHdvcmtJZA",
					"AQAAAAAAAAABAAAAtioAAAAAAADKKgAAAAAAAAAAAAAAAPC/"
				],
				[
					2981,
					1,
					"insert",
					{
						"characters": "number"
					},
					"BwAAAIAqAAAAAAAAgSoAAAAAAAAAAAAAgSoAAAAAAACBKgAAAAAAAAQAAAB2b2lkgSoAAAAAAACCKgAAAAAAAAAAAACCKgAAAAAAAIMqAAAAAAAAAAAAAIMqAAAAAAAAhCoAAAAAAAAAAAAAhCoAAAAAAACFKgAAAAAAAAAAAACFKgAAAAAAAIYqAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgCoAAAAAAACEKgAAAAAAAAAAAAAAAPC/"
				],
				[
					2986,
					1,
					"left_delete",
					null,
					"AQAAAKQMAAAAAAAApAwAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAApQwAAAAAAAClDAAAAAAAAAAAAAAAAPC/"
				],
				[
					2987,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAAKQMAAAAAAAApQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAwAAAAAAACkDAAAAAAAAAAAAAAAAPC/"
				],
				[
					3014,
					2,
					"left_delete",
					null,
					"AgAAAMQqAAAAAAAAxCoAAAAAAACMAAAAICAgICAgY29uc3QgZXZlbnQgPSB7IHRhcmdldDogeyB2YWx1ZTogbmV0d29ya0lkVG9TbHVnKG5ld0NoYWluSWQpIH0gfQogICAgICBzZWxlY3RTb3VyY2VOZXR3b3JrKGV2ZW50IGFzIFJlYWN0LkNoYW5nZUV2ZW50PHsgdmFsdWU6IGFueSB9PinDKgAAAAAAAMMqAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAUCsAAAAAAADEKgAAAAAAAAAAAAAAAPC/"
				],
				[
					3017,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAJMqAAAAAAAAlCoAAAAAAAAAAAAAlCoAAAAAAACYKgAAAAAAAAAAAACYKgAAAAAAAJoqAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkyoAAAAAAACTKgAAAAAAAAAAAAAAAPC/"
				],
				[
					3018,
					1,
					"paste",
					null,
					"AQAAAJoqAAAAAAAAJisAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmioAAAAAAACaKgAAAAAAAAAAAAAAAPC/"
				],
				[
					3021,
					3,
					"left_delete",
					null,
					"AwAAAJ4qAAAAAAAAnioAAAAAAAACAAAAICCcKgAAAAAAAJwqAAAAAAAAAgAAACAgmioAAAAAAACaKgAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAoCoAAAAAAACgKgAAAAAAAAAAAAAAAPC/"
				],
				[
					3024,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAACcrAAAAAAAAKCsAAAAAAAAAAAAAKCsAAAAAAAApKwAAAAAAAAAAAAApKwAAAAAAACorAAAAAAAAAAAAACorAAAAAAAAKysAAAAAAAAAAAAAKysAAAAAAAAsKwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJysAAAAAAAAnKwAAAAAAAAAAAAAAAPC/"
				],
				[
					3025,
					1,
					"insert",
					{
						"characters": " Net"
					},
					"BAAAACwrAAAAAAAALSsAAAAAAAAAAAAALSsAAAAAAAAuKwAAAAAAAAAAAAAuKwAAAAAAAC8rAAAAAAAAAAAAAC8rAAAAAAAAMCsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALCsAAAAAAAAsKwAAAAAAAAAAAAAAAPC/"
				],
				[
					3026,
					3,
					"left_delete",
					null,
					"AwAAAC8rAAAAAAAALysAAAAAAAABAAAAdC4rAAAAAAAALisAAAAAAAABAAAAZS0rAAAAAAAALSsAAAAAAAABAAAATg",
					"AQAAAAAAAAABAAAAMCsAAAAAAAAwKwAAAAAAAAAAAAAAAPC/"
				],
				[
					3027,
					1,
					"insert",
					{
						"characters": "networkCheck"
					},
					"DAAAAC0rAAAAAAAALisAAAAAAAAAAAAALisAAAAAAAAvKwAAAAAAAAAAAAAvKwAAAAAAADArAAAAAAAAAAAAADArAAAAAAAAMSsAAAAAAAAAAAAAMSsAAAAAAAAyKwAAAAAAAAAAAAAyKwAAAAAAADMrAAAAAAAAAAAAADMrAAAAAAAANCsAAAAAAAAAAAAANCsAAAAAAAA1KwAAAAAAAAAAAAA1KwAAAAAAADYrAAAAAAAAAAAAADYrAAAAAAAANysAAAAAAAAAAAAANysAAAAAAAA4KwAAAAAAAAAAAAA4KwAAAAAAADkrAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALSsAAAAAAAAtKwAAAAAAAAAAAAAAAPC/"
				],
				[
					3028,
					1,
					"insert",
					{
						"characters": "ed"
					},
					"AgAAADkrAAAAAAAAOisAAAAAAAAAAAAAOisAAAAAAAA7KwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOSsAAAAAAAA5KwAAAAAAAAAAAAAAAPC/"
				],
				[
					3029,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADsrAAAAAAAAPCsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOysAAAAAAAA7KwAAAAAAAAAAAAAAAPC/"
				],
				[
					3031,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADsrAAAAAAAAPCsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOysAAAAAAAA7KwAAAAAAAAAAAAAAAPC/"
				],
				[
					3032,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAADwrAAAAAAAAPSsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPCsAAAAAAAA8KwAAAAAAAAAAAAAAAPC/"
				],
				[
					3050,
					1,
					"paste",
					null,
					"AgAAACcrAAAAAAAALSsAAAAAAAAAAAAALSsAAAAAAAAtKwAAAAAAABYAAABjb25zdCBuZXR3b3JrQ2hlY2tlZCA9",
					"AQAAAAAAAAABAAAAPSsAAAAAAAAnKwAAAAAAAAAAAAAAAPC/"
				],
				[
					3053,
					1,
					"left_delete",
					null,
					"AQAAAFcrAAAAAAAAVysAAAAAAAAYAAAACiAgICAgIHJldHVybiBuZXdDaGFpbklk",
					"AQAAAAAAAAABAAAAbysAAAAAAABXKwAAAAAAAAAAAAAAAPC/"
				],
				[
					3056,
					1,
					"left_delete",
					null,
					"AQAAAJYrAAAAAAAAlisAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAlysAAAAAAACXKwAAAAAAAAAAAAAAAPC/"
				],
				[
					3057,
					1,
					"insert",
					{
						"characters": "false"
					},
					"BQAAAJYrAAAAAAAAlysAAAAAAAAAAAAAlysAAAAAAACYKwAAAAAAAAAAAACYKwAAAAAAAJkrAAAAAAAAAAAAAJkrAAAAAAAAmisAAAAAAAAAAAAAmisAAAAAAACbKwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlisAAAAAAACWKwAAAAAAAAAAAAAAAPC/"
				],
				[
					3062,
					1,
					"insert",
					{
						"characters": "boolean"
					},
					"CAAAAIAqAAAAAAAAgSoAAAAAAAAAAAAAgSoAAAAAAACBKgAAAAAAAAYAAABudW1iZXKBKgAAAAAAAIIqAAAAAAAAAAAAAIIqAAAAAAAAgyoAAAAAAAAAAAAAgyoAAAAAAACEKgAAAAAAAAAAAACEKgAAAAAAAIUqAAAAAAAAAAAAAIUqAAAAAAAAhioAAAAAAAAAAAAAhioAAAAAAACHKgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgCoAAAAAAACGKgAAAAAAAAAAAAAAAPC/"
				],
				[
					3072,
					3,
					"left_delete",
					null,
					"AwAAAD4UAAAAAAAAPhQAAAAAAAAwBAAAICBhc3luYyBmdW5jdGlvbiBjaGVja0JyaWRnZVN0YXR1c0FuZFNldEJvbmRIYXNoKCkgewogICAgY29uc3QgYnJpZGdlU3RhdHVzVVJMOiBzdHJpbmcgPSBgaHR0cHM6Ly9hcGkuaG9wLmV4Y2hhbmdlL3YxL3RyYW5zZmVyLXN0YXR1cz90cmFuc2FjdGlvbkhhc2g9JHticmlkZ2VUeEhhc2h9Jm5ldHdvcms9JHtyZWFjdEFwcE5ldHdvcmt9YAoKICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYnJpZGdlU3RhdHVzVVJMKQogICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKQoKICAgIGlmICh0eXBlb2YgZGF0YS5lcnJvciAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgY29uc29sZS5sb2coIkVycm9yIGNoZWNraW5nIGJyaWRnZSBzdGF0dXMiKQogICAgICByZXR1cm4KICAgIH0KCiAgICBjb25zdCBkZWFkbGluZSA9IGdldERlYWRsaW5lKDMpCiAgICBjb25zdCBwb2xsaW5nSW50ZXJ2YWxJblNlY29uZHMgPSAxMAoKICAgIHdoaWxlIChnZXREZWFkbGluZSgwKSA8IGRlYWRsaW5lKSB7CiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYnJpZGdlU3RhdHVzVVJMKQogICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpCgogICAgICBpZiAoZGF0YS5ib25kZWQpIHsKICAgICAgICBjb25zdCBib25kSGFzaCA9IGRhdGEuYm9uZFRyYW5zYWN0aW9uSGFzaAoKICAgICAgICBzZXRCb25kVHhIYXNoKGJvbmRIYXNoKQogICAgICAgIGNvbnNvbGUubG9nKCJTdWNjZXNzZnVsbHkgYnJpZGdlZCB0b2tlbnMgd2l0aCBoYXNoOiIsIGJvbmRIYXNoKQogICAgICAgIHJldHVybgogICAgICB9IGVsc2UgewogICAgICAgIGNvbnNvbGUubG9nKCJDb3VsZCBub3QgeWV0IGNvbmZpcm0gc3VjY2Vzc2Z1bCBicmlkZ2luZywgcmVjaGVja2luZyIpCiAgICAgIH0KCiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwICogcG9sbGluZ0ludGVydmFsSW5TZWNvbmRzKSkKICAgIH0KICAgIGNvbnNvbGUubG9nKCJVbmFibGUgdG8gY29uZmlybSBzdWNjZXNzZnVsIGJyaWRnZSB0cmFuc2FjdGlvbiIpCiAgfT0UAAAAAAAAPRQAAAAAAAABAAAACjwUAAAAAAAAPBQAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAbhgAAAAAAAA+FAAAAAAAAAAAAAAAAPC/"
				],
				[
					3080,
					1,
					"paste",
					null,
					"AQAAACYTAAAAAAAAOxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJhMAAAAAAAAmEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3081,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADsTAAAAAAAAPBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOxMAAAAAAAA7EwAAAAAAAAAAAAAAAPC/"
				],
				[
					3084,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANkTAAAAAAAA2hMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2RMAAAAAAADZEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3085,
					1,
					"paste",
					null,
					"AQAAANoTAAAAAAAA9BMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2hMAAAAAAADaEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3086,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAPQTAAAAAAAA9RMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9BMAAAAAAAD0EwAAAAAAAAAAAAAAAPC/"
				],
				[
					3087,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAPUTAAAAAAAA9xMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9RMAAAAAAAD1EwAAAAAAAAAAAAAAAPC/"
				],
				[
					3088,
					1,
					"paste",
					null,
					"AQAAAPYTAAAAAAAAEBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9hMAAAAAAAD2EwAAAAAAAAAAAAAAAPC/"
				],
				[
					3094,
					1,
					"left_delete",
					null,
					"AQAAAPYTAAAAAAAA9hMAAAAAAAAMAAAAYnJpZGdlVHhIYXNo",
					"AQAAAAAAAAABAAAA9hMAAAAAAAACFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3097,
					1,
					"left_delete",
					null,
					"AQAAAPYTAAAAAAAA9hMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA9xMAAAAAAAD3EwAAAAAAAAAAAAAAAPC/"
				],
				[
					3100,
					1,
					"left_delete",
					null,
					"AQAAAOYTAAAAAAAA5hMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA5xMAAAAAAADnEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3101,
					1,
					"insert",
					{
						"characters": "={"
					},
					"AgAAAOYTAAAAAAAA5xMAAAAAAAAAAAAA5xMAAAAAAADoEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5hMAAAAAAADmEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3102,
					1,
					"paste",
					null,
					"AQAAAOgTAAAAAAAA9BMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6BMAAAAAAADoEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3103,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAPQTAAAAAAAA9RMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9BMAAAAAAAD0EwAAAAAAAAAAAAAAAPC/"
				],
				[
					3104,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPUTAAAAAAAA9hMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9RMAAAAAAAD1EwAAAAAAAAAAAAAAAPC/"
				],
				[
					3107,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACUTAAAAAAAAJhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJRMAAAAAAAAlEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3108,
					1,
					"paste",
					null,
					"AQAAACYTAAAAAAAANRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJhMAAAAAAAAmEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3109,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAADUTAAAAAAAANhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANRMAAAAAAAA1EwAAAAAAAAAAAAAAAPC/"
				],
				[
					3110,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAADYTAAAAAAAAOBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANhMAAAAAAAA2EwAAAAAAAAAAAAAAAPC/"
				],
				[
					3111,
					1,
					"paste",
					null,
					"AQAAADcTAAAAAAAARhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANxMAAAAAAAA3EwAAAAAAAAAAAAAAAPC/"
				],
				[
					3117,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHkUAAAAAAAAehQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeRQAAAAAAAB5FAAAAAAAAAAAAAAAAPC/"
				],
				[
					3118,
					1,
					"paste",
					null,
					"AQAAAHoUAAAAAAAAkxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAehQAAAAAAAB6FAAAAAAAAAAAAAAAAPC/"
				],
				[
					3203,
					2,
					"left_delete",
					null,
					"AgAAACEDAAAAAAAAIQMAAAAAAABsAAAAaW1wb3J0IHsgR3JpZCwgQm94LCBUeXBvZ3JhcGh5IH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUnCmltcG9ydCBCdXR0b24gZnJvbSAnc3JjL2NvbXBvbmVudHMvYnV0dG9ucy9CdXR0b24nIAMAAAAAAAAgAwAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAjQMAAAAAAAAhAwAAAAAAAAAAAAAAAPC/"
				],
				[
					3238,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAwUAAAAAAAADRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADBQAAAAAAAAMFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3239,
					1,
					"paste",
					null,
					"AQAAAA0UAAAAAAAAOBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADRQAAAAAAAANFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3249,
					1,
					"left_delete",
					null,
					"AQAAADcMAAAAAAAANwwAAAAAAAABAAAANA",
					"AQAAAAAAAAABAAAAOAwAAAAAAAA4DAAAAAAAAAAAAAAAAPC/"
				],
				[
					3250,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAADcMAAAAAAAAOAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwwAAAAAAAA3DAAAAAAAAAAAAAAAAPC/"
				],
				[
					3253,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAPwLAAAAAAAA/QsAAAAAAAAAAAAA/QsAAAAAAAD/CwAAAAAAAAAAAAD/CwAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAgwAAAAAAAAAAAAA/QsAAAAAAAD9CwAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAA/AsAAAAAAAD8CwAAAAAAAAAAAAAAAPC/"
				],
				[
					3254,
					1,
					"paste",
					null,
					"AQAAAAAMAAAAAAAACgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAPC/"
				],
				[
					3257,
					1,
					"insert",
					{
						"characters": "console.log("
					},
					"DAAAAAAMAAAAAAAAAQwAAAAAAAAAAAAAAQwAAAAAAAACDAAAAAAAAAAAAAACDAAAAAAAAAMMAAAAAAAAAAAAAAMMAAAAAAAABAwAAAAAAAAAAAAABAwAAAAAAAAFDAAAAAAAAAAAAAAFDAAAAAAAAAYMAAAAAAAAAAAAAAYMAAAAAAAABwwAAAAAAAAAAAAABwwAAAAAAAAIDAAAAAAAAAAAAAAIDAAAAAAAAAkMAAAAAAAAAAAAAAkMAAAAAAAACgwAAAAAAAAAAAAACgwAAAAAAAALDAAAAAAAAAAAAAALDAAAAAAAAAwMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAPC/"
				],
				[
					3260,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAABYMAAAAAAAAFwwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgwAAAAAAAAWDAAAAAAAAAAAAAAAAPC/"
				],
				[
					3263,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAAAMAAAAAAAAAQwAAAAAAAAAAAAAAQwAAAAAAAACDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAPC/"
				],
				[
					3264,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAIMAAAAAAAAAwwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgwAAAAAAAACDAAAAAAAAAAAAAAAAPC/"
				],
				[
					3300,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAFYJAAAAAAAAVwkAAAAAAAAAAAAAVwkAAAAAAABYCQAAAAAAAAAAAABYCQAAAAAAAFkJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgkAAAAAAABWCQAAAAAAAAAAAAAAAPC/"
				],
				[
					3301,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFkJAAAAAAAAWgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQkAAAAAAABZCQAAAAAAAAAAAAAAAPC/"
				],
				[
					3302,
					1,
					"insert",
					{
						"characters": "currentStep"
					},
					"CwAAAFoJAAAAAAAAWwkAAAAAAAAAAAAAWwkAAAAAAABcCQAAAAAAAAAAAABcCQAAAAAAAF0JAAAAAAAAAAAAAF0JAAAAAAAAXgkAAAAAAAAAAAAAXgkAAAAAAABfCQAAAAAAAAAAAABfCQAAAAAAAGAJAAAAAAAAAAAAAGAJAAAAAAAAYQkAAAAAAAAAAAAAYQkAAAAAAABiCQAAAAAAAAAAAABiCQAAAAAAAGMJAAAAAAAAAAAAAGMJAAAAAAAAZAkAAAAAAAAAAAAAZAkAAAAAAABlCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgkAAAAAAABaCQAAAAAAAAAAAAAAAPC/"
				],
				[
					3303,
					1,
					"insert",
					{
						"characters": " >"
					},
					"AgAAAGUJAAAAAAAAZgkAAAAAAAAAAAAAZgkAAAAAAABnCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQkAAAAAAABlCQAAAAAAAAAAAAAAAPC/"
				],
				[
					3304,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAGcJAAAAAAAAaAkAAAAAAAAAAAAAaAkAAAAAAABpCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZwkAAAAAAABnCQAAAAAAAAAAAAAAAPC/"
				],
				[
					3307,
					1,
					"insert",
					{
						"characters": "setDesin"
					},
					"CQAAABMMAAAAAAAAFAwAAAAAAAAAAAAAFAwAAAAAAAAUDAAAAAAAABoAAAAvLyBjb25zb2xlLmxvZyhib25kVHhIYXNoKRQMAAAAAAAAFQwAAAAAAAAAAAAAFQwAAAAAAAAWDAAAAAAAAAAAAAAWDAAAAAAAABcMAAAAAAAAAAAAABcMAAAAAAAAGAwAAAAAAAAAAAAAGAwAAAAAAAAZDAAAAAAAAAAAAAAZDAAAAAAAABoMAAAAAAAAAAAAABoMAAAAAAAAGwwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQwAAAAAAAATDAAAAAAAAAAAAAAAAPC/"
				],
				[
					3308,
					2,
					"left_delete",
					null,
					"AgAAABoMAAAAAAAAGgwAAAAAAAABAAAAbhkMAAAAAAAAGQwAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAGwwAAAAAAAAbDAAAAAAAAAAAAAAAAPC/"
				],
				[
					3309,
					1,
					"insert",
					{
						"characters": "tination"
					},
					"CAAAABkMAAAAAAAAGgwAAAAAAAAAAAAAGgwAAAAAAAAbDAAAAAAAAAAAAAAbDAAAAAAAABwMAAAAAAAAAAAAABwMAAAAAAAAHQwAAAAAAAAAAAAAHQwAAAAAAAAeDAAAAAAAAAAAAAAeDAAAAAAAAB8MAAAAAAAAAAAAAB8MAAAAAAAAIAwAAAAAAAAAAAAAIAwAAAAAAAAhDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQwAAAAAAAAZDAAAAAAAAAAAAAAAAPC/"
				],
				[
					3310,
					1,
					"insert",
					{
						"characters": "nET"
					},
					"AwAAACEMAAAAAAAAIgwAAAAAAAAAAAAAIgwAAAAAAAAjDAAAAAAAAAAAAAAjDAAAAAAAACQMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQwAAAAAAAAhDAAAAAAAAAAAAAAAAPC/"
				],
				[
					3311,
					3,
					"left_delete",
					null,
					"AwAAACMMAAAAAAAAIwwAAAAAAAABAAAAVCIMAAAAAAAAIgwAAAAAAAABAAAARSEMAAAAAAAAIQwAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAJAwAAAAAAAAkDAAAAAAAAAAAAAAAAPC/"
				],
				[
					3312,
					1,
					"insert",
					{
						"characters": "NetworkId"
					},
					"CQAAACEMAAAAAAAAIgwAAAAAAAAAAAAAIgwAAAAAAAAjDAAAAAAAAAAAAAAjDAAAAAAAACQMAAAAAAAAAAAAACQMAAAAAAAAJQwAAAAAAAAAAAAAJQwAAAAAAAAmDAAAAAAAAAAAAAAmDAAAAAAAACcMAAAAAAAAAAAAACcMAAAAAAAAKAwAAAAAAAAAAAAAKAwAAAAAAAApDAAAAAAAAAAAAAApDAAAAAAAACoMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQwAAAAAAAAhDAAAAAAAAAAAAAAAAPC/"
				],
				[
					3313,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACoMAAAAAAAALAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgwAAAAAAAAqDAAAAAAAAAAAAAAAAPC/"
				],
				[
					3314,
					1,
					"insert",
					{
						"characters": "421613"
					},
					"BgAAACsMAAAAAAAALAwAAAAAAAAAAAAALAwAAAAAAAAtDAAAAAAAAAAAAAAtDAAAAAAAAC4MAAAAAAAAAAAAAC4MAAAAAAAALwwAAAAAAAAAAAAALwwAAAAAAAAwDAAAAAAAAAAAAAAwDAAAAAAAADEMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwwAAAAAAAArDAAAAAAAAAAAAAAAAPC/"
				],
				[
					3317,
					2,
					"left_delete",
					null,
					"AgAAABAMAAAAAAAAEAwAAAAAAAAiAAAACiAgc2V0RGVzdGluYXRpb25OZXR3b3JrSWQoNDIxNjEzKQ8MAAAAAAAADwwAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAMgwAAAAAAAAQDAAAAAAAAAAAAAAAAPC/"
				],
				[
					3322,
					1,
					"left_delete",
					null,
					"AQAAAEoMAAAAAAAASgwAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAASwwAAAAAAABLDAAAAAAAAAAAAAAAAPC/"
				],
				[
					3323,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAAEoMAAAAAAAASwwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgwAAAAAAABKDAAAAAAAAAAAAAAAAPC/"
				],
				[
					3328,
					1,
					"left_delete",
					null,
					"AQAAAGYJAAAAAAAAZgkAAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAAZwkAAAAAAABnCQAAAAAAAAAAAAAAAPC/"
				],
				[
					3329,
					1,
					"insert",
					{
						"characters": "==="
					},
					"AwAAAGYJAAAAAAAAZwkAAAAAAAAAAAAAZwkAAAAAAABoCQAAAAAAAAAAAABoCQAAAAAAAGkJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgkAAAAAAABmCQAAAAAAAAAAAAAAAPC/"
				],
				[
					3345,
					1,
					"insert",
					{
						"characters": "/*"
					},
					"AgAAAJMIAAAAAAAAlAgAAAAAAAAAAAAAlAgAAAAAAACVCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwgAAAAAAACTCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3348,
					1,
					"insert",
					{
						"characters": "*/"
					},
					"AgAAAOkIAAAAAAAA6ggAAAAAAAAAAAAA6ggAAAAAAADrCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6QgAAAAAAADpCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3351,
					1,
					"insert",
					{
						"characters": "\"arbitrum"
					},
					"CQAAAJMIAAAAAAAAlAgAAAAAAAAAAAAAlAgAAAAAAACVCAAAAAAAAAAAAACVCAAAAAAAAJYIAAAAAAAAAAAAAJYIAAAAAAAAlwgAAAAAAAAAAAAAlwgAAAAAAACYCAAAAAAAAAAAAACYCAAAAAAAAJkIAAAAAAAAAAAAAJkIAAAAAAAAmggAAAAAAAAAAAAAmggAAAAAAACbCAAAAAAAAAAAAACbCAAAAAAAAJwIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwgAAAAAAACTCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3352,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAJwIAAAAAAAAnQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAgAAAAAAACcCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3353,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ0IAAAAAAAAnggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQgAAAAAAACdCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3368,
					1,
					"left_delete",
					null,
					"AQAAAJ0IAAAAAAAAnQgAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAnggAAAAAAACeCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3371,
					2,
					"left_delete",
					null,
					"AgAAAJQIAAAAAAAAlAgAAAAAAAAJAAAAYXJiaXRydW0ikwgAAAAAAACTCAAAAAAAAAEAAAAi",
					"AQAAAAAAAAABAAAAnQgAAAAAAACUCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3372,
					1,
					"insert",
					{
						"characters": "43161"
					},
					"BQAAAJMIAAAAAAAAlAgAAAAAAAAAAAAAlAgAAAAAAACVCAAAAAAAAAAAAACVCAAAAAAAAJYIAAAAAAAAAAAAAJYIAAAAAAAAlwgAAAAAAAAAAAAAlwgAAAAAAACYCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwgAAAAAAACTCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3373,
					3,
					"left_delete",
					null,
					"AwAAAJcIAAAAAAAAlwgAAAAAAAABAAAAMZYIAAAAAAAAlggAAAAAAAABAAAANpUIAAAAAAAAlQgAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAmAgAAAAAAACYCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3374,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAJUIAAAAAAAAlggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQgAAAAAAACVCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3375,
					2,
					"left_delete",
					null,
					"AgAAAJUIAAAAAAAAlQgAAAAAAAABAAAAMpQIAAAAAAAAlAgAAAAAAAABAAAAMw",
					"AQAAAAAAAAABAAAAlggAAAAAAACWCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3376,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAJQIAAAAAAAAlQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAgAAAAAAACUCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3377,
					1,
					"insert",
					{
						"characters": "2613"
					},
					"BAAAAJUIAAAAAAAAlggAAAAAAAAAAAAAlggAAAAAAACXCAAAAAAAAAAAAACXCAAAAAAAAJgIAAAAAAAAAAAAAJgIAAAAAAAAmQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQgAAAAAAACVCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3380,
					2,
					"left_delete",
					null,
					"AgAAAJUIAAAAAAAAlQgAAAAAAAABAAAAMpQIAAAAAAAAlAgAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAlggAAAAAAACWCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3381,
					1,
					"insert",
					{
						"characters": "21"
					},
					"AgAAAJQIAAAAAAAAlQgAAAAAAAAAAAAAlQgAAAAAAACWCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAgAAAAAAACUCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3424,
					1,
					"left_delete",
					null,
					"AQAAAMoTAAAAAAAAyhMAAAAAAAAeAAAAc2V0Qm9uZFR4SGFzaD17c2V0Qm9uZFR4SGFzaH0g",
					"AQAAAAAAAAABAAAA6BMAAAAAAADKEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3429,
					1,
					"left_delete",
					null,
					"AQAAAJYTAAAAAAAAlhMAAAAAAAAYAAAAYm9uZFR4SGFzaD17Ym9uZFR4SGFzaH0g",
					"AQAAAAAAAAABAAAArhMAAAAAAACWEwAAAAAAAAAAAAAAAPC/"
				],
				[
					3432,
					1,
					"left_delete",
					null,
					"AQAAAH8LAAAAAAAAfwsAAAAAAAA7AAAACiAgY29uc3QgW2JvbmRUeEhhc2gsIHNldEJvbmRUeEhhc2hdID0gdXNlU3RhdGU8c3RyaW5nPigiIik",
					"AQAAAAAAAAABAAAAugsAAAAAAAB/CwAAAAAAAAAAAAAAAPC/"
				],
				[
					3441,
					1,
					"left_delete",
					null,
					"AQAAAG4lAAAAAAAAbiUAAAAAAAArAAAACiAgICBjb25zb2xlLmxvZygiYm9uZFR4SGFzaDoiLCBib25kVHhIYXNoKQ",
					"AQAAAAAAAAABAAAAmSUAAAAAAABuJQAAAAAAAAAAAAAAAPC/"
				],
				[
					3444,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAkUAAAAAAAAChQAAAAAAAAAAAAAChQAAAAAAAAOFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACRQAAAAAAAAJFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3470,
					1,
					"paste",
					null,
					"AQAAAAkUAAAAAAAAFxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACRQAAAAAAAAJFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3473,
					2,
					"left_delete",
					null,
					"AgAAAAwUAAAAAAAADBQAAAAAAAABAAAAdwsUAAAAAAAACxQAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAADRQAAAAAAAANFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3474,
					1,
					"insert",
					{
						"characters": "W"
					},
					"AQAAAAsUAAAAAAAADBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACxQAAAAAAAALFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3475,
					2,
					"left_delete",
					null,
					"AgAAAAsUAAAAAAAACxQAAAAAAAABAAAAVwoUAAAAAAAAChQAAAAAAAABAAAAVQ",
					"AQAAAAAAAAABAAAADBQAAAAAAAAMFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3476,
					1,
					"insert",
					{
						"characters": "W"
					},
					"AQAAAAoUAAAAAAAACxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAChQAAAAAAAAKFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3486,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABUUAAAAAAAAFhQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFRQAAAAAAAAVFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3487,
					1,
					"paste",
					null,
					"AQAAABYUAAAAAAAATRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFhQAAAAAAAAWFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3488,
					1,
					"insert",
					{
						"characters": " /"
					},
					"AgAAAE0UAAAAAAAAThQAAAAAAAAAAAAAThQAAAAAAABPFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATRQAAAAAAABNFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3489,
					1,
					"insert",
					{
						"characters": ">,"
					},
					"AgAAAE8UAAAAAAAAUBQAAAAAAAAAAAAAUBQAAAAAAABRFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATxQAAAAAAABPFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3497,
					1,
					"insert",
					{
						"characters": "\nimport"
					},
					"BwAAADEFAAAAAAAAMgUAAAAAAAAAAAAAMgUAAAAAAAAzBQAAAAAAAAAAAAAzBQAAAAAAADQFAAAAAAAAAAAAADQFAAAAAAAANQUAAAAAAAAAAAAANQUAAAAAAAA2BQAAAAAAAAAAAAA2BQAAAAAAADcFAAAAAAAAAAAAADcFAAAAAAAAOAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQUAAAAAAAAxBQAAAAAAAAAAAAAAAPC/"
				],
				[
					3498,
					1,
					"insert",
					{
						"characters": " P"
					},
					"AgAAADgFAAAAAAAAOQUAAAAAAAAAAAAAOQUAAAAAAAA6BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAUAAAAAAAA4BQAAAAAAAAAAAAAAAPC/"
				],
				[
					3499,
					1,
					"left_delete",
					null,
					"AQAAADkFAAAAAAAAOQUAAAAAAAABAAAAUA",
					"AQAAAAAAAAABAAAAOgUAAAAAAAA6BQAAAAAAAAAAAAAAAPC/"
				],
				[
					3500,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAADkFAAAAAAAAOwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQUAAAAAAAA5BQAAAAAAAAAAAAAAAPC/"
				],
				[
					3501,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADoFAAAAAAAAOwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgUAAAAAAAA6BQAAAAAAAAAAAAAAAPC/"
				],
				[
					3502,
					1,
					"paste",
					null,
					"AQAAADsFAAAAAAAARgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwUAAAAAAAA7BQAAAAAAAAAAAAAAAPC/"
				],
				[
					3503,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEYFAAAAAAAARwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgUAAAAAAABGBQAAAAAAAAAAAAAAAPC/"
				],
				[
					3509,
					1,
					"paste",
					null,
					"AQAAAEgFAAAAAAAAgAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAUAAAAAAABIBQAAAAAAAAAAAAAAAPC/"
				],
				[
					3512,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEgFAAAAAAAASQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAUAAAAAAABIBQAAAAAAAAAAAAAAAPC/"
				],
				[
					3522,
					1,
					"paste",
					null,
					"AgAAAHIFAAAAAAAAfQUAAAAAAAAAAAAAfQUAAAAAAAB9BQAAAAAAAA4AAABCcmlkZ2luZ1N0YXR1cw",
					"AQAAAAAAAAABAAAAcgUAAAAAAACABQAAAAAAAAAAAAAAAPC/"
				],
				[
					3525,
					1,
					"left_delete",
					null,
					"AQAAAHYFAAAAAAAAdgUAAAAAAAAHAAAAU2VjdGlvbg",
					"AQAAAAAAAAABAAAAfQUAAAAAAAB2BQAAAAAAAAAAAAAAAPC/"
				],
				[
					3594,
					1,
					"left_delete",
					null,
					"BgAAACwzAAAAAAAALDMAAAAAAACDAQAAICBhc3luYyBmdW5jdGlvbiB3cmFwRVRIKGFtb3VudFRvV3JhcDogc3RyaW5nKSB7CiAgICBjb25zdCB3RVRIQ29udHJhY3RBZGRyZXNzID0gYWRkcmVzc2VzPy5bcmVhY3RBcHBOZXR3b3JrXT8uYnJpZGdlcz8uW3Rva2VuU3ltYm9sXT8uW2NoYWluU2x1Z10/LmwyQ2Fub25pY2FsVG9rZW4KICAgIGNvbnN0IHdldGhBYmkgPSBbImZ1bmN0aW9uIGRlcG9zaXQoKSBwYXlhYmxlIl0KCiAgICBjb25zdCB3ZXRoQ29udHJhY3QgPSBuZXcgZXRoZXJzLkNvbnRyYWN0KHdFVEhDb250cmFjdEFkZHJlc3MsIHdldGhBYmksIHNpZ25lcikKCiAgICByZXR1cm4gYXdhaXQgd2V0aENvbnRyYWN0LmRlcG9zaXQoeyB2YWx1ZTogYW1vdW50VG9XcmFwLCBnYXNMaW1pdDogZ2FzTGltaXQgfSkKICB9yhQAAAAAAADKFAAAAAAAAFcEAAAgIC8vIHdyYXAgaWYgRVRIIG9yIERBSSBvbiBHbm9zaXMKICBhc3luYyBmdW5jdGlvbiB3cmFwSWZOYXRpdmVUb2tlbigpIHsKICAgIGlmICh0b2tlblN5bWJvbCA9PT0gIkVUSCIpIHsKICAgICAgdHJ5IHsKICAgICAgICBjb25zdCB3cmFwVHggPSBhd2FpdCB3cmFwRVRIKG51bWJlck9mQnJpZGdlZFRva2Vuc1JlY2VpdmVkKQogICAgICAgIGF3YWl0IHdyYXBUeC53YWl0KCkKICAgICAgICAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCJTdWNjZXNzZnVsbHkgd3JhcHBlZCBFVEgiKSkKICAgICAgICAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKGVycm9yKSkKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKQogICAgICB9CiAgICB9IGVsc2UgaWYgKHRva2VuU3ltYm9sID09PSAiREFJIiAmJiBjaGFpblNsdWcgPT09ICJnbm9zaXMiKSB7CiAgICAgIGNvbnN0IHdEQUlDb250cmFjdEFkZHJlc3MgPSBhZGRyZXNzZXM/LltyZWFjdEFwcE5ldHdvcmtdPy5icmlkZ2VzPy5bdG9rZW5TeW1ib2xdPy5bY2hhaW5TbHVnXT8ubDJDYW5vbmljYWxUb2tlbgogICAgICBjb25zdCB3REFJQWJpID0gWyJmdW5jdGlvbiBkZXBvc2l0KCkgcGF5YWJsZSJdCgogICAgICBjb25zdCB3REFJQ29udHJhY3QgPSBuZXcgZXRoZXJzLkNvbnRyYWN0KHdEQUlDb250cmFjdEFkZHJlc3MsIHdEQUlBYmksIHNpZ25lcikKCiAgICAgIHRyeSB7CiAgICAgICAgY29uc3Qgd3JhcFR4ID0gYXdhaXQgd0RBSUNvbnRyYWN0LmRlcG9zaXQoeyB2YWx1ZTogbnVtYmVyT2ZCcmlkZ2VkVG9rZW5zUmVjZWl2ZWQsIGdhc0xpbWl0OiBnYXNMaW1pdCB9KQogICAgICAgIGF3YWl0IHdyYXBUeC53YWl0KCkKICAgICAgICAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCJTdWNjZXNzZnVsbHkgd3JhcHBlZCBEQUkiKSkKICAgICAgICAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKGVycm9yKSkKICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKQogICAgICB9CiAgICB9IGVsc2UgewogICAgICBjb25zb2xlLmxvZygiVG9rZW4gaXMgRVJDMjAsIG5vIHdyYXAgbmVjZXNzYXJ5IikKICAgIH0KICB91C4AAAAAAADULgAAAAAAAAEAAAAKyRQAAAAAAADJFAAAAAAAAAEAAAAK0i4AAAAAAADSLgAAAAAAAAEAAAAKyBQAAAAAAADIFAAAAAAAAAEAAAAK",
					"AQAAAAAAAAACAAAAIRkAAAAAAADKFAAAAAAAAAAAAAAAAPC/rzQAAAAAAAAsMwAAAAAAAAAAAAAAAPC/"
				],
				[
					3618,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJMUAAAAAAAAlBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkxQAAAAAAACTFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3619,
					1,
					"paste",
					null,
					"AQAAAJQUAAAAAAAArRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlBQAAAAAAACUFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3625,
					1,
					"paste",
					null,
					"AQAAAJQUAAAAAAAAqRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlBQAAAAAAACUFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3626,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKkUAAAAAAAAqhQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqRQAAAAAAACpFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3638,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMMUAAAAAAAAxBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwxQAAAAAAADDFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3639,
					1,
					"paste",
					null,
					"AQAAAMQUAAAAAAAA4RQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxBQAAAAAAADEFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3640,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAOEUAAAAAAAA4hQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4RQAAAAAAADhFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3641,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAOIUAAAAAAAA5BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4hQAAAAAAADiFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3642,
					1,
					"paste",
					null,
					"AQAAAOMUAAAAAAAAABUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4xQAAAAAAADjFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3648,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAEVAAAAAAAAAhUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAARUAAAAAAAABFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3649,
					1,
					"paste",
					null,
					"AQAAAAIVAAAAAAAAERUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAhUAAAAAAAACFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3650,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABEVAAAAAAAAEhUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAERUAAAAAAAARFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3651,
					1,
					"paste",
					null,
					"AQAAABIVAAAAAAAAGhUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEhUAAAAAAAASFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3652,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAABoVAAAAAAAAGxUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGhUAAAAAAAAaFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3653,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAABsVAAAAAAAAHRUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGxUAAAAAAAAbFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3654,
					1,
					"paste",
					null,
					"AQAAABwVAAAAAAAAJBUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHBUAAAAAAAAcFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3685,
					1,
					"paste",
					null,
					"AQAAAJQUAAAAAAAAtRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlBQAAAAAAACUFAAAAAAAAAAAAAAAAPC/"
				],
				[
					3686,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALUUAAAAAAAAthQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtRQAAAAAAAC1FAAAAAAAAAAAAAAAAPC/"
				],
				[
					3709,
					1,
					"paste",
					null,
					"AQAAAP4kAAAAAAAACSUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/iQAAAAAAAD+JAAAAAAAAAAAAAAAAPC/"
				],
				[
					3710,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAAklAAAAAAAACiUAAAAAAAAAAAAACiUAAAAAAAALJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACSUAAAAAAAAJJQAAAAAAAAAAAAAAAPC/"
				],
				[
					3711,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAslAAAAAAAADCUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACyUAAAAAAAALJQAAAAAAAAAAAAAAAPC/"
				],
				[
					3714,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAACQlAAAAAAAAJSUAAAAAAAAAAAAAJSUAAAAAAAAmJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJCUAAAAAAAAkJQAAAAAAAAAAAAAAAPC/"
				],
				[
					3715,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACYlAAAAAAAAJyUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJiUAAAAAAAAmJQAAAAAAAAAAAAAAAPC/"
				],
				[
					3716,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAACclAAAAAAAAKSUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJyUAAAAAAAAnJQAAAAAAAAAAAAAAAPC/"
				],
				[
					3720,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEcVAAAAAAAASBUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARxUAAAAAAABHFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3721,
					1,
					"paste",
					null,
					"AQAAAEgVAAAAAAAAXBUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASBUAAAAAAABIFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3722,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAFwVAAAAAAAAXRUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXBUAAAAAAABcFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3723,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAF0VAAAAAAAAXxUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXRUAAAAAAABdFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3724,
					1,
					"paste",
					null,
					"AQAAAF4VAAAAAAAAchUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXhUAAAAAAABeFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3727,
					1,
					"left_delete",
					null,
					"AQAAAGEMAAAAAAAAYQwAAAAAAAABAAAANA",
					"AQAAAAAAAAABAAAAYgwAAAAAAABiDAAAAAAAAAAAAAAAAPC/"
				],
				[
					3728,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAGEMAAAAAAAAYgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQwAAAAAAABhDAAAAAAAAAAAAAAAAPC/"
				],
				[
					3731,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHwVAAAAAAAAfRUAAAAAAAAAAAAAfRUAAAAAAACBFQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfBUAAAAAAAB8FQAAAAAAAAAAAAAAAPC/"
				],
				[
					3734,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AQAAAHwVAAAAAAAAfRUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfBUAAAAAAAB8FQAAAAAAAAAAAAAAAPC/"
				],
				[
					3741,
					1,
					"insert",
					{
						"characters": "Deposit"
					},
					"BwAAAH0VAAAAAAAAfhUAAAAAAAAAAAAAfhUAAAAAAAB/FQAAAAAAAAAAAAB/FQAAAAAAAIAVAAAAAAAAAAAAAIAVAAAAAAAAgRUAAAAAAAAAAAAAgRUAAAAAAACCFQAAAAAAAAAAAACCFQAAAAAAAIMVAAAAAAAAAAAAAIMVAAAAAAAAhBUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfRUAAAAAAAB9FQAAAAAAAAAAAAAAAPC/"
				],
				[
					3742,
					1,
					"insert",
					{
						"characters": "Section"
					},
					"BwAAAIQVAAAAAAAAhRUAAAAAAAAAAAAAhRUAAAAAAACGFQAAAAAAAAAAAACGFQAAAAAAAIcVAAAAAAAAAAAAAIcVAAAAAAAAiBUAAAAAAAAAAAAAiBUAAAAAAACJFQAAAAAAAAAAAACJFQAAAAAAAIoVAAAAAAAAAAAAAIoVAAAAAAAAixUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhBUAAAAAAACEFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3743,
					1,
					"insert",
					{
						"characters": " />"
					},
					"AwAAAIsVAAAAAAAAjBUAAAAAAAAAAAAAjBUAAAAAAACNFQAAAAAAAAAAAACNFQAAAAAAAI4VAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAixUAAAAAAACLFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3744,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAI4VAAAAAAAAjxUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjhUAAAAAAACOFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3753,
					2,
					"left_delete",
					null,
					"AgAAAMQVAAAAAAAAxBUAAAAAAACpBQAALy8gZGVwb3NpdCB0b2tlbnMKICBhc3luYyBmdW5jdGlvbiBhZGRMaXF1aWRpdHkoKSB7CiAgICBjb25zdCBjYW5vbmljYWxUb2tlbkNvbnRyYWN0QWRkcmVzcyA9IGFkZHJlc3Nlcz8uW3JlYWN0QXBwTmV0d29ya10/LmJyaWRnZXM/Llt0b2tlblN5bWJvbF0/LltjaGFpblNsdWddPy5sMkNhbm9uaWNhbFRva2VuCiAgICBjb25zdCBzYWRkbGVTd2FwQ29udHJhY3RBZGRyZXNzID0gYWRkcmVzc2VzPy5bcmVhY3RBcHBOZXR3b3JrXT8uYnJpZGdlcz8uW3Rva2VuU3ltYm9sXT8uW2NoYWluU2x1Z10/LmwyU2FkZGxlU3dhcAoKICAgIGNvbnNvbGUubG9nKG51bWJlck9mQnJpZGdlZFRva2Vuc1JlY2VpdmVkKQoKICAgIC8vIGFwcHJvdmUgY2Fub25pY2FsIHRva2VuIHNwZW5kaW5nCiAgICB0cnkgewogICAgICBjb25zdCBhcHByb3ZlVHggPSBhd2FpdCBhcHByb3ZlVG9rZW4oY2Fub25pY2FsVG9rZW5Db250cmFjdEFkZHJlc3MsIHNhZGRsZVN3YXBDb250cmFjdEFkZHJlc3MsIG51bWJlck9mQnJpZGdlZFRva2Vuc1JlY2VpdmVkKQogICAgICBpZiAodHlwZW9mIGFwcHJvdmVUeCAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICBhd2FpdCBhcHByb3ZlVHgud2FpdCgpCiAgICAgICAgICAudGhlbigoKSA9PiB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJBcHByb3ZlZCBzdWNjZXNzZnVsbHkiKQogICAgICAgICAgfSkKICAgICAgICAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKGVycm9yKSkKICAgICAgfQogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgY29uc29sZS5lcnJvcihlcnJvcikKICAgICAgcmV0dXJuCiAgICB9CgogICAgY29uc3Qgc3dhcENvbnRyYWN0ID0gbmV3IGV0aGVycy5Db250cmFjdChzYWRkbGVTd2FwQ29udHJhY3RBZGRyZXNzLCBzYWRkbGVTd2FwQWJpLCBzaWduZXIpCiAgICBjb25zdCBtaW5Ub01pbnQgPSBCaWdOdW1iZXIuZnJvbShudW1iZXJPZkJyaWRnZWRUb2tlbnNSZWNlaXZlZCkKICAgICAgLm11bCg3KQogICAgICAuZGl2KDEwKQogICAgICAudG9TdHJpbmcoKQogICAgY29uc3QgZGVhZGxpbmUgPSBnZXREZWFkbGluZSg0KQoKICAgIHRyeSB7CiAgICAgIGNvbnN0IGRlcG9zaXRUeCA9IGF3YWl0IHN3YXBDb250cmFjdC5hZGRMaXF1aWRpdHkoW251bWJlck9mQnJpZGdlZFRva2Vuc1JlY2VpdmVkLCAwXSwgIG1pblRvTWludCwgZGVhZGxpbmUsIHsgZ2FzTGltaXQ6IGdhc0xpbWl0ICogMiB9KQogICAgICBhd2FpdCBkZXBvc2l0VHgud2FpdCgpCiAgICAgICAgLnRoZW4oKHRva2Vuc1JlY2VpdmVkKSA9PiB7CiAgICAgICAgICBjb25zb2xlLmxvZygiU3VjY2Vzc2Z1bGx5IGRlcG9zaXRlZCB0b2tlbnMiKQogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKQogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgY29uc29sZS5lcnJvcihlcnJvcikKICAgIH0KICB9whUAAAAAAADCFQAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAxBUAAAAAAABtGwAAAAAAAAAAAAAAAPC/"
				],
				[
					3754,
					2,
					"left_delete",
					null,
					"AgAAAMEVAAAAAAAAwRUAAAAAAAABAAAACsAVAAAAAAAAwBUAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAwhUAAAAAAADCFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3759,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHcFAAAAAAAAeAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwUAAAAAAAB3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					3760,
					1,
					"paste",
					null,
					"AQAAAHgFAAAAAAAAvQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAUAAAAAAAB4BQAAAAAAAAAAAAAAAPC/"
				],
				[
					3765,
					1,
					"insert",
					{
						"characters": "DepositSe"
					},
					"CgAAAIEFAAAAAAAAggUAAAAAAAAAAAAAggUAAAAAAACCBQAAAAAAAAsAAABXcmFwU2VjdGlvboIFAAAAAAAAgwUAAAAAAAAAAAAAgwUAAAAAAACEBQAAAAAAAAAAAACEBQAAAAAAAIUFAAAAAAAAAAAAAIUFAAAAAAAAhgUAAAAAAAAAAAAAhgUAAAAAAACHBQAAAAAAAAAAAACHBQAAAAAAAIgFAAAAAAAAAAAAAIgFAAAAAAAAiQUAAAAAAAAAAAAAiQUAAAAAAACKBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgQUAAAAAAACMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					3766,
					1,
					"insert",
					{
						"characters": "ction"
					},
					"BQAAAIoFAAAAAAAAiwUAAAAAAAAAAAAAiwUAAAAAAACMBQAAAAAAAAAAAACMBQAAAAAAAI0FAAAAAAAAAAAAAI0FAAAAAAAAjgUAAAAAAAAAAAAAjgUAAAAAAACPBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigUAAAAAAACKBQAAAAAAAAAAAAAAAPC/"
				],
				[
					3775,
					1,
					"insert",
					{
						"characters": "Deposit"
					},
					"CAAAALsFAAAAAAAAvAUAAAAAAAAAAAAAvAUAAAAAAAC8BQAAAAAAAAQAAABXcmFwvAUAAAAAAAC9BQAAAAAAAAAAAAC9BQAAAAAAAL4FAAAAAAAAAAAAAL4FAAAAAAAAvwUAAAAAAAAAAAAAvwUAAAAAAADABQAAAAAAAAAAAADABQAAAAAAAMEFAAAAAAAAAAAAAMEFAAAAAAAAwgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwUAAAAAAAC/BQAAAAAAAAAAAAAAAPC/"
				],
				[
					3785,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANcVAAAAAAAA2BUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1xUAAAAAAADXFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3786,
					1,
					"paste",
					null,
					"AQAAANgVAAAAAAAADxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2BUAAAAAAADYFQAAAAAAAAAAAAAAAPC/"
				],
				[
					3792,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA8WAAAAAAAAEBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADxYAAAAAAAAPFgAAAAAAAAAAAAAAAPC/"
				],
				[
					3793,
					1,
					"paste",
					null,
					"AQAAABAWAAAAAAAAMRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEBYAAAAAAAAQFgAAAAAAAAAAAAAAAPC/"
				],
				[
					3799,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADEWAAAAAAAAMhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMRYAAAAAAAAxFgAAAAAAAAAAAAAAAPC/"
				],
				[
					3800,
					1,
					"paste",
					null,
					"AQAAADIWAAAAAAAAYRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMhYAAAAAAAAyFgAAAAAAAAAAAAAAAPC/"
				],
				[
					3806,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGEWAAAAAAAAYhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYRYAAAAAAABhFgAAAAAAAAAAAAAAAPC/"
				],
				[
					3807,
					1,
					"paste",
					null,
					"AQAAAGIWAAAAAAAAwxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYhYAAAAAAABiFgAAAAAAAAAAAAAAAPC/"
				],
				[
					3825,
					1,
					"left_delete",
					null,
					"AQAAANgCAAAAAAAA2AIAAAAAAABHAAAACmltcG9ydCBzYWRkbGVTd2FwQWJpIGZyb20gJ0Bob3AtcHJvdG9jb2wvY29yZS9hYmkvZ2VuZXJhdGVkL1N3YXAuanNvbic",
					"AQAAAAAAAAABAAAAHwMAAAAAAADYAgAAAAAAAAAAAAAAAPC/"
				],
				[
					3891,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOwBAAAAAAAA7QEAAAAAAAAAAAAA7QEAAAAAAADuAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7AEAAAAAAADsAQAAAAAAAAAAAAAAAPC/"
				],
				[
					3892,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAO4BAAAAAAAA7wEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7gEAAAAAAADuAQAAAAAAAAAAAAAAAPC/"
				],
				[
					3905,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAACcCAAAAAAAAKAIAAAAAAAAAAAAAKAIAAAAAAAApAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwIAAAAAAAAnAgAAAAAAAAAAAAAAAPC/"
				],
				[
					3906,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACkCAAAAAAAAKgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQIAAAAAAAApAgAAAAAAAAAAAAAAAPC/"
				],
				[
					3981,
					1,
					"left_delete",
					null,
					"AgAAAOkIAAAAAAAA6QgAAAAAAAABAAAAM+gIAAAAAAAA6AgAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAA6ggAAAAAAADqCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3983,
					1,
					"left_delete",
					null,
					"BAAAAOgIAAAAAAAA6AgAAAAAAAABAAAAL+cIAAAAAAAA5wgAAAAAAAABAAAANuYIAAAAAAAA5ggAAAAAAAABAAAAMeUIAAAAAAAA5QgAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAA6QgAAAAAAADpCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3985,
					1,
					"left_delete",
					null,
					"AgAAAOUIAAAAAAAA5QgAAAAAAAABAAAAKuQIAAAAAAAA5AgAAAAAAAABAAAANA",
					"AQAAAAAAAAABAAAA5ggAAAAAAADmCAAAAAAAAAAAAAAAAPC/"
				],
				[
					3988,
					1,
					"left_delete",
					null,
					"AgAAADkJAAAAAAAAOQkAAAAAAAABAAAALzgJAAAAAAAAOAkAAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAAOgkAAAAAAAA6CQAAAAAAAAAAAAAAAPC/"
				],
				[
					3991,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHgWAAAAAAAAeRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeBYAAAAAAAB4FgAAAAAAAAAAAAAAAPC/"
				],
				[
					3992,
					1,
					"paste",
					null,
					"AQAAAHkWAAAAAAAAhBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeRYAAAAAAAB5FgAAAAAAAAAAAAAAAPC/"
				],
				[
					3993,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAIQWAAAAAAAAhRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhBYAAAAAAACEFgAAAAAAAAAAAAAAAPC/"
				],
				[
					3994,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIUWAAAAAAAAhxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhRYAAAAAAACFFgAAAAAAAAAAAAAAAPC/"
				],
				[
					3995,
					1,
					"paste",
					null,
					"AQAAAIYWAAAAAAAAkRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhhYAAAAAAACGFgAAAAAAAAAAAAAAAPC/"
				],
				[
					3998,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHgWAAAAAAAAeRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeBYAAAAAAAB4FgAAAAAAAAAAAAAAAPC/"
				],
				[
					3999,
					1,
					"paste",
					null,
					"AQAAAHkWAAAAAAAAhRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeRYAAAAAAAB5FgAAAAAAAAAAAAAAAPC/"
				],
				[
					4000,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAIUWAAAAAAAAhhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhRYAAAAAAACFFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4001,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIYWAAAAAAAAiBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhhYAAAAAAACGFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4002,
					1,
					"paste",
					null,
					"AQAAAIcWAAAAAAAAkxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhxYAAAAAAACHFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4005,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK4WAAAAAAAArxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArhYAAAAAAACuFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4006,
					1,
					"paste",
					null,
					"AQAAAK8WAAAAAAAAvhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArxYAAAAAAACvFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4007,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAL4WAAAAAAAAvxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvhYAAAAAAAC+FgAAAAAAAAAAAAAAAPC/"
				],
				[
					4008,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAL8WAAAAAAAAwRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvxYAAAAAAAC/FgAAAAAAAAAAAAAAAPC/"
				],
				[
					4009,
					1,
					"paste",
					null,
					"AQAAAMAWAAAAAAAAzxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwBYAAAAAAADAFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4036,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AQAAALAWAAAAAAAAsRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsBYAAAAAAACwFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4037,
					2,
					"left_delete",
					null,
					"AgAAALAWAAAAAAAAsBYAAAAAAAABAAAAZ68WAAAAAAAArxYAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAsRYAAAAAAACxFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4038,
					1,
					"insert",
					{
						"characters": "getT"
					},
					"BAAAAK8WAAAAAAAAsBYAAAAAAAAAAAAAsBYAAAAAAACxFgAAAAAAAAAAAACxFgAAAAAAALIWAAAAAAAAAAAAALIWAAAAAAAAsxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArxYAAAAAAACvFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4039,
					2,
					"left_delete",
					null,
					"AgAAALIWAAAAAAAAshYAAAAAAAABAAAAVLEWAAAAAAAAsRYAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAsxYAAAAAAACzFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4040,
					1,
					"insert",
					{
						"characters": "T"
					},
					"AQAAALEWAAAAAAAAshYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsRYAAAAAAACxFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4041,
					1,
					"left_delete",
					null,
					"AQAAALEWAAAAAAAAsRYAAAAAAAABAAAAVA",
					"AQAAAAAAAAABAAAAshYAAAAAAACyFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4042,
					1,
					"insert",
					{
						"characters": "tT"
					},
					"AgAAALEWAAAAAAAAshYAAAAAAAAAAAAAshYAAAAAAACzFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsRYAAAAAAACxFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4052,
					1,
					"paste",
					null,
					"AgAAAMMWAAAAAAAA1RYAAAAAAAAAAAAA1RYAAAAAAADVFgAAAAAAAA8AAAB0b2tlbnNBcmVTdGFrZWQ",
					"AQAAAAAAAAABAAAAwxYAAAAAAADSFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4055,
					1,
					"left_delete",
					null,
					"AQAAAGIMAAAAAAAAYgwAAAAAAAABAAAANQ",
					"AQAAAAAAAAABAAAAYwwAAAAAAABjDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4056,
					1,
					"insert",
					{
						"characters": "6"
					},
					"AQAAAGIMAAAAAAAAYwwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYgwAAAAAAABiDAAAAAAAAAAAAAAAAPC/"
				],
				[
					4059,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAN8WAAAAAAAA4BYAAAAAAAAAAAAA4BYAAAAAAADkFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3xYAAAAAAADfFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4062,
					1,
					"insert",
					{
						"characters": "<sTA"
					},
					"BAAAAN8WAAAAAAAA4BYAAAAAAAAAAAAA4BYAAAAAAADhFgAAAAAAAAAAAADhFgAAAAAAAOIWAAAAAAAAAAAAAOIWAAAAAAAA4xYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3xYAAAAAAADfFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4063,
					3,
					"left_delete",
					null,
					"AwAAAOIWAAAAAAAA4hYAAAAAAAABAAAAQeEWAAAAAAAA4RYAAAAAAAABAAAAVOAWAAAAAAAA4BYAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAA4xYAAAAAAADjFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4064,
					1,
					"insert",
					{
						"characters": "Stake"
					},
					"BQAAAOAWAAAAAAAA4RYAAAAAAAAAAAAA4RYAAAAAAADiFgAAAAAAAAAAAADiFgAAAAAAAOMWAAAAAAAAAAAAAOMWAAAAAAAA5BYAAAAAAAAAAAAA5BYAAAAAAADlFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4BYAAAAAAADgFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4065,
					1,
					"insert",
					{
						"characters": " />"
					},
					"AwAAAOUWAAAAAAAA5hYAAAAAAAAAAAAA5hYAAAAAAADnFgAAAAAAAAAAAADnFgAAAAAAAOgWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5RYAAAAAAADlFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4068,
					1,
					"insert",
					{
						"characters": "Section"
					},
					"BwAAAOUWAAAAAAAA5hYAAAAAAAAAAAAA5hYAAAAAAADnFgAAAAAAAAAAAADnFgAAAAAAAOgWAAAAAAAAAAAAAOgWAAAAAAAA6RYAAAAAAAAAAAAA6RYAAAAAAADqFgAAAAAAAAAAAADqFgAAAAAAAOsWAAAAAAAAAAAAAOsWAAAAAAAA7BYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5RYAAAAAAADlFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4075,
					1,
					"left_delete",
					null,
					"AQAAAOsBAAAAAAAA6wEAAAAAAAB2AAAACi8vIGltcG9ydCAqIGFzIG5ldHdvcmtzIGZyb20gJ0Bob3AtcHJvdG9jb2wvY29yZS9uZXR3b3JrcycKLy8gaW1wb3J0ICogYXMgbWV0YWRhdGEgZnJvbSAnQGhvcC1wcm90b2NvbC9jb3JlL21ldGFkYXRhJw",
					"AQAAAAAAAAABAAAAYQIAAAAAAADrAQAAAAAAAAAAAAAAAPC/"
				],
				[
					4084,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAwFAAAAAAAADQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAUAAAAAAAAMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					4085,
					1,
					"paste",
					null,
					"AQAAAA0FAAAAAAAAWAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQUAAAAAAAANBQAAAAAAAAAAAAAAAPC/"
				],
				[
					4088,
					1,
					"insert",
					{
						"characters": "Stake"
					},
					"BgAAABYFAAAAAAAAFwUAAAAAAAAAAAAAFwUAAAAAAAAXBQAAAAAAAAcAAABEZXBvc2l0FwUAAAAAAAAYBQAAAAAAAAAAAAAYBQAAAAAAABkFAAAAAAAAAAAAABkFAAAAAAAAGgUAAAAAAAAAAAAAGgUAAAAAAAAbBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQUAAAAAAAAWBQAAAAAAAAAAAAAAAPC/"
				],
				[
					4094,
					1,
					"insert",
					{
						"characters": "Sat"
					},
					"BAAAAE4FAAAAAAAATwUAAAAAAAAAAAAATwUAAAAAAABPBQAAAAAAAAcAAABEZXBvc2l0TwUAAAAAAABQBQAAAAAAAAAAAABQBQAAAAAAAFEFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATgUAAAAAAABVBQAAAAAAAAAAAAAAAPC/"
				],
				[
					4095,
					2,
					"left_delete",
					null,
					"AgAAAFAFAAAAAAAAUAUAAAAAAAABAAAAdE8FAAAAAAAATwUAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAUQUAAAAAAABRBQAAAAAAAAAAAAAAAPC/"
				],
				[
					4096,
					1,
					"insert",
					{
						"characters": "take"
					},
					"BAAAAE8FAAAAAAAAUAUAAAAAAAAAAAAAUAUAAAAAAABRBQAAAAAAAAAAAABRBQAAAAAAAFIFAAAAAAAAAAAAAFIFAAAAAAAAUwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATwUAAAAAAABPBQAAAAAAAAAAAAAAAPC/"
				],
				[
					4111,
					1,
					"left_delete",
					null,
					"AQAAAGoaAAAAAAAAahoAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAAaxoAAAAAAABrGgAAAAAAAAAAAAAAAPC/"
				],
				[
					4112,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAGoaAAAAAAAAaxoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAahoAAAAAAABqGgAAAAAAAAAAAAAAAPC/"
				],
				[
					4121,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAMEWAAAAAAAAwhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwRYAAAAAAADBFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4136,
					1,
					"insert",
					{
						"characters": "close="
					},
					"BgAAAL8WAAAAAAAAwBYAAAAAAAAAAAAAwBYAAAAAAADBFgAAAAAAAAAAAADBFgAAAAAAAMIWAAAAAAAAAAAAAMIWAAAAAAAAwxYAAAAAAAAAAAAAwxYAAAAAAADEFgAAAAAAAAAAAADEFgAAAAAAAMUWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvxYAAAAAAAC/FgAAAAAAAAAAAAAAAPC/"
				],
				[
					4137,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAAMUWAAAAAAAAxhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxRYAAAAAAADFFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4138,
					1,
					"paste",
					null,
					"AQAAAMYWAAAAAAAA4hYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxhYAAAAAAADGFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4139,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAOIWAAAAAAAA4xYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4hYAAAAAAADiFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4140,
					1,
					"left_delete",
					null,
					"AQAAAOIWAAAAAAAA4hYAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA4xYAAAAAAADjFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4141,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAOIWAAAAAAAA4xYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4hYAAAAAAADiFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4142,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOMWAAAAAAAA5BYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4xYAAAAAAADjFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4146,
					5,
					"left_delete",
					null,
					"BQAAABwXAAAAAAAAHBcAAAAAAAAYBgAAYXN5bmMgZnVuY3Rpb24gc3Rha2UoKSB7CiAgICBjb25zdCBscFRva2VuQ29udHJhY3RBZGRyZXNzID0gYWRkcmVzc2VzPy5bcmVhY3RBcHBOZXR3b3JrXT8uYnJpZGdlcz8uW3Rva2VuU3ltYm9sXT8uW2NoYWluU2x1Z10/LmwyU2FkZGxlTHBUb2tlbgogICAgY29uc3Qgc3Rha2luZ0NvbnRyYWN0QWRkcmVzcyA9IGhvcFN0YWtpbmdSZXdhcmRzQ29udHJhY3RzPy5bcmVhY3RBcHBOZXR3b3JrXT8uW2NoYWluU2x1Z10/Llt0b2tlblN5bWJvbF0KCiAgICBjb25zdCBiYWxhbmNlT2ZBYmkgPSBbImZ1bmN0aW9uIGJhbGFuY2VPZihhZGRyZXNzIGFjY291bnQpIHZpZXcgcmV0dXJucyAodWludDI1NikiXQogICAgY29uc3QgbHBUb2tlbkNvbnRyYWN0ID0gbmV3IGV0aGVycy5Db250cmFjdChscFRva2VuQ29udHJhY3RBZGRyZXNzLCBiYWxhbmNlT2ZBYmksIHNpZ25lcikKCiAgICBsZXQgYmFsYW5jZTogc3RyaW5nID0gIjAiCgogICAgLy8gZ2V0IGJhbGFuY2Ugb2YgTFAgdG9rZW4KICAgIHRyeSB7CiAgICAgIGJhbGFuY2UgPSBhd2FpdCBscFRva2VuQ29udHJhY3QuYmFsYW5jZU9mKGFkZHJlc3M/LmFkZHJlc3MpCiAgICAgIGJhbGFuY2UgPSBiYWxhbmNlLnRvU3RyaW5nKCkKICAgICAgY29uc29sZS5sb2coIkxQIHRva2VuIGJhbGFuY2U6IiwgYmFsYW5jZSkKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpCiAgICAgIHJldHVybgogICAgfQoKICAgIC8vIGFwcHJvdmUgTFAgdG9rZW4gc3BlbmRpbmcKICAgIHRyeSB7CiAgICAgIGNvbnN0IGFwcHJvdmVUeCA9IGF3YWl0IGFwcHJvdmVUb2tlbihscFRva2VuQ29udHJhY3RBZGRyZXNzLCBzdGFraW5nQ29udHJhY3RBZGRyZXNzLCBiYWxhbmNlKQogICAgICBpZiAodHlwZW9mIGFwcHJvdmVUeCAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICBhd2FpdCBhcHByb3ZlVHgud2FpdCgpCiAgICAgICAgICAudGhlbigoKSA9PiB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJBcHByb3ZlZCBzdWNjZXNzZnVsbHkiKQogICAgICAgICAgfSkKICAgICAgICAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKGVycm9yKSkKICAgICAgfQogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgY29uc29sZS5lcnJvcihlcnJvcikKICAgICAgcmV0dXJuCiAgICB9CgogICAgLy8gc3Rha2UgTFAgdG9rZW5zCiAgICBjb25zdCBzdGFraW5nQ29udHJhY3QgPSBuZXcgZXRoZXJzLkNvbnRyYWN0KHN0YWtpbmdDb250cmFjdEFkZHJlc3MsIHN0YWtpbmdSZXdhcmRzQWJpLCBzaWduZXIpCgogICAgdHJ5IHsKICAgICAgY29uc3Qgc3Rha2VUeCA9IGF3YWl0IHN0YWtpbmdDb250cmFjdC5zdGFrZShiYWxhbmNlLCB7IGdhc0xpbWl0OiBnYXNMaW1pdCB9KQogICAgICBhd2FpdCBzdGFrZVR4LndhaXQoKQogICAgICAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCJTdGFrZWQgc3VjY2Vzc2Z1bGx5IikpCiAgICAgICAgLmNhdGNoKGVycm9yID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKQogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgY29uc29sZS5lcnJvcihlcnJvcikKICAgIH0KICB9GhcAAAAAAAAaFwAAAAAAAAIAAAAgIBkXAAAAAAAAGRcAAAAAAAABAAAAChgXAAAAAAAAGBcAAAAAAAABAAAAChcXAAAAAAAAFxcAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAHBcAAAAAAAA0HQAAAAAAAAAAAAAAAPC/"
				],
				[
					4147,
					19,
					"left_delete",
					null,
					"EwAAABYXAAAAAAAAFhcAAAAAAAABAAAAKhUXAAAAAAAAFRcAAAAAAAABAAAAIBQXAAAAAAAAFBcAAAAAAAABAAAAUxMXAAAAAAAAExcAAAAAAAABAAAAThIXAAAAAAAAEhcAAAAAAAABAAAATxEXAAAAAAAAERcAAAAAAAABAAAASRAXAAAAAAAAEBcAAAAAAAABAAAAVA8XAAAAAAAADxcAAAAAAAABAAAAQw4XAAAAAAAADhcAAAAAAAABAAAATg0XAAAAAAAADRcAAAAAAAABAAAAVQwXAAAAAAAADBcAAAAAAAABAAAARgsXAAAAAAAACxcAAAAAAAABAAAAIAoXAAAAAAAAChcAAAAAAAABAAAARQkXAAAAAAAACRcAAAAAAAABAAAAQwgXAAAAAAAACBcAAAAAAAABAAAATgcXAAAAAAAABxcAAAAAAAABAAAAQQYXAAAAAAAABhcAAAAAAAABAAAATAUXAAAAAAAABRcAAAAAAAABAAAAQQQXAAAAAAAABBcAAAAAAAABAAAAQg",
					"AQAAAAAAAAABAAAAFxcAAAAAAAAXFwAAAAAAAAAAAAAAAPC/"
				],
				[
					4148,
					9,
					"left_delete",
					null,
					"CQAAAAMXAAAAAAAAAxcAAAAAAAABAAAARQIXAAAAAAAAAhcAAAAAAAABAAAAUgEXAAAAAAAAARcAAAAAAAABAAAAIAAXAAAAAAAAABcAAAAAAAABAAAAKv8WAAAAAAAA/xYAAAAAAAABAAAAL/0WAAAAAAAA/RYAAAAAAAACAAAAICD8FgAAAAAAAPwWAAAAAAAAAQAAAAr7FgAAAAAAAPsWAAAAAAAAAQAAAAr6FgAAAAAAAPoWAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAABBcAAAAAAAAEFwAAAAAAAAAAAAAAAPC/"
				],
				[
					4158,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN0nAAAAAAAA3icAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3ScAAAAAAADdJwAAAAAAAAAAAAAAAPC/"
				],
				[
					4159,
					1,
					"paste",
					null,
					"AQAAAN4nAAAAAAAA8CcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3icAAAAAAADeJwAAAAAAAAAAAAAAAPC/"
				],
				[
					4160,
					1,
					"insert",
					{
						"characters": "\n?"
					},
					"AwAAAPAnAAAAAAAA8ScAAAAAAAAAAAAA8ScAAAAAAAD1JwAAAAAAAAAAAAD1JwAAAAAAAPYnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8CcAAAAAAADwJwAAAAAAAAAAAAAAAPC/"
				],
				[
					4163,
					1,
					"left_delete",
					null,
					"AQAAAPcnAAAAAAAA9ycAAAAAAAAIAAAAKAogICAgICA",
					"AQAAAAAAAAABAAAA/ycAAAAAAAD3JwAAAAAAAAAAAAAAAPC/"
				],
				[
					4166,
					1,
					"left_delete",
					null,
					"AQAAAL0oAAAAAAAAvSgAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAvigAAAAAAAC+KAAAAAAAAAAAAAAAAPC/"
				],
				[
					4169,
					1,
					"left_delete",
					null,
					"AQAAAL0oAAAAAAAAvSgAAAAAAAALAAAACiAgfSBlbHNlIHs",
					"AQAAAAAAAAABAAAAyCgAAAAAAAC9KAAAAAAAAAAAAAAAAPC/"
				],
				[
					4170,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAL0oAAAAAAAAvigAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvSgAAAAAAAC9KAAAAAAAAAAAAAAAAPC/"
				],
				[
					4173,
					1,
					"left_delete",
					null,
					"AQAAAL4oAAAAAAAAvigAAAAAAAAMAAAACiAgICByZXR1cm4g",
					"AQAAAAAAAAABAAAAyigAAAAAAAC+KAAAAAAAAAAAAAAAAPC/"
				],
				[
					4174,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAL4oAAAAAAAAvygAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvigAAAAAAAC+KAAAAAAAAAAAAAAAAPC/"
				],
				[
					4179,
					1,
					"insert",
					{
						"characters": "="
					},
					"AgAAALYnAAAAAAAAtycAAAAAAAAAAAAAtycAAAAAAAC3JwAAAAAAABwAAAAKICBpZiAoc2hvd1JlYmFsYW5jZU1vZGFsKSB7",
					"AQAAAAAAAAABAAAA0icAAAAAAAC2JwAAAAAAAAAAAAAAAPC/"
				],
				[
					4180,
					1,
					"left_delete",
					null,
					"AQAAALYnAAAAAAAAticAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAtycAAAAAAAC3JwAAAAAAAAAAAAAAAPC/"
				],
				[
					4183,
					1,
					"left_delete",
					null,
					"AQAAAKgoAAAAAAAAqCgAAAAAAAAEAAAACiAgfQ",
					"AQAAAAAAAAABAAAArCgAAAAAAACoKAAAAAAAAAAAAAAAAPC/"
				],
				[
					4186,
					1,
					"left_delete",
					null,
					"AQAAALknAAAAAAAAuScAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAuycAAAAAAAC7JwAAAAAAAAAAAAAAAPC/"
				],
				[
					4200,
					1,
					"paste",
					null,
					"AgAAABYFAAAAAAAAIgUAAAAAAAAAAAAAIgUAAAAAAAAiBQAAAAAAAAwAAABTdGFrZVNlY3Rpb24",
					"AQAAAAAAAAABAAAAFgUAAAAAAAAiBQAAAAAAAAAAAAAAAPC/"
				],
				[
					4220,
					1,
					"left_delete",
					null,
					"AQAAALEBAAAAAAAAsQEAAAAAAAA6AAAACmltcG9ydCAqIGFzIGFkZHJlc3NlcyBmcm9tICdAaG9wLXByb3RvY29sL2NvcmUvYWRkcmVzc2VzJw",
					"AQAAAAAAAAABAAAA6wEAAAAAAACxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					4247,
					1,
					"left_delete",
					null,
					"AQAAALEBAAAAAAAAsQEAAAAAAAB9AAAACmltcG9ydCB7IGhvcFN0YWtpbmdSZXdhcmRzQ29udHJhY3RzIH0gZnJvbSAnc3JjL2NvbmZpZy9hZGRyZXNzZXMnCmltcG9ydCB7IHN0YWtpbmdSZXdhcmRzQWJpIH0gZnJvbSAnQGhvcC1wcm90b2NvbC9jb3JlL2FiaSc",
					"AQAAAAAAAAABAAAALgIAAAAAAACxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					4292,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACwWAAAAAAAALRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALBYAAAAAAAAsFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4293,
					1,
					"paste",
					null,
					"AQAAAC0WAAAAAAAAfhYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALRYAAAAAAAAtFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4317,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH4WAAAAAAAAfxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfhYAAAAAAAB+FgAAAAAAAAAAAAAAAPC/"
				],
				[
					4318,
					1,
					"paste",
					null,
					"AQAAAH8WAAAAAAAAohYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfxYAAAAAAAB/FgAAAAAAAAAAAAAAAPC/"
				],
				[
					4355,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKIWAAAAAAAAoxYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAohYAAAAAAACiFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4356,
					1,
					"paste",
					null,
					"AQAAAKMWAAAAAAAAtBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoxYAAAAAAACjFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4369,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALQWAAAAAAAAtRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtBYAAAAAAAC0FgAAAAAAAAAAAAAAAPC/"
				],
				[
					4370,
					1,
					"paste",
					null,
					"AQAAALUWAAAAAAAAPhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtRYAAAAAAAC1FgAAAAAAAAAAAAAAAPC/"
				],
				[
					4373,
					1,
					"left_delete",
					null,
					"AQAAALQWAAAAAAAAtBYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAtRYAAAAAAAC1FgAAAAAAAAAAAAAAAPC/"
				],
				[
					4374,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALQWAAAAAAAAtRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtBYAAAAAAAC0FgAAAAAAAAAAAAAAAPC/"
				],
				[
					4377,
					1,
					"left_delete",
					null,
					"AQAAAOAWAAAAAAAA4BYAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA4RYAAAAAAADhFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4378,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOAWAAAAAAAA4RYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4BYAAAAAAADgFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4381,
					2,
					"left_delete",
					null,
					"AgAAAP0WAAAAAAAA/RYAAAAAAAAZAAAAZ2V0RGVhZGxpbmU9e2dldERlYWRsaW5lffwWAAAAAAAA/BYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAFhcAAAAAAAD9FgAAAAAAAAAAAAAAAPC/"
				],
				[
					4405,
					1,
					"insert",
					{
						"characters": "StateVar"
					},
					"CQAAAG0XAAAAAAAAbhcAAAAAAAAAAAAAbhcAAAAAAABuFwAAAAAAAAsAAABUcmFuc2FjdGlvbm4XAAAAAAAAbxcAAAAAAAAAAAAAbxcAAAAAAABwFwAAAAAAAAAAAABwFwAAAAAAAHEXAAAAAAAAAAAAAHEXAAAAAAAAchcAAAAAAAAAAAAAchcAAAAAAABzFwAAAAAAAAAAAABzFwAAAAAAAHQXAAAAAAAAAAAAAHQXAAAAAAAAdRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeBcAAAAAAABtFwAAAAAAAAAAAAAAAPC/"
				],
				[
					4406,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAHUXAAAAAAAAdhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdRcAAAAAAAB1FwAAAAAAAAAAAAAAAPC/"
				],
				[
					4419,
					1,
					"left_delete",
					null,
					"AQAAAH0LAAAAAAAAfQsAAAAAAAABAAAANg",
					"AQAAAAAAAAABAAAAfgsAAAAAAAB+CwAAAAAAAAAAAAAAAPC/"
				],
				[
					4420,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAH0LAAAAAAAAfgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQsAAAAAAAB9CwAAAAAAAAAAAAAAAPC/"
				],
				[
					4431,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAFYEAAAAAAAAVwQAAAAAAAAAAAAAVwQAAAAAAABYBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgQAAAAAAABWBAAAAAAAAAAAAAAAAPC/"
				],
				[
					4432,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFgEAAAAAAAAWQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAQAAAAAAABYBAAAAAAAAAAAAAAAAPC/"
				],
				[
					4435,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAP0VAAAAAAAA/hUAAAAAAAAAAAAA/hUAAAAAAAD/FQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/RUAAAAAAAD9FQAAAAAAAAAAAAAAAPC/"
				],
				[
					4436,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP8VAAAAAAAAABYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/xUAAAAAAAD/FQAAAAAAAAAAAAAAAPC/"
				],
				[
					4439,
					1,
					"left_delete",
					null,
					"AQAAAIALAAAAAAAAgAsAAAAAAAABAAAANQ",
					"AQAAAAAAAAABAAAAgQsAAAAAAACBCwAAAAAAAAAAAAAAAPC/"
				],
				[
					4440,
					1,
					"insert",
					{
						"characters": "6"
					},
					"AQAAAIALAAAAAAAAgQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAsAAAAAAACACwAAAAAAAAAAAAAAAPC/"
				],
				[
					4445,
					3,
					"left_delete",
					null,
					"AwAAAP8VAAAAAAAA/xUAAAAAAAABAAAAIP4VAAAAAAAA/hUAAAAAAAABAAAAL/0VAAAAAAAA/RUAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAABYAAAAAAAAAFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4448,
					3,
					"left_delete",
					null,
					"AwAAAFgEAAAAAAAAWAQAAAAAAAABAAAAIFcEAAAAAAAAVwQAAAAAAAABAAAAL1YEAAAAAAAAVgQAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAWQQAAAAAAABZBAAAAAAAAAAAAAAAAPC/"
				],
				[
					4449,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAFYEAAAAAAAAVwQAAAAAAAAAAAAAVwQAAAAAAABYBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgQAAAAAAABWBAAAAAAAAAAAAAAAAPC/"
				],
				[
					4450,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFgEAAAAAAAAWQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAQAAAAAAABYBAAAAAAAAAAAAAAAAPC/"
				],
				[
					4453,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAP0VAAAAAAAA/hUAAAAAAAAAAAAA/hUAAAAAAAD/FQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/RUAAAAAAAD9FQAAAAAAAAAAAAAAAPC/"
				],
				[
					4454,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP8VAAAAAAAAABYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/xUAAAAAAAD/FQAAAAAAAAAAAAAAAPC/"
				],
				[
					4459,
					3,
					"left_delete",
					null,
					"AwAAAFgEAAAAAAAAWAQAAAAAAAABAAAAIFcEAAAAAAAAVwQAAAAAAAABAAAAL1YEAAAAAAAAVgQAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAWQQAAAAAAABZBAAAAAAAAAAAAAAAAPC/"
				],
				[
					4462,
					3,
					"left_delete",
					null,
					"AwAAAPwVAAAAAAAA/BUAAAAAAAABAAAAIPsVAAAAAAAA+xUAAAAAAAABAAAAL/oVAAAAAAAA+hUAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAA/RUAAAAAAAD9FQAAAAAAAAAAAAAAAPC/"
				],
				[
					4498,
					1,
					"left_delete",
					null,
					"AQAAAH0LAAAAAAAAfQsAAAAAAAABAAAANg",
					"AQAAAAAAAAABAAAAfgsAAAAAAAB+CwAAAAAAAAAAAAAAAPC/"
				],
				[
					4499,
					1,
					"insert",
					{
						"characters": "7"
					},
					"AQAAAH0LAAAAAAAAfgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQsAAAAAAAB9CwAAAAAAAAAAAAAAAPC/"
				],
				[
					4502,
					1,
					"insert",
					{
						"characters": "()"
					},
					"AgAAAA8WAAAAAAAAEBYAAAAAAAAAAAAAEBYAAAAAAAARFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADxYAAAAAAAAPFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4503,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAABEWAAAAAAAAEhYAAAAAAAAAAAAAEhYAAAAAAAATFgAAAAAAAAAAAAATFgAAAAAAABQWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAERYAAAAAAAARFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4504,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABQWAAAAAAAAFRYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFBYAAAAAAAAUFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4507,
					3,
					"left_delete",
					null,
					"AwAAAC8XAAAAAAAALxcAAAAAAAAOAAAAICAgIDxwPkVuZDwvcD4uFwAAAAAAAC4XAAAAAAAAAQAAAAotFwAAAAAAAC0XAAAAAAAAAQAAACw",
					"AQAAAAAAAAABAAAAPRcAAAAAAAAvFwAAAAAAAAAAAAAAAPC/"
				],
				[
					4556,
					1,
					"left_delete",
					null,
					"AQAAAH0LAAAAAAAAfQsAAAAAAAABAAAANw",
					"AQAAAAAAAAABAAAAfgsAAAAAAAB+CwAAAAAAAAAAAAAAAPC/"
				],
				[
					4557,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAH0LAAAAAAAAfgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQsAAAAAAAB9CwAAAAAAAAAAAAAAAPC/"
				],
				[
					4560,
					1,
					"left_delete",
					null,
					"AQAAAJ0EAAAAAAAAnQQAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAngQAAAAAAACeBAAAAAAAAAAAAAAAAPC/"
				],
				[
					4563,
					1,
					"left_delete",
					null,
					"AQAAADAXAAAAAAAAMBcAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAMRcAAAAAAAAxFwAAAAAAAAAAAAAAAPC/"
				],
				[
					4566,
					1,
					"left_delete",
					null,
					"AQAAAJkYAAAAAAAAmRgAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAmhgAAAAAAACaGAAAAAAAAAAAAAAAAPC/"
				],
				[
					4569,
					2,
					"left_delete",
					null,
					"AgAAADEXAAAAAAAAMRcAAAAAAABoAQAACiAgLyogREVCVUcgRlVOQ1RJT05TICovCgogIGFzeW5jIGZ1bmN0aW9uIGRlYnVnU3RhdGVWYXJzKCkgewogICAgY29uc29sZS5sb2coIkxvZ2dpbmcgc3RhdGUgdmFsdWVzOiIpCiAgICBjb25zb2xlLmxvZygiZGVzdGluYXRpb25OZXR3b3JrSWQ6IiwgZGVzdGluYXRpb25OZXR3b3JrSWQpCiAgICBjb25zb2xlLmxvZygiZXJjMjBQb3NpdGlvbkJhbGFuY2U6IiwgZXJjMjBQb3NpdGlvbkJhbGFuY2UpCiAgICBjb25zb2xlLmxvZygiYnJpZGdlVHhIYXNoOiIsIGJyaWRnZVR4SGFzaCkKICAgIGNvbnNvbGUubG9nKCJudW1iZXJPZkJyaWRnZWRUb2tlbnNSZWNlaXZlZDoiLCBudW1iZXJPZkJyaWRnZWRUb2tlbnNSZWNlaXZlZCkKICB9MBcAAAAAAAAwFwAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAmRgAAAAAAAAxFwAAAAAAAAAAAAAAAPC/"
				],
				[
					4572,
					1,
					"left_delete",
					null,
					"AQAAAH0mAAAAAAAAfSYAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAfiYAAAAAAAB+JgAAAAAAAAAAAAAAAPC/"
				],
				[
					4596,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAALgEAAAAAAAAuQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAQAAAAAAAC4BAAAAAAAAAAAAAAAAPC/"
				],
				[
					4614,
					1,
					"left_delete",
					null,
					"AQAAALEYAAAAAAAAsRgAAAAAAACDBAAAICAvLyBnZXQgYW4gYXJyYXkgb2YgcG90ZW50aWFsIG5ldHdvcmtzLCBzb3J0ZWQgYnkgZGVzY2VuZGluZyB5aWVsZAogIGZ1bmN0aW9uIGdldE5ldHdvcmtzV2l0aFlpZWxkcygpOiBbc3RyaW5nLCBudW1iZXIsIHN0cmluZ11bXSB7CiAgICB0cnkgewogICAgICBjb25zdCBhbGxOZXR3b3JrcyA9IHBvb2xTdGF0cwogICAgICBjb25zdCBjaGFpbk5hbWVzID0gYWxsTmV0d29ya3MgPyBPYmplY3Qua2V5cyhhbGxOZXR3b3JrcykgOiBbXQoKICAgICAgY29uc3QgY2hhaW5zV2l0aFRvdGFsQVBSID0gY2hhaW5OYW1lcy5yZWR1Y2UoKGFjYzogW3N0cmluZywgbnVtYmVyLCBzdHJpbmddW10sIGNoYWluOiBzdHJpbmcpID0+IHsKICAgICAgICAvLyBpZiBBUFIgZGF0YSBpcyB1bmRlZmluZWQsIGJyZWFrCiAgICAgICAgaWYgKHR5cGVvZiBhbGxOZXR3b3Jrcz8uW2NoYWluXT8uW3Rva2VuU3ltYm9sXT8udG90YWxBcHIgPT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICByZXR1cm4gYWNjCiAgICAgICAgfQoKICAgICAgICAvLyBpbmNsdWRlIGNoYWluIG9ubHkgaWYgdGhlcmUgaXMgQVBSCiAgICAgICAgaWYgKGFsbE5ldHdvcmtzW2NoYWluXVt0b2tlblN5bWJvbF0udG90YWxBcHIgPiAwKSB7CiAgICAgICAgICBhY2MucHVzaChbY2hhaW4sIGFsbE5ldHdvcmtzW2NoYWluXVt0b2tlblN5bWJvbF0udG90YWxBcHIsIGFsbE5ldHdvcmtzW2NoYWluXVt0b2tlblN5bWJvbF0udG90YWxBcHJGb3JtYXR0ZWRdKQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGFjYwogICAgICB9LCBbXSkKCiAgICAgIC8vIHNvcnQgY2hhaW5zIGJ5IEFQUgogICAgICBjb25zdCBjaGFpbnNTb3J0ZWRCeUFQUiA9IHNvcnRUdXBsZXNEZXNjZW5kaW5nKGNoYWluc1dpdGhUb3RhbEFQUikKCiAgICAgIHJldHVybiBjaGFpbnNTb3J0ZWRCeUFQUgogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgY29uc29sZS5lcnJvcihlcnJvcikKCiAgICAgIHJldHVybiBbXQogICAgfQoKICAgIGZ1bmN0aW9uIHNvcnRUdXBsZXNEZXNjZW5kaW5nKHR1cGxlQXJyYXk6IFtzdHJpbmcsIG51bWJlciwgc3RyaW5nXVtdKTogW3N0cmluZywgbnVtYmVyLCBzdHJpbmddW10gewogICAgICByZXR1cm4gdHVwbGVBcnJheS5zb3J0KChhLCBiKSA9PiBiWzFdIC0gYVsxXSkKICAgIH0KICB9",
					"AQAAAAAAAAABAAAANB0AAAAAAACxGAAAAAAAAAAAAAAAAPC/"
				],
				[
					4615,
					1,
					"reindent",
					null,
					"AQAAALEYAAAAAAAAsxgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsRgAAAAAAACxGAAAAAAAAAAAAAAAAPC/"
				],
				[
					4616,
					1,
					"left_delete",
					null,
					"AwAAALEYAAAAAAAAsRgAAAAAAAACAAAAICCwGAAAAAAAALAYAAAAAAAAAQAAAAqvGAAAAAAAAK8YAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAsxgAAAAAAACzGAAAAAAAAAAAAAAAAPC/"
				],
				[
					4619,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AQAAADkFAAAAAAAAOgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQUAAAAAAAA5BQAAAAAAAAAAAAAAAPC/"
				],
				[
					4620,
					1,
					"left_delete",
					null,
					"AQAAADkFAAAAAAAAOQUAAAAAAAABAAAAXA",
					"AQAAAAAAAAABAAAAOgUAAAAAAAA6BQAAAAAAAAAAAAAAAPC/"
				],
				[
					4621,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADkFAAAAAAAAOgUAAAAAAAAAAAAAOgUAAAAAAAA8BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQUAAAAAAAA5BQAAAAAAAAAAAAAAAPC/"
				],
				[
					4622,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAADwFAAAAAAAAPQUAAAAAAAAAAAAAPQUAAAAAAAA+BQAAAAAAAAAAAAA+BQAAAAAAAD8FAAAAAAAAAAAAAD8FAAAAAAAAQAUAAAAAAAAAAAAAQAUAAAAAAABBBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAUAAAAAAAA8BQAAAAAAAAAAAAAAAPC/"
				],
				[
					4623,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEEFAAAAAAAAQgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQUAAAAAAABBBQAAAAAAAAAAAAAAAPC/"
				],
				[
					4624,
					1,
					"paste",
					null,
					"AQAAAEIFAAAAAAAASgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgUAAAAAAABCBQAAAAAAAAAAAAAAAPC/"
				],
				[
					4629,
					1,
					"paste",
					null,
					"AgAAAEIFAAAAAAAAVwUAAAAAAAAAAAAAVwUAAAAAAABXBQAAAAAAAAgAAABmdW5jdGlvbg",
					"AQAAAAAAAAABAAAAQgUAAAAAAABKBQAAAAAAAAAAAAAAAPC/"
				],
				[
					4630,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAFcFAAAAAAAAWAUAAAAAAAAAAAAAWAUAAAAAAABZBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwUAAAAAAABXBQAAAAAAAAAAAAAAAPC/"
				],
				[
					4631,
					1,
					"insert",
					{
						"characters": " props."
					},
					"BwAAAFkFAAAAAAAAWgUAAAAAAAAAAAAAWgUAAAAAAABbBQAAAAAAAAAAAABbBQAAAAAAAFwFAAAAAAAAAAAAAFwFAAAAAAAAXQUAAAAAAAAAAAAAXQUAAAAAAABeBQAAAAAAAAAAAABeBQAAAAAAAF8FAAAAAAAAAAAAAF8FAAAAAAAAYAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQUAAAAAAABZBQAAAAAAAAAAAAAAAPC/"
				],
				[
					4632,
					1,
					"paste",
					null,
					"AQAAAGAFAAAAAAAAdQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAUAAAAAAABgBQAAAAAAAAAAAAAAAPC/"
				],
				[
					4649,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAN0EAAAAAAAA3gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QQAAAAAAADdBAAAAAAAAAAAAAAAAPC/"
				],
				[
					4652,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAABcFAAAAAAAAGAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwUAAAAAAAAXBQAAAAAAAAAAAAAAAPC/"
				],
				[
					4655,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAPkEAAAAAAAA+gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QQAAAAAAAD5BAAAAAAAAAAAAAAAAPC/"
				],
				[
					4658,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAADcFAAAAAAAAOAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwUAAAAAAAA3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					4665,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAJsOAAAAAAAAnA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmw4AAAAAAACbDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4668,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAALMOAAAAAAAAtA4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsw4AAAAAAACzDgAAAAAAAAAAAAAAAPC/"
				],
				[
					4671,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAGcWAAAAAAAAaBYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZxYAAAAAAABnFgAAAAAAAAAAAAAAAPC/"
				],
				[
					4674,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAFQiAAAAAAAAVSIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVCIAAAAAAABUIgAAAAAAAAAAAAAAAPC/"
				],
				[
					4677,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAIciAAAAAAAAiCIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhyIAAAAAAACHIgAAAAAAAAAAAAAAAPC/"
				],
				[
					4702,
					1,
					"left_delete",
					null,
					"AQAAAD0FAAAAAAAAPQUAAAAAAAA8AAAACiAgY29uc3QgZ2V0TmV0d29ya3NXaXRoWWllbGRzID0gcHJvcHMuZ2V0TmV0d29ya3NXaXRoWWllbGRz",
					"AQAAAAAAAAABAAAAeQUAAAAAAAA9BQAAAAAAAAAAAAAAAPC/"
				],
				[
					4705,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAFIXAAAAAAAAUxcAAAAAAAAAAAAAUxcAAAAAAABVFwAAAAAAAAAAAABVFwAAAAAAAFYXAAAAAAAAAAAAAFYXAAAAAAAAWBcAAAAAAAAAAAAAUxcAAAAAAABTFwAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAUhcAAAAAAABSFwAAAAAAAAAAAAAAAPC/"
				],
				[
					4706,
					1,
					"paste",
					null,
					"AQAAAFYXAAAAAAAA2RsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVhcAAAAAAABWFwAAAAAAAAAAAAAAAPC/"
				],
				[
					4709,
					1,
					"left_delete",
					null,
					"AQAAAFYXAAAAAAAAVhcAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAWBcAAAAAAABYFwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "packages/frontend/src/components/Rebalancer/Sections/NetworkSelection.tsx",
			"redo_stack":
			[
				[
					53,
					1,
					"left_delete",
					null,
					"AQAAAOsJAAAAAAAA8AkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6wkAAAAAAADrCQAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"paste",
					null,
					"AQAAAOYJAAAAAAAA5gkAAAAAAAASAAAAYWxpZ25JdGVtcz0icmlnaHQi",
					"AQAAAAAAAAABAAAA+AkAAAAAAAD4CQAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOUJAAAAAAAA5QkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA5gkAAAAAAADmCQAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "right"
					},
					"BgAAACwKAAAAAAAALAoAAAAAAAABAAAAdCsKAAAAAAAAKwoAAAAAAAABAAAAaCoKAAAAAAAAKgoAAAAAAAABAAAAZykKAAAAAAAAKQoAAAAAAAABAAAAaSkKAAAAAAAALwoAAAAAAAAAAAAAKAoAAAAAAAAoCgAAAAAAAAEAAABy",
					"AQAAAAAAAAABAAAALQoAAAAAAAAtCgAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"left_delete",
					null,
					"DAAAAKEKAAAAAAAAogoAAAAAAAAAAAAAogoAAAAAAACjCgAAAAAAAAAAAACjCgAAAAAAAKQKAAAAAAAAAAAAAKQKAAAAAAAApQoAAAAAAAAAAAAApQoAAAAAAACmCgAAAAAAAAAAAACmCgAAAAAAAKcKAAAAAAAAAAAAAKcKAAAAAAAAqAoAAAAAAAAAAAAAqAoAAAAAAACpCgAAAAAAAAAAAACpCgAAAAAAAKoKAAAAAAAAAAAAAKoKAAAAAAAAqwoAAAAAAAAAAAAAqwoAAAAAAACsCgAAAAAAAAAAAACsCgAAAAAAAK0KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoQoAAAAAAAChCgAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAK0KAAAAAAAArgoAAAAAAAAAAAAArQoAAAAAAACuCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQoAAAAAAACtCgAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"left_delete",
					null,
					"AQAAAK4KAAAAAAAAtAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArgoAAAAAAACuCgAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "center"
					},
					"BgAAALMKAAAAAAAAswoAAAAAAAABAAAAcrIKAAAAAAAAsgoAAAAAAAABAAAAZbEKAAAAAAAAsQoAAAAAAAABAAAAdLAKAAAAAAAAsAoAAAAAAAABAAAAbq8KAAAAAAAArwoAAAAAAAABAAAAZa4KAAAAAAAArgoAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAtAoAAAAAAAC0CgAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAK0KAAAAAAAArQoAAAAAAAACAAAAIiI",
					"AQAAAAAAAAABAAAArgoAAAAAAACuCgAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "ems="
					},
					"BAAAAKwKAAAAAAAArAoAAAAAAAABAAAAPasKAAAAAAAAqwoAAAAAAAABAAAAc6oKAAAAAAAAqgoAAAAAAAABAAAAbakKAAAAAAAAqQoAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAArQoAAAAAAACtCgAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " alignIt"
					},
					"CAAAAKgKAAAAAAAAqAoAAAAAAAABAAAAdKcKAAAAAAAApwoAAAAAAAABAAAASaYKAAAAAAAApgoAAAAAAAABAAAAbqUKAAAAAAAApQoAAAAAAAABAAAAZ6QKAAAAAAAApAoAAAAAAAABAAAAaaMKAAAAAAAAowoAAAAAAAABAAAAbKIKAAAAAAAAogoAAAAAAAABAAAAYaEKAAAAAAAAoQoAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAqQoAAAAAAACpCgAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADMLAAAAAAAAMwsAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAANAsAAAAAAAA0CwAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 3386,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"contents": "Searching 1578 files for \"setShowRebalanceModal\"\n\n~/Sandbox/hop/packages/frontend/src/components/Rebalancer/Sections/UnstakeWithdraw.tsx:\n   27    const getHumanErrorMessage = props.getHumanErrorMessage\n   28    const setERC20PositionBalance = props.setERC20PositionBalance\n   29:   const setShowRebalanceModal = props.setShowRebalanceModal\n   30  \n   31    const stakingContractAddress = hopStakingRewardsContracts?.[reactAppNetwork]?.[chainSlug]?.[tokenSymbol]\n   ..\n  104          setStatusMessage(\"No tokens to withdraw\")\n  105          setIsTransacting(false)\n  106:         setShowRebalanceModal(false)\n  107          return\n  108        } else {\n\n~/Sandbox/hop/packages/frontend/src/pages/Pools/PoolDetails/TopPoolStats.tsx:\n   14    tvlFormatted: string\n   15    volume24hFormatted: string\n   16:   setShowRebalanceModal: (showRebalanceModal: boolean) => void\n   17  }\n   18  \n   ..\n   26      tvlFormatted,\n   27      volume24hFormatted,\n   28:     setShowRebalanceModal,\n   29    } = props\n   30  \n   ..\n   36    function handleRebalanceClick (event: ChangeEvent<{}>) {\n   37      event.preventDefault()\n   38:     props.setShowRebalanceModal(true)\n   39    }\n   40  \n\n~/Sandbox/hop/packages/frontend/src/pages/Pools/PoolDetails/TopPoolStats.tsx:\n   14    tvlFormatted: string\n   15    volume24hFormatted: string\n   16:   setShowRebalanceModal: (showRebalanceModal: boolean) => void\n   17  }\n   18  \n   ..\n   26      tvlFormatted,\n   27      volume24hFormatted,\n   28:     setShowRebalanceModal,\n   29    } = props\n   30  \n   ..\n   36    function handleRebalanceClick (event: ChangeEvent<{}>) {\n   37      event.preventDefault()\n   38:     props.setShowRebalanceModal(true)\n   39    }\n   40  \n\n9 matches across 3 files\n\n\nSearching 1578 files for \"setShowRebalanceModal\"\n\n~/Sandbox/hop/packages/frontend/src/components/Rebalancer/Sections/UnstakeWithdraw.tsx:\n   27    const getHumanErrorMessage = props.getHumanErrorMessage\n   28    const setERC20PositionBalance = props.setERC20PositionBalance\n   29:   const setShowRebalanceModal = props.setShowRebalanceModal\n   30  \n   31    const stakingContractAddress = hopStakingRewardsContracts?.[reactAppNetwork]?.[chainSlug]?.[tokenSymbol]\n   ..\n  104          setStatusMessage(\"No tokens to withdraw\")\n  105          setIsTransacting(false)\n  106:         setShowRebalanceModal(false)\n  107          return\n  108        } else {\n\n3 matches in 1 file\n\n\nSearching 1579 files for \"setNetworksWithYields\"\n\n~/Sandbox/hop/packages/frontend/src/components/Rebalancer/Modal.tsx:\n   37  \n   38    const { poolStats } = usePoolStats()\n   39:   const [networksWithYields, setNetworksWithYields] = useState<[string, number, string][]>([])\n   40:   useEffect(() => { setNetworksWithYields(getNetworksWithYields()) }, [poolStats])\n   41  \n   42    const [destinationNetworkId, setDestinationNetworkId] = useState<number>(chainSlug === \"optimism\" ? networkSlugToId(\"arbitrum\") : networkSlugToId(\"optimism\"))\n\n~/Sandbox/hop/packages/frontend/src/pages/Pools/PoolDetails/PoolDetails.tsx:\n  144    // get array of APRs for potential networks to determine if another has a higher yield\n  145    const { poolStats } = usePoolStats()\n  146:   const [networksWithYields, setNetworksWithYields] = useState<[string, number, string][]>([])\n  147:   useEffect(() => { setNetworksWithYields(getNetworksWithYields()) }, [poolStats])\n  148  \n  149    // get an array of potential networks, sorted by descending yield\n\n~/Sandbox/hop/packages/frontend/src/pages/Pools/PoolDetails/PoolDetails.tsx:\n  144    // get array of APRs for potential networks to determine if another has a higher yield\n  145    const { poolStats } = usePoolStats()\n  146:   const [networksWithYields, setNetworksWithYields] = useState<[string, number, string][]>([])\n  147:   useEffect(() => { setNetworksWithYields(getNetworksWithYields()) }, [poolStats])\n  148  \n  149    // get an array of potential networks, sorted by descending yield\n\n<untitled 232>:\n    ERROR: Unable to open file\n\n6 matches across 3 files\n\n\nSearching 1578 files for \"Get Higher APR\"\n\n~/Sandbox/hop/packages/frontend/src/pages/Pools/PoolDetails/TopPoolStats.tsx:\n  105                    <ShowChartRoundedIcon className={styles.notStakedMessageColor} style={{ fontSize: '2.5rem' }}/>\n  106                  </Box>\n  107:                 <strong>Get higher APR</strong>\n  108                </Box>\n  109              </Typography>\n\n~/Sandbox/hop/packages/frontend/src/pages/Pools/PoolDetails/TopPoolStats.tsx:\n  105                    <ShowChartRoundedIcon className={styles.notStakedMessageColor} style={{ fontSize: '2.5rem' }}/>\n  106                  </Box>\n  107:                 <strong>Get higher APR</strong>\n  108                </Box>\n  109              </Typography>\n\n2 matches across 2 files\n\n\nSearching 1578 files for \"Promise\"\n\n~/Sandbox/hop/yarn.lock:\n   87      npm-pick-manifest \"^3.0.0\"\n   88      osenv \"^0.1.5\"\n   89:     promise-inflight \"^1.0.1\"\n   90:     promise-retry \"^1.1.1\"\n   91      protoduck \"^5.0.1\"\n   92      rimraf \"^2.6.3\"\n   ..\n  942    dependencies:\n  943      is-windows \"^1.0.0\"\n  944:     mkdirp-promise \"^5.0.1\"\n  945      mz \"^2.5.0\"\n  946  \n  ...\n 1021      color-convert \"^1.9.0\"\n 1022  \n 1023: any-promise@^1.0.0:\n 1024    version \"1.3.0\"\n 1025:   resolved \"https://registry.yarnpkg.com/any-promise/-/any-promise-1.3.0.tgz#abc6afeedcea52e809cdc0376aed3ce39635d17f\"\n 1026    integrity sha1-q8av7tzqUugJzcA3au0845Y10X8=\n 1027  \n ....\n 1249      mkdirp \"^0.5.1\"\n 1250      move-concurrently \"^1.0.1\"\n 1251:     promise-inflight \"^1.0.1\"\n 1252      rimraf \"^2.6.3\"\n 1253      ssri \"^6.0.1\"\n ....\n 1907      is-symbol \"^1.0.2\"\n 1908  \n 1909: es6-promise@^4.0.3:\n 1910    version \"4.2.8\"\n 1911:   resolved \"https://registry.yarnpkg.com/es6-promise/-/es6-promise-4.2.8.tgz#4eb21594c972bc40553d276e510539143db53e0a\"\n 1912    integrity sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w==\n 1913  \n ....\n 1917    integrity sha1-UQnWLz5W6pZ8S2NQWu8IKRyKUgM=\n 1918    dependencies:\n 1919:     es6-promise \"^4.0.3\"\n 1920  \n 1921  escape-string-regexp@^1.0.5:\n ....\n 2068    dependencies:\n 2069      path-exists \"^2.0.0\"\n 2070:     pinkie-promise \"^2.0.0\"\n 2071  \n 2072  find-up@^2.0.0:\n ....\n 3056      parse-json \"^2.2.0\"\n 3057      pify \"^2.0.0\"\n 3058:     pinkie-promise \"^2.0.0\"\n 3059      strip-bom \"^2.0.0\"\n 3060  \n ....\n 3213      mississippi \"^3.0.0\"\n 3214      node-fetch-npm \"^2.0.2\"\n 3215:     promise-retry \"^1.1.1\"\n 3216      socks-proxy-agent \"^4.0.0\"\n 3217      ssri \"^6.0.0\"\n ....\n 3406      is-extendable \"^1.0.1\"\n 3407  \n 3408: mkdirp-promise@^5.0.1:\n 3409    version \"5.0.1\"\n 3410:   resolved \"https://registry.yarnpkg.com/mkdirp-promise/-/mkdirp-promise-5.0.1.tgz#e9b8f68e552c68a9c1713b84883f7a1dd039b8a1\"\n 3411    integrity sha1-6bj2jlUsaKnBcTuEiD96HdA5uKE=\n 3412    dependencies:\n ....\n 3477    integrity sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==\n 3478    dependencies:\n 3479:     any-promise \"^1.0.0\"\n 3480      object-assign \"^4.0.1\"\n 3481      thenify-all \"^1.0.0\"\n ....\n 3917    integrity sha1-D+tsZPD8UY2adU3V77YscCJ2H0s=\n 3918    dependencies:\n 3919:     pinkie-promise \"^2.0.0\"\n 3920  \n 3921  path-exists@^3.0.0:\n ....\n 3951      graceful-fs \"^4.1.2\"\n 3952      pify \"^2.0.0\"\n 3953:     pinkie-promise \"^2.0.0\"\n 3954  \n 3955  path-type@^3.0.0:\n ....\n 3980    integrity sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g==\n 3981  \n 3982: pinkie-promise@^2.0.0:\n 3983    version \"2.0.1\"\n 3984:   resolved \"https://registry.yarnpkg.com/pinkie-promise/-/pinkie-promise-2.0.1.tgz#2135d6dfa7a358c069ac9b178776288228450ffa\"\n 3985    integrity sha1-ITXW36ejWMBprJsXh3YogihFD/o=\n 3986    dependencies:\n ....\n 4009    integrity sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==\n 4010  \n 4011: promise-inflight@^1.0.1:\n 4012    version \"1.0.1\"\n 4013:   resolved \"https://registry.yarnpkg.com/promise-inflight/-/promise-inflight-1.0.1.tgz#98472870bf228132fcbdd868129bad12c3c029e3\"\n 4014    integrity sha1-mEcocL8igTL8vdhoEputEsPAKeM=\n 4015  \n 4016: promise-retry@^1.1.1:\n 4017    version \"1.1.1\"\n 4018:   resolved \"https://registry.yarnpkg.com/promise-retry/-/promise-retry-1.1.1.tgz#6739e968e3051da20ce6497fb2b50f6911df3d6d\"\n 4019    integrity sha1-ZznpaOMFHaIM5kl/srUPaRHfPW0=\n 4020    dependencies:\n ....\n 4880    integrity sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==\n 4881    dependencies:\n 4882:     any-promise \"^1.0.0\"\n 4883  \n 4884  through2@^2.0.0, through2@^2.0.2:\n\n~/Sandbox/hop/packages/api/package-lock.json:\n 2682        }\n 2683      },\n 2684:     \"node_modules/es6-promise\": {\n 2685        \"version\": \"4.2.8\",\n 2686:       \"resolved\": \"https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz\",\n 2687        \"integrity\": \"sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w==\"\n 2688      },\n ....\n 2792          \"eslint-plugin-import\": \"^2.25.2\",\n 2793          \"eslint-plugin-n\": \"^15.0.0\",\n 2794:         \"eslint-plugin-promise\": \"^6.0.0\"\n 2795        }\n 2796      },\n ....\n 2983        }\n 2984      },\n 2985:     \"node_modules/eslint-plugin-promise\": {\n 2986        \"version\": \"6.0.1\",\n 2987:       \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-6.0.1.tgz\",\n 2988        \"integrity\": \"sha512-uM4Tgo5u3UWQiroOyDEsYcVMOo7re3zmno0IZmB5auxoaQNIceAbXEkSt8RNrKtaYehARHG06pYK6K1JhtP0Zw==\",\n 2989        \"dev\": true,\n ....\n 3257          \"servify\": \"^0.1.12\",\n 3258          \"ws\": \"^3.0.0\",\n 3259:         \"xhr-request-promise\": \"^0.1.2\"\n 3260        }\n 3261      },\n ....\n 5250        \"optional\": true\n 5251      },\n 5252:     \"node_modules/mkdirp-promise\": {\n 5253        \"version\": \"5.0.1\",\n 5254:       \"resolved\": \"https://registry.npmjs.org/mkdirp-promise/-/mkdirp-promise-5.0.1.tgz\",\n 5255        \"integrity\": \"sha512-Hepn5kb1lJPtVW84RFT40YG1OddBNTOVUZR2bzQUHc+Z03en8/3uX0+060JDhcEzyO08HmipsN9DcnFMxhIL9w==\",\n 5256:       \"deprecated\": \"This package is broken and no longer maintained. 'mkdirp' itself supports promises now, please switch to that.\",\n 5257        \"dependencies\": {\n 5258          \"mkdirp\": \"*\"\n ....\n 6655          \"eslint-plugin-import\": \"^2.26.0\",\n 6656          \"eslint-plugin-n\": \"^15.1.0\",\n 6657:         \"eslint-plugin-promise\": \"^6.0.0\",\n 6658          \"eslint-plugin-react\": \"^7.28.0\",\n 6659          \"standard-engine\": \"^15.0.0\"\n ....\n 6855          \"got\": \"^7.1.0\",\n 6856          \"mime-types\": \"^2.1.16\",\n 6857:         \"mkdirp-promise\": \"^5.0.1\",\n 6858          \"mock-fs\": \"^4.1.0\",\n 6859          \"setimmediate\": \"^1.0.5\",\n ....\n 7502          \"bn.js\": \"^4.11.6\",\n 7503          \"elliptic\": \"^6.4.0\",\n 7504:         \"xhr-request-promise\": \"^0.1.2\"\n 7505        }\n 7506      },\n ....\n 7603          \"abortcontroller-polyfill\": \"^1.7.3\",\n 7604          \"cross-fetch\": \"^3.1.4\",\n 7605:         \"es6-promise\": \"^4.2.8\",\n 7606          \"web3-core-helpers\": \"1.7.5\"\n 7607        },\n ....\n 7842        }\n 7843      },\n 7844:     \"node_modules/xhr-request-promise\": {\n 7845        \"version\": \"0.1.3\",\n 7846:       \"resolved\": \"https://registry.npmjs.org/xhr-request-promise/-/xhr-request-promise-0.1.3.tgz\",\n 7847        \"integrity\": \"sha512-YUBytBsuwgitWtdRzXDDkWAXzhdGB8bYm0sSzMPZT7Z2MBjMSTHFsyCT1yCRATY+XC69DUrQraRAEgcoCRaIPg==\",\n 7848        \"dependencies\": {\n ....\n 9929        }\n 9930      },\n 9931:     \"es6-promise\": {\n 9932        \"version\": \"4.2.8\",\n 9933:       \"resolved\": \"https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz\",\n 9934        \"integrity\": \"sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w==\"\n 9935      },\n ....\n 10179        }\n 10180      },\n 10181:     \"eslint-plugin-promise\": {\n 10182        \"version\": \"6.0.1\",\n 10183:       \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-6.0.1.tgz\",\n 10184        \"integrity\": \"sha512-uM4Tgo5u3UWQiroOyDEsYcVMOo7re3zmno0IZmB5auxoaQNIceAbXEkSt8RNrKtaYehARHG06pYK6K1JhtP0Zw==\",\n 10185        \"dev\": true\n .....\n 10340          \"servify\": \"^0.1.12\",\n 10341          \"ws\": \"^3.0.0\",\n 10342:         \"xhr-request-promise\": \"^0.1.2\"\n 10343        },\n 10344        \"dependencies\": {\n .....\n 11889        \"optional\": true\n 11890      },\n 11891:     \"mkdirp-promise\": {\n 11892        \"version\": \"5.0.1\",\n 11893:       \"resolved\": \"https://registry.npmjs.org/mkdirp-promise/-/mkdirp-promise-5.0.1.tgz\",\n 11894        \"integrity\": \"sha512-Hepn5kb1lJPtVW84RFT40YG1OddBNTOVUZR2bzQUHc+Z03en8/3uX0+060JDhcEzyO08HmipsN9DcnFMxhIL9w==\",\n 11895        \"requires\": {\n .....\n 12922          \"eslint-plugin-import\": \"^2.26.0\",\n 12923          \"eslint-plugin-n\": \"^15.1.0\",\n 12924:         \"eslint-plugin-promise\": \"^6.0.0\",\n 12925          \"eslint-plugin-react\": \"^7.28.0\",\n 12926          \"standard-engine\": \"^15.0.0\"\n .....\n 13059          \"got\": \"^7.1.0\",\n 13060          \"mime-types\": \"^2.1.16\",\n 13061:         \"mkdirp-promise\": \"^5.0.1\",\n 13062          \"mock-fs\": \"^4.1.0\",\n 13063          \"setimmediate\": \"^1.0.5\",\n .....\n 13592              \"bn.js\": \"^4.11.6\",\n 13593              \"elliptic\": \"^6.4.0\",\n 13594:             \"xhr-request-promise\": \"^0.1.2\"\n 13595            }\n 13596          },\n .....\n 13678          \"abortcontroller-polyfill\": \"^1.7.3\",\n 13679          \"cross-fetch\": \"^3.1.4\",\n 13680:         \"es6-promise\": \"^4.2.8\",\n 13681          \"web3-core-helpers\": \"1.7.5\"\n 13682        }\n .....\n 13886        }\n 13887      },\n 13888:     \"xhr-request-promise\": {\n 13889        \"version\": \"0.1.3\",\n 13890:       \"resolved\": \"https://registry.npmjs.org/xhr-request-promise/-/xhr-request-promise-0.1.3.tgz\",\n 13891        \"integrity\": \"sha512-YUBytBsuwgitWtdRzXDDkWAXzhdGB8bYm0sSzMPZT7Z2MBjMSTHFsyCT1yCRATY+XC69DUrQraRAEgcoCRaIPg==\",\n 13892        \"requires\": {\n\n~/Sandbox/hop/packages/api/yarn.lock:\n  586      semver \"^7.3.8\"\n  587  \n  588: eslint-plugin-promise@^6.0.0:\n  589    version \"6.1.1\"\n  590:   resolved \"https://registry.yarnpkg.com/eslint-plugin-promise/-/eslint-plugin-promise-6.1.1.tgz#269a3e2772f62875661220631bd4dafcb4083816\"\n  591    integrity sha512-tjqWDwVZQo7UIPMeDReOpUgHCmCiH+ePnVT+5zVapL0uuHnegBUs2smM13CzOs2Xb5+MHMRFTs9v24yjba4Oig==\n  592  \n  ...\n 1769      eslint-plugin-import \"^2.26.0\"\n 1770      eslint-plugin-n \"^15.1.0\"\n 1771:     eslint-plugin-promise \"^6.0.0\"\n 1772      eslint-plugin-react \"^7.28.0\"\n 1773      standard-engine \"^15.0.0\"\n\n~/Sandbox/hop/packages/core/.eslintrc.json:\n   26        \"new-cap\": 0,\n   27        \"prefer-const\": 1,\n   28:       \"no-async-promise-executor\": 0,\n   29        \"node/no-callback-literal\": 0,\n   30        \"import/no-named-default\": 0,\n\n~/Sandbox/hop/packages/core/package-lock.json:\n   44          \"eslint-plugin-json\": \"^3.1.0\",\n   45          \"eslint-plugin-node\": \"^11.1.0\",\n   46:         \"eslint-plugin-promise\": \"^5.1.0\",\n   47          \"eslint-plugin-sort-imports-es6-autofix\": \"^0.6.0\",\n   48          \"eslint-plugin-unused-imports\": \"^1.1.2\",\n   ..\n 8439          \"eslint-plugin-import\": \"^2.22.1\",\n 8440          \"eslint-plugin-node\": \"^11.1.0\",\n 8441:         \"eslint-plugin-promise\": \"^4.2.1 || ^5.0.0\"\n 8442        }\n 8443      },\n ....\n 8668        }\n 8669      },\n 8670:     \"node_modules/eslint-plugin-promise\": {\n 8671        \"version\": \"5.2.0\",\n 8672:       \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-5.2.0.tgz\",\n 8673        \"integrity\": \"sha512-SftLb1pUG01QYq2A/hGAWfDRXqYD82zE7j7TopDOyNdU+7SvvoXREls/+PRTY17vUXzXnZA/zfnyKgRH6x4JJw==\",\n 8674        \"dev\": true,\n ....\n 16148          \"eslint-plugin-import\": \"~2.14.0\",\n 16149          \"eslint-plugin-node\": \"~7.0.1\",\n 16150:         \"eslint-plugin-promise\": \"~4.0.0\",\n 16151          \"eslint-plugin-react\": \"~7.11.1\",\n 16152          \"eslint-plugin-standard\": \"~4.0.0\",\n .....\n 16291          \"eslint-plugin-import\": \">=2.13.0\",\n 16292          \"eslint-plugin-node\": \">=7.0.0\",\n 16293:         \"eslint-plugin-promise\": \">=4.0.0\",\n 16294          \"eslint-plugin-standard\": \">=4.0.0\"\n 16295        }\n .....\n 16383        }\n 16384      },\n 16385:     \"node_modules/standard/node_modules/eslint-plugin-promise\": {\n 16386        \"version\": \"4.0.1\",\n 16387:       \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-4.0.1.tgz\",\n 16388        \"integrity\": \"sha512-Si16O0+Hqz1gDHsys6RtFRrW7cCTB6P7p3OJmKp3Y3dxpQE2qwOA7d3xnV+0mBmrPoi0RBnxlCKvqu70te6wjg==\",\n 16389        \"dev\": true,\n .....\n 25207        }\n 25208      },\n 25209:     \"eslint-plugin-promise\": {\n 25210        \"version\": \"5.2.0\",\n 25211:       \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-5.2.0.tgz\",\n 25212        \"integrity\": \"sha512-SftLb1pUG01QYq2A/hGAWfDRXqYD82zE7j7TopDOyNdU+7SvvoXREls/+PRTY17vUXzXnZA/zfnyKgRH6x4JJw==\",\n 25213        \"dev\": true\n .....\n 30806          \"eslint-plugin-import\": \"~2.14.0\",\n 30807          \"eslint-plugin-node\": \"~7.0.1\",\n 30808:         \"eslint-plugin-promise\": \"~4.0.0\",\n 30809          \"eslint-plugin-react\": \"~7.11.1\",\n 30810          \"eslint-plugin-standard\": \"~4.0.0\",\n .....\n 30976            }\n 30977          },\n 30978:         \"eslint-plugin-promise\": {\n 30979            \"version\": \"4.0.1\",\n 30980:           \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-4.0.1.tgz\",\n 30981            \"integrity\": \"sha512-Si16O0+Hqz1gDHsys6RtFRrW7cCTB6P7p3OJmKp3Y3dxpQE2qwOA7d3xnV+0mBmrPoi0RBnxlCKvqu70te6wjg==\",\n 30982            \"dev\": true\n\n~/Sandbox/hop/packages/core/package.json:\n   64      \"eslint-plugin-json\": \"^3.1.0\",\n   65      \"eslint-plugin-node\": \"^11.1.0\",\n   66:     \"eslint-plugin-promise\": \"^5.1.0\",\n   67      \"eslint-plugin-sort-imports-es6-autofix\": \"^0.6.0\",\n   68      \"eslint-plugin-unused-imports\": \"^1.1.2\",\n\n~/Sandbox/hop/packages/core/yarn.lock:\n 4898      semver \"^5.5.0\"\n 4899  \n 4900: eslint-plugin-promise@^5.1.0:\n 4901    version \"5.2.0\"\n 4902:   resolved \"https://registry.yarnpkg.com/eslint-plugin-promise/-/eslint-plugin-promise-5.2.0.tgz#a596acc32981627eb36d9d75f9666ac1a4564971\"\n 4903    integrity sha512-SftLb1pUG01QYq2A/hGAWfDRXqYD82zE7j7TopDOyNdU+7SvvoXREls/+PRTY17vUXzXnZA/zfnyKgRH6x4JJw==\n 4904  \n 4905: eslint-plugin-promise@~4.0.0:\n 4906    version \"4.0.1\"\n 4907:   resolved \"https://registry.yarnpkg.com/eslint-plugin-promise/-/eslint-plugin-promise-4.0.1.tgz#2d074b653f35a23d1ba89d8e976a985117d1c6a2\"\n 4908    integrity sha512-Si16O0+Hqz1gDHsys6RtFRrW7cCTB6P7p3OJmKp3Y3dxpQE2qwOA7d3xnV+0mBmrPoi0RBnxlCKvqu70te6wjg==\n 4909  \n ....\n 8513      eslint-plugin-import \"~2.14.0\"\n 8514      eslint-plugin-node \"~7.0.1\"\n 8515:     eslint-plugin-promise \"~4.0.0\"\n 8516      eslint-plugin-react \"~7.11.1\"\n 8517      eslint-plugin-standard \"~4.0.0\"\n\n~/Sandbox/hop/packages/frontend/.eslintrc.json:\n   41      \"no-underscore-dangle\": 0,\n   42      \"node/handle-callback-err\": 0,\n   43:     \"no-async-promise-executor\": 0,\n   44      \"react/prop-types\": 0,\n   45      \"react-hooks/exhaustive-deps\": 0,\n\n~/Sandbox/hop/packages/frontend/package-lock.json:\n   77          \"eslint-plugin-jsx-a11y\": \"^6.4.1\",\n   78          \"eslint-plugin-node\": \"^11.1.0\",\n   79:         \"eslint-plugin-promise\": \"^5.1.0\",\n   80          \"eslint-plugin-react\": \"^7.21.5\",\n   81          \"eslint-plugin-react-hooks\": \"^4.2.0\",\n   ..\n  121          \"eslint-plugin-json\": \"^3.1.0\",\n  122          \"eslint-plugin-node\": \"^11.1.0\",\n  123:         \"eslint-plugin-promise\": \"^5.1.0\",\n  124          \"eslint-plugin-sort-imports-es6-autofix\": \"^0.6.0\",\n  125          \"eslint-plugin-unused-imports\": \"^1.1.2\",\n  ...\n 8067          \"eslint-plugin-import\": \"^2.22.1\",\n 8068          \"eslint-plugin-node\": \"^11.1.0\",\n 8069:         \"eslint-plugin-promise\": \"^4.2.1 || ^5.0.0\"\n 8070        }\n 8071      },\n ....\n 8295        }\n 8296      },\n 8297:     \"../core/node_modules/eslint-plugin-promise\": {\n 8298        \"version\": \"5.2.0\",\n 8299:       \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-5.2.0.tgz\",\n 8300        \"integrity\": \"sha512-SftLb1pUG01QYq2A/hGAWfDRXqYD82zE7j7TopDOyNdU+7SvvoXREls/+PRTY17vUXzXnZA/zfnyKgRH6x4JJw==\",\n 8301        \"dev\": true,\n ....\n 15523          \"eslint-plugin-import\": \"~2.14.0\",\n 15524          \"eslint-plugin-node\": \"~7.0.1\",\n 15525:         \"eslint-plugin-promise\": \"~4.0.0\",\n 15526          \"eslint-plugin-react\": \"~7.11.1\",\n 15527          \"eslint-plugin-standard\": \"~4.0.0\",\n .....\n 15660          \"eslint-plugin-import\": \">=2.13.0\",\n 15661          \"eslint-plugin-node\": \">=7.0.0\",\n 15662:         \"eslint-plugin-promise\": \">=4.0.0\",\n 15663          \"eslint-plugin-standard\": \">=4.0.0\"\n 15664        }\n .....\n 15747        }\n 15748      },\n 15749:     \"../core/node_modules/standard/node_modules/eslint-plugin-promise\": {\n 15750        \"version\": \"4.0.1\",\n 15751        \"integrity\": \"sha512-Si16O0+Hqz1gDHsys6RtFRrW7cCTB6P7p3OJmKp3Y3dxpQE2qwOA7d3xnV+0mBmrPoi0RBnxlCKvqu70te6wjg==\",\n .....\n 17855          \"eslint-plugin-jest\": \"^24.3.6\",\n 17856          \"eslint-plugin-node\": \"^11.1.0\",\n 17857:         \"eslint-plugin-promise\": \"^5.1.0\",\n 17858          \"eslint-plugin-sort-imports-es6-autofix\": \"^0.6.0\",\n 17859          \"eslint-plugin-unused-imports\": \"^1.1.2\",\n .....\n 24747        }\n 24748      },\n 24749:     \"../sdk/node_modules/any-promise\": {\n 24750        \"version\": \"1.3.0\",\n 24751        \"integrity\": \"sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==\",\n .....\n 27360        }\n 27361      },\n 27362:     \"../sdk/node_modules/es6-promise\": {\n 27363        \"version\": \"4.2.8\",\n 27364:       \"resolved\": \"https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz\",\n 27365        \"integrity\": \"sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w==\"\n 27366      },\n .....\n 27567          \"eslint-plugin-import\": \"^2.22.1\",\n 27568          \"eslint-plugin-node\": \"^11.1.0\",\n 27569:         \"eslint-plugin-promise\": \"^4.2.1 || ^5.0.0\"\n 27570        }\n 27571      },\n .....\n 27779        }\n 27780      },\n 27781:     \"../sdk/node_modules/eslint-plugin-promise\": {\n 27782        \"version\": \"5.2.0\",\n 27783:       \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-5.2.0.tgz\",\n 27784        \"integrity\": \"sha512-SftLb1pUG01QYq2A/hGAWfDRXqYD82zE7j7TopDOyNdU+7SvvoXREls/+PRTY17vUXzXnZA/zfnyKgRH6x4JJw==\",\n 27785        \"dev\": true,\n .....\n 28211          \"servify\": \"^0.1.12\",\n 28212          \"ws\": \"^3.0.0\",\n 28213:         \"xhr-request-promise\": \"^0.1.2\"\n 28214        }\n 28215      },\n .....\n 34227        \"devOptional\": true\n 34228      },\n 34229:     \"../sdk/node_modules/mkdirp-promise\": {\n 34230        \"version\": \"5.0.1\",\n 34231:       \"resolved\": \"https://registry.npmjs.org/mkdirp-promise/-/mkdirp-promise-5.0.1.tgz\",\n 34232        \"integrity\": \"sha1-6bj2jlUsaKnBcTuEiD96HdA5uKE=\",\n 34233:       \"deprecated\": \"This package is broken and no longer maintained. 'mkdirp' itself supports promises now, please switch to that.\",\n 34234        \"dependencies\": {\n 34235          \"mkdirp\": \"*\"\n .....\n 37379          \"eslint-plugin-import\": \"~2.14.0\",\n 37380          \"eslint-plugin-node\": \"~7.0.1\",\n 37381:         \"eslint-plugin-promise\": \"~4.0.0\",\n 37382          \"eslint-plugin-react\": \"~7.11.1\",\n 37383          \"eslint-plugin-standard\": \"~4.0.0\",\n .....\n 37516          \"eslint-plugin-import\": \">=2.13.0\",\n 37517          \"eslint-plugin-node\": \">=7.0.0\",\n 37518:         \"eslint-plugin-promise\": \">=4.0.0\",\n 37519          \"eslint-plugin-standard\": \">=4.0.0\"\n 37520        }\n .....\n 37603        }\n 37604      },\n 37605:     \"../sdk/node_modules/standard/node_modules/eslint-plugin-promise\": {\n 37606        \"version\": \"4.0.1\",\n 37607        \"integrity\": \"sha512-Si16O0+Hqz1gDHsys6RtFRrW7cCTB6P7p3OJmKp3Y3dxpQE2qwOA7d3xnV+0mBmrPoi0RBnxlCKvqu70te6wjg==\",\n .....\n 38357          \"got\": \"^7.1.0\",\n 38358          \"mime-types\": \"^2.1.16\",\n 38359:         \"mkdirp-promise\": \"^5.0.1\",\n 38360          \"mock-fs\": \"^4.1.0\",\n 38361          \"setimmediate\": \"^1.0.5\",\n .....\n 38849        \"dev\": true,\n 38850        \"dependencies\": {\n 38851:         \"any-promise\": \"^1.3.0\",\n 38852          \"parse-json\": \"^2.2.0\",\n 38853          \"strip-bom\": \"^2.0.0\",\n .....\n 39833          \"bn.js\": \"^4.11.6\",\n 39834          \"elliptic\": \"^6.4.0\",\n 39835:         \"xhr-request-promise\": \"^0.1.2\"\n 39836        }\n 39837      },\n .....\n 39933          \"abortcontroller-polyfill\": \"^1.7.3\",\n 39934          \"cross-fetch\": \"^3.1.4\",\n 39935:         \"es6-promise\": \"^4.2.8\",\n 39936          \"web3-core-helpers\": \"1.7.5\"\n 39937        },\n .....\n 40313        }\n 40314      },\n 40315:     \"../sdk/node_modules/xhr-request-promise\": {\n 40316        \"version\": \"0.1.3\",\n 40317:       \"resolved\": \"https://registry.npmjs.org/xhr-request-promise/-/xhr-request-promise-0.1.3.tgz\",\n 40318        \"integrity\": \"sha512-YUBytBsuwgitWtdRzXDDkWAXzhdGB8bYm0sSzMPZT7Z2MBjMSTHFsyCT1yCRATY+XC69DUrQraRAEgcoCRaIPg==\",\n 40319        \"dependencies\": {\n .....\n 48419          \"acorn\": \"^8.4.1\",\n 48420          \"elliptic\": \"^6.5.4\",\n 48421:         \"es6-promise\": \"^4.2.8\",\n 48422          \"nan\": \"^2.14.2\"\n 48423        },\n .....\n 50885          \"ethereumjs-vm\": \"^2.3.4\",\n 50886          \"json-stable-stringify\": \"^1.0.1\",\n 50887:         \"promise-to-callback\": \"^1.0.0\",\n 50888          \"readable-stream\": \"^2.2.9\",\n 50889          \"request\": \"^2.85.0\",\n .....\n 51902          \"ethereumjs-vm\": \"^2.3.4\",\n 51903          \"json-stable-stringify\": \"^1.0.1\",\n 51904:         \"promise-to-callback\": \"^1.0.0\",\n 51905          \"readable-stream\": \"^2.2.9\",\n 51906          \"request\": \"^2.85.0\",\n .....\n 52436          \"mkdirp\": \"^0.5.1\",\n 52437          \"move-concurrently\": \"^1.0.1\",\n 52438:         \"promise-inflight\": \"^1.0.1\",\n 52439          \"rimraf\": \"^2.6.3\",\n 52440          \"ssri\": \"^6.0.1\",\n .....\n 54496          \"object-assign\": \"^4.0.1\",\n 54497          \"pify\": \"^2.0.0\",\n 54498:         \"pinkie-promise\": \"^2.0.0\"\n 54499        },\n 54500        \"engines\": {\n .....\n 55148        \"integrity\": \"sha1-wsNYJlYkfDnqEHyx5mUrb58kUjw=\"\n 55149      },\n 55150:     \"node_modules/es6-promise\": {\n 55151        \"version\": \"4.2.8\",\n 55152:       \"resolved\": \"https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz\",\n 55153        \"integrity\": \"sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w==\"\n 55154      },\n .....\n 55397          \"eslint-plugin-import\": \"^2.22.1\",\n 55398          \"eslint-plugin-node\": \"^11.1.0\",\n 55399:         \"eslint-plugin-promise\": \"^4.2.1 || ^5.0.0\"\n 55400        }\n 55401      },\n .....\n 55650        }\n 55651      },\n 55652:     \"node_modules/eslint-plugin-promise\": {\n 55653        \"version\": \"5.2.0\",\n 55654:       \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-5.2.0.tgz\",\n 55655        \"integrity\": \"sha512-SftLb1pUG01QYq2A/hGAWfDRXqYD82zE7j7TopDOyNdU+7SvvoXREls/+PRTY17vUXzXnZA/zfnyKgRH6x4JJw==\",\n 55656        \"dev\": true,\n .....\n 56364          \"bn.js\": \"^4.11.6\",\n 56365          \"elliptic\": \"^6.4.0\",\n 56366:         \"xhr-request-promise\": \"^0.1.2\"\n 56367        }\n 56368      },\n .....\n 58860          \"map-age-cleaner\": \"^0.1.1\",\n 58861          \"mimic-fn\": \"^2.0.0\",\n 58862:         \"p-is-promise\": \"^2.0.0\"\n 58863        },\n 58864        \"engines\": {\n .....\n 58972        }\n 58973      },\n 58974:     \"node_modules/ganache-cli/node_modules/p-is-promise\": {\n 58975        \"version\": \"2.1.0\",\n 58976:       \"resolved\": \"https://registry.npmjs.org/p-is-promise/-/p-is-promise-2.1.0.tgz\",\n 58977        \"integrity\": \"sha512-Y3W0wlRPK8ZMRbNq97l4M5otioeA5lm1z7bkNkxCka8HSPjR0xRWmpCmc9utiaLP9Jb1eD8BgeIxTW4AIF45Pg==\",\n 58978        \"inBundle\": true,\n .....\n 65774        }\n 65775      },\n 65776:     \"node_modules/pinkie-promise\": {\n 65777        \"version\": \"2.0.1\",\n 65778:       \"resolved\": \"https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.1.tgz\",\n 65779        \"integrity\": \"sha1-ITXW36ejWMBprJsXh3YogihFD/o=\",\n 65780        \"dependencies\": {\n .....\n 67186        }\n 67187      },\n 67188:     \"node_modules/promise\": {\n 67189        \"version\": \"8.1.0\",\n 67190:       \"resolved\": \"https://registry.npmjs.org/promise/-/promise-8.1.0.tgz\",\n 67191        \"integrity\": \"sha512-W04AqnILOL/sPRXziNicCjSNRruLAuIHEOVBazepu0545DDNGYHz7ar9ZgZ1fMU8/MA4mVxp5rkBWRi6OXIy3Q==\",\n 67192        \"dependencies\": {\n .....\n 67194        }\n 67195      },\n 67196:     \"node_modules/promise-inflight\": {\n 67197        \"version\": \"1.0.1\",\n 67198:       \"resolved\": \"https://registry.npmjs.org/promise-inflight/-/promise-inflight-1.0.1.tgz\",\n 67199        \"integrity\": \"sha1-mEcocL8igTL8vdhoEputEsPAKeM=\"\n 67200      },\n 67201:     \"node_modules/promise-to-callback\": {\n 67202        \"version\": \"1.0.0\",\n 67203:       \"resolved\": \"https://registry.npmjs.org/promise-to-callback/-/promise-to-callback-1.0.0.tgz\",\n 67204        \"integrity\": \"sha1-XSp0kBC/tn2WNZj805YHRqaP7vc=\",\n 67205        \"dependencies\": {\n .....\n 67583          \"core-js\": \"^3.6.5\",\n 67584          \"object-assign\": \"^4.1.1\",\n 67585:         \"promise\": \"^8.1.0\",\n 67586          \"raf\": \"^3.4.1\",\n 67587          \"regenerator-runtime\": \"^0.13.7\",\n .....\n 70744        \"dependencies\": {\n 70745          \"path-exists\": \"^2.0.0\",\n 70746:         \"pinkie-promise\": \"^2.0.0\"\n 70747        },\n 70748        \"engines\": {\n .....\n 70794          \"parse-json\": \"^2.2.0\",\n 70795          \"pify\": \"^2.0.0\",\n 70796:         \"pinkie-promise\": \"^2.0.0\",\n 70797          \"strip-bom\": \"^2.0.0\"\n 70798        },\n .....\n 70806        \"integrity\": \"sha1-D+tsZPD8UY2adU3V77YscCJ2H0s=\",\n 70807        \"dependencies\": {\n 70808:         \"pinkie-promise\": \"^2.0.0\"\n 70809        },\n 70810        \"engines\": {\n .....\n 70819          \"graceful-fs\": \"^4.1.2\",\n 70820          \"pify\": \"^2.0.0\",\n 70821:         \"pinkie-promise\": \"^2.0.0\"\n 70822        },\n 70823        \"engines\": {\n .....\n 72057          \"mkdirp\": \"^1.0.3\",\n 72058          \"p-map\": \"^4.0.0\",\n 72059:         \"promise-inflight\": \"^1.0.1\",\n 72060          \"rimraf\": \"^3.0.2\",\n 72061          \"ssri\": \"^8.0.1\",\n .....\n 73669          \"ethereumjs-vm\": \"^2.3.4\",\n 73670          \"json-stable-stringify\": \"^1.0.1\",\n 73671:         \"promise-to-callback\": \"^1.0.0\",\n 73672          \"readable-stream\": \"^2.2.9\",\n 73673          \"request\": \"^2.85.0\",\n .....\n 74670        }\n 74671      },\n 74672:     \"node_modules/xhr-request-promise\": {\n 74673        \"version\": \"0.1.3\",\n 74674:       \"resolved\": \"https://registry.npmjs.org/xhr-request-promise/-/xhr-request-promise-0.1.3.tgz\",\n 74675        \"integrity\": \"sha512-YUBytBsuwgitWtdRzXDDkWAXzhdGB8bYm0sSzMPZT7Z2MBjMSTHFsyCT1yCRATY+XC69DUrQraRAEgcoCRaIPg==\",\n 74676        \"dependencies\": {\n .....\n 79672          \"eslint-plugin-json\": \"^3.1.0\",\n 79673          \"eslint-plugin-node\": \"^11.1.0\",\n 79674:         \"eslint-plugin-promise\": \"^5.1.0\",\n 79675          \"eslint-plugin-sort-imports-es6-autofix\": \"^0.6.0\",\n 79676          \"eslint-plugin-unused-imports\": \"^1.1.2\",\n .....\n 85585            }\n 85586          },\n 85587:         \"eslint-plugin-promise\": {\n 85588            \"version\": \"5.2.0\",\n 85589:           \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-5.2.0.tgz\",\n 85590            \"integrity\": \"sha512-SftLb1pUG01QYq2A/hGAWfDRXqYD82zE7j7TopDOyNdU+7SvvoXREls/+PRTY17vUXzXnZA/zfnyKgRH6x4JJw==\",\n 85591            \"dev\": true\n .....\n 90867              \"eslint-plugin-import\": \"~2.14.0\",\n 90868              \"eslint-plugin-node\": \"~7.0.1\",\n 90869:             \"eslint-plugin-promise\": \"~4.0.0\",\n 90870              \"eslint-plugin-react\": \"~7.11.1\",\n 90871              \"eslint-plugin-standard\": \"~4.0.0\",\n .....\n 91017                }\n 91018              },\n 91019:             \"eslint-plugin-promise\": {\n 91020                \"version\": \"4.0.1\",\n 91021                \"dev\": true\n .....\n 92609          \"eslint-plugin-jest\": \"^24.3.6\",\n 92610          \"eslint-plugin-node\": \"^11.1.0\",\n 92611:         \"eslint-plugin-promise\": \"^5.1.0\",\n 92612          \"eslint-plugin-sort-imports-es6-autofix\": \"^0.6.0\",\n 92613          \"eslint-plugin-unused-imports\": \"^1.1.2\",\n .....\n 95610              \"eslint-plugin-json\": \"^3.1.0\",\n 95611              \"eslint-plugin-node\": \"^11.1.0\",\n 95612:             \"eslint-plugin-promise\": \"^5.1.0\",\n 95613              \"eslint-plugin-sort-imports-es6-autofix\": \"^0.6.0\",\n 95614              \"eslint-plugin-unused-imports\": \"^1.1.2\",\n .....\n 101523                }\n 101524              },\n 101525:             \"eslint-plugin-promise\": {\n 101526                \"version\": \"5.2.0\",\n 101527:               \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-5.2.0.tgz\",\n 101528                \"integrity\": \"sha512-SftLb1pUG01QYq2A/hGAWfDRXqYD82zE7j7TopDOyNdU+7SvvoXREls/+PRTY17vUXzXnZA/zfnyKgRH6x4JJw==\",\n 101529                \"dev\": true\n .....\n 106805                  \"eslint-plugin-import\": \"~2.14.0\",\n 106806                  \"eslint-plugin-node\": \"~7.0.1\",\n 106807:                 \"eslint-plugin-promise\": \"~4.0.0\",\n 106808                  \"eslint-plugin-react\": \"~7.11.1\",\n 106809                  \"eslint-plugin-standard\": \"~4.0.0\",\n .....\n 106955                    }\n 106956                  },\n 106957:                 \"eslint-plugin-promise\": {\n 106958                    \"version\": \"4.0.1\",\n 106959                    \"dev\": true\n .....\n 109804            }\n 109805          },\n 109806:         \"any-promise\": {\n 109807            \"version\": \"1.3.0\",\n 109808            \"dev\": true\n .....\n 111829            }\n 111830          },\n 111831:         \"es6-promise\": {\n 111832            \"version\": \"4.2.8\",\n 111833:           \"resolved\": \"https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz\",\n 111834            \"integrity\": \"sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w==\"\n 111835          },\n .....\n 112240            }\n 112241          },\n 112242:         \"eslint-plugin-promise\": {\n 112243            \"version\": \"5.2.0\",\n 112244:           \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-5.2.0.tgz\",\n 112245            \"integrity\": \"sha512-SftLb1pUG01QYq2A/hGAWfDRXqYD82zE7j7TopDOyNdU+7SvvoXREls/+PRTY17vUXzXnZA/zfnyKgRH6x4JJw==\",\n 112246            \"dev\": true\n .....\n 112414              \"servify\": \"^0.1.12\",\n 112415              \"ws\": \"^3.0.0\",\n 112416:             \"xhr-request-promise\": \"^0.1.2\"\n 112417            },\n 112418            \"dependencies\": {\n .....\n 116816            \"devOptional\": true\n 116817          },\n 116818:         \"mkdirp-promise\": {\n 116819            \"version\": \"5.0.1\",\n 116820:           \"resolved\": \"https://registry.npmjs.org/mkdirp-promise/-/mkdirp-promise-5.0.1.tgz\",\n 116821            \"integrity\": \"sha1-6bj2jlUsaKnBcTuEiD96HdA5uKE=\",\n 116822            \"requires\": {\n .....\n 119218              \"eslint-plugin-import\": \"~2.14.0\",\n 119219              \"eslint-plugin-node\": \"~7.0.1\",\n 119220:             \"eslint-plugin-promise\": \"~4.0.0\",\n 119221              \"eslint-plugin-react\": \"~7.11.1\",\n 119222              \"eslint-plugin-standard\": \"~4.0.0\",\n .....\n 119368                }\n 119369              },\n 119370:             \"eslint-plugin-promise\": {\n 119371                \"version\": \"4.0.1\",\n 119372                \"dev\": true\n .....\n 119934              \"got\": \"^7.1.0\",\n 119935              \"mime-types\": \"^2.1.16\",\n 119936:             \"mkdirp-promise\": \"^5.0.1\",\n 119937              \"mock-fs\": \"^4.1.0\",\n 119938              \"setimmediate\": \"^1.0.5\",\n .....\n 120315            \"dev\": true,\n 120316            \"requires\": {\n 120317:             \"any-promise\": \"^1.3.0\",\n 120318              \"parse-json\": \"^2.2.0\",\n 120319              \"strip-bom\": \"^2.0.0\",\n .....\n 121084                  \"bn.js\": \"^4.11.6\",\n 121085                  \"elliptic\": \"^6.4.0\",\n 121086:                 \"xhr-request-promise\": \"^0.1.2\"\n 121087                }\n 121088              },\n .....\n 121168              \"abortcontroller-polyfill\": \"^1.7.3\",\n 121169              \"cross-fetch\": \"^3.1.4\",\n 121170:             \"es6-promise\": \"^4.2.8\",\n 121171              \"web3-core-helpers\": \"1.7.5\"\n 121172            }\n .....\n 121491            }\n 121492          },\n 121493:         \"xhr-request-promise\": {\n 121494            \"version\": \"0.1.3\",\n 121495:           \"resolved\": \"https://registry.npmjs.org/xhr-request-promise/-/xhr-request-promise-0.1.3.tgz\",\n 121496            \"integrity\": \"sha512-YUBytBsuwgitWtdRzXDDkWAXzhdGB8bYm0sSzMPZT7Z2MBjMSTHFsyCT1yCRATY+XC69DUrQraRAEgcoCRaIPg==\",\n 121497            \"requires\": {\n .....\n 123043          \"acorn\": \"^8.4.1\",\n 123044          \"elliptic\": \"^6.5.4\",\n 123045:         \"es6-promise\": \"^4.2.8\",\n 123046          \"nan\": \"^2.14.2\",\n 123047          \"secp256k1\": \"^3.8.0\"\n .....\n 125174              \"ethereumjs-vm\": \"^2.3.4\",\n 125175              \"json-stable-stringify\": \"^1.0.1\",\n 125176:             \"promise-to-callback\": \"^1.0.0\",\n 125177              \"readable-stream\": \"^2.2.9\",\n 125178              \"request\": \"^2.85.0\",\n .....\n 126062              \"ethereumjs-vm\": \"^2.3.4\",\n 126063              \"json-stable-stringify\": \"^1.0.1\",\n 126064:             \"promise-to-callback\": \"^1.0.0\",\n 126065              \"readable-stream\": \"^2.2.9\",\n 126066              \"request\": \"^2.85.0\",\n .....\n 126542          \"mkdirp\": \"^0.5.1\",\n 126543          \"move-concurrently\": \"^1.0.1\",\n 126544:         \"promise-inflight\": \"^1.0.1\",\n 126545          \"rimraf\": \"^2.6.3\",\n 126546          \"ssri\": \"^6.0.1\",\n .....\n 128198              \"object-assign\": \"^4.0.1\",\n 128199              \"pify\": \"^2.0.0\",\n 128200:             \"pinkie-promise\": \"^2.0.0\"\n 128201            },\n 128202            \"dependencies\": {\n .....\n 128733        \"integrity\": \"sha1-wsNYJlYkfDnqEHyx5mUrb58kUjw=\"\n 128734      },\n 128735:     \"es6-promise\": {\n 128736        \"version\": \"4.2.8\",\n 128737:       \"resolved\": \"https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz\",\n 128738        \"integrity\": \"sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w==\"\n 128739      },\n .....\n 129157        }\n 129158      },\n 129159:     \"eslint-plugin-promise\": {\n 129160        \"version\": \"5.2.0\",\n 129161:       \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-5.2.0.tgz\",\n 129162        \"integrity\": \"sha512-SftLb1pUG01QYq2A/hGAWfDRXqYD82zE7j7TopDOyNdU+7SvvoXREls/+PRTY17vUXzXnZA/zfnyKgRH6x4JJw==\",\n 129163        \"dev\": true\n .....\n 129650          \"bn.js\": \"^4.11.6\",\n 129651          \"elliptic\": \"^6.4.0\",\n 129652:         \"xhr-request-promise\": \"^0.1.2\"\n 129653        }\n 129654      },\n .....\n 131692              \"map-age-cleaner\": \"^0.1.1\",\n 131693              \"mimic-fn\": \"^2.0.0\",\n 131694:             \"p-is-promise\": \"^2.0.0\"\n 131695            }\n 131696          },\n .....\n 131770            \"bundled\": true\n 131771          },\n 131772:         \"p-is-promise\": {\n 131773            \"version\": \"2.1.0\",\n 131774:           \"resolved\": \"https://registry.npmjs.org/p-is-promise/-/p-is-promise-2.1.0.tgz\",\n 131775            \"integrity\": \"sha512-Y3W0wlRPK8ZMRbNq97l4M5otioeA5lm1z7bkNkxCka8HSPjR0xRWmpCmc9utiaLP9Jb1eD8BgeIxTW4AIF45Pg==\",\n 131776            \"bundled\": true\n .....\n 136983        \"integrity\": \"sha1-clVrgM+g1IqXToDnckjoDtT3+HA=\"\n 136984      },\n 136985:     \"pinkie-promise\": {\n 136986        \"version\": \"2.0.1\",\n 136987:       \"resolved\": \"https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.1.tgz\",\n 136988        \"integrity\": \"sha1-ITXW36ejWMBprJsXh3YogihFD/o=\",\n 136989        \"requires\": {\n .....\n 138088        \"integrity\": \"sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==\"\n 138089      },\n 138090:     \"promise\": {\n 138091        \"version\": \"8.1.0\",\n 138092:       \"resolved\": \"https://registry.npmjs.org/promise/-/promise-8.1.0.tgz\",\n 138093        \"integrity\": \"sha512-W04AqnILOL/sPRXziNicCjSNRruLAuIHEOVBazepu0545DDNGYHz7ar9ZgZ1fMU8/MA4mVxp5rkBWRi6OXIy3Q==\",\n 138094        \"requires\": {\n .....\n 138096        }\n 138097      },\n 138098:     \"promise-inflight\": {\n 138099        \"version\": \"1.0.1\",\n 138100:       \"resolved\": \"https://registry.npmjs.org/promise-inflight/-/promise-inflight-1.0.1.tgz\",\n 138101        \"integrity\": \"sha1-mEcocL8igTL8vdhoEputEsPAKeM=\"\n 138102      },\n 138103:     \"promise-to-callback\": {\n 138104        \"version\": \"1.0.0\",\n 138105:       \"resolved\": \"https://registry.npmjs.org/promise-to-callback/-/promise-to-callback-1.0.0.tgz\",\n 138106        \"integrity\": \"sha1-XSp0kBC/tn2WNZj805YHRqaP7vc=\",\n 138107        \"requires\": {\n .....\n 138415          \"core-js\": \"^3.6.5\",\n 138416          \"object-assign\": \"^4.1.1\",\n 138417:         \"promise\": \"^8.1.0\",\n 138418          \"raf\": \"^3.4.1\",\n 138419          \"regenerator-runtime\": \"^0.13.7\",\n .....\n 140859            \"requires\": {\n 140860              \"path-exists\": \"^2.0.0\",\n 140861:             \"pinkie-promise\": \"^2.0.0\"\n 140862            }\n 140863          },\n .....\n 140903              \"parse-json\": \"^2.2.0\",\n 140904              \"pify\": \"^2.0.0\",\n 140905:             \"pinkie-promise\": \"^2.0.0\",\n 140906              \"strip-bom\": \"^2.0.0\"\n 140907            }\n .....\n 140912            \"integrity\": \"sha1-D+tsZPD8UY2adU3V77YscCJ2H0s=\",\n 140913            \"requires\": {\n 140914:             \"pinkie-promise\": \"^2.0.0\"\n 140915            }\n 140916          },\n .....\n 140922              \"graceful-fs\": \"^4.1.2\",\n 140923              \"pify\": \"^2.0.0\",\n 140924:             \"pinkie-promise\": \"^2.0.0\"\n 140925            }\n 140926          },\n .....\n 141902              \"mkdirp\": \"^1.0.3\",\n 141903              \"p-map\": \"^4.0.0\",\n 141904:             \"promise-inflight\": \"^1.0.1\",\n 141905              \"rimraf\": \"^3.0.2\",\n 141906              \"ssri\": \"^8.0.1\",\n .....\n 143175          \"ethereumjs-vm\": \"^2.3.4\",\n 143176          \"json-stable-stringify\": \"^1.0.1\",\n 143177:         \"promise-to-callback\": \"^1.0.0\",\n 143178          \"readable-stream\": \"^2.2.9\",\n 143179          \"request\": \"^2.85.0\",\n .....\n 144021        }\n 144022      },\n 144023:     \"xhr-request-promise\": {\n 144024        \"version\": \"0.1.3\",\n 144025:       \"resolved\": \"https://registry.npmjs.org/xhr-request-promise/-/xhr-request-promise-0.1.3.tgz\",\n 144026        \"integrity\": \"sha512-YUBytBsuwgitWtdRzXDDkWAXzhdGB8bYm0sSzMPZT7Z2MBjMSTHFsyCT1yCRATY+XC69DUrQraRAEgcoCRaIPg==\",\n 144027        \"requires\": {\n\n~/Sandbox/hop/packages/frontend/package.json:\n  120      \"eslint-plugin-jsx-a11y\": \"^6.4.1\",\n  121      \"eslint-plugin-node\": \"^11.1.0\",\n  122:     \"eslint-plugin-promise\": \"^5.1.0\",\n  123      \"eslint-plugin-react\": \"^7.21.5\",\n  124      \"eslint-plugin-react-hooks\": \"^4.2.0\",\n\n~/Sandbox/hop/packages/frontend/yarn.lock:\n 3978      acorn \"^8.4.1\"\n 3979      elliptic \"^6.5.4\"\n 3980:     es6-promise \"^4.2.8\"\n 3981      nan \"^2.14.2\"\n 3982    optionalDependencies:\n ....\n 6366      mkdirp \"^0.5.1\"\n 6367      move-concurrently \"^1.0.1\"\n 6368:     promise-inflight \"^1.0.1\"\n 6369      rimraf \"^2.6.3\"\n 6370      ssri \"^6.0.1\"\n ....\n 6390      mkdirp \"^1.0.3\"\n 6391      p-map \"^4.0.0\"\n 6392:     promise-inflight \"^1.0.1\"\n 6393      rimraf \"^3.0.2\"\n 6394      ssri \"^8.0.1\"\n ....\n 8190    integrity sha1-wsNYJlYkfDnqEHyx5mUrb58kUjw=\n 8191  \n 8192: es6-promise@^4.2.8:\n 8193    version \"4.2.8\"\n 8194:   resolved \"https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz\"\n 8195    integrity sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w==\n 8196  \n ....\n 8384      semver \"^6.1.0\"\n 8385  \n 8386: eslint-plugin-promise@^5.1.0:\n 8387    version \"5.2.0\"\n 8388:   resolved \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-5.2.0.tgz\"\n 8389    integrity sha512-SftLb1pUG01QYq2A/hGAWfDRXqYD82zE7j7TopDOyNdU+7SvvoXREls/+PRTY17vUXzXnZA/zfnyKgRH6x4JJw==\n 8390  \n ....\n 8704      bn.js \"^4.11.6\"\n 8705      elliptic \"^6.4.0\"\n 8706:     xhr-request-promise \"^0.1.2\"\n 8707  \n 8708  eth-provider@^0.6.1:\n ....\n 9478    dependencies:\n 9479      path-exists \"^2.0.0\"\n 9480:     pinkie-promise \"^2.0.0\"\n 9481  \n 9482  find-up@^2.0.0, find-up@^2.1.0:\n ....\n 9884      object-assign \"^4.0.1\"\n 9885      pify \"^2.0.0\"\n 9886:     pinkie-promise \"^2.0.0\"\n 9887  \n 9888  google-protobuf@^3.15.8, google-protobuf@^3.7.0-rc.2:\n ....\n 12044      parse-json \"^2.2.0\"\n 12045      pify \"^2.0.0\"\n 12046:     pinkie-promise \"^2.0.0\"\n 12047      strip-bom \"^2.0.0\"\n 12048  \n .....\n 12511      map-age-cleaner \"^0.1.1\"\n 12512      mimic-fn \"^2.0.0\"\n 12513:     p-is-promise \"^2.0.0\"\n 12514  \n 12515  memdown@^1.0.0:\n .....\n 13774    integrity sha1-P7z7FbiZpEEjs0ttzBi3JDNqLK4=\n 13775  \n 13776: p-is-promise@^2.0.0:\n 13777    version \"2.1.0\"\n 13778:   resolved \"https://registry.npmjs.org/p-is-promise/-/p-is-promise-2.1.0.tgz\"\n 13779    integrity sha512-Y3W0wlRPK8ZMRbNq97l4M5otioeA5lm1z7bkNkxCka8HSPjR0xRWmpCmc9utiaLP9Jb1eD8BgeIxTW4AIF45Pg==\n 13780  \n .....\n 13958    integrity sha1-D+tsZPD8UY2adU3V77YscCJ2H0s=\n 13959    dependencies:\n 13960:     pinkie-promise \"^2.0.0\"\n 13961  \n 13962  path-exists@^3.0.0:\n .....\n 14014      graceful-fs \"^4.1.2\"\n 14015      pify \"^2.0.0\"\n 14016:     pinkie-promise \"^2.0.0\"\n 14017  \n 14018  path-type@^2.0.0:\n .....\n 14105    integrity sha512-eW/gHNMlxdSP6dmG6uJip6FXN0EQBwm2clYYd8Wul42Cwu/DK8HEftzsapcNdYe2MfLiIwZqsDk2RDEsTE79hA==\n 14106  \n 14107: pinkie-promise@^2.0.0:\n 14108    version \"2.0.1\"\n 14109:   resolved \"https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.1.tgz\"\n 14110    integrity sha1-ITXW36ejWMBprJsXh3YogihFD/o=\n 14111    dependencies:\n .....\n 14934    integrity sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==\n 14935  \n 14936: promise-inflight@^1.0.1:\n 14937    version \"1.0.1\"\n 14938:   resolved \"https://registry.npmjs.org/promise-inflight/-/promise-inflight-1.0.1.tgz\"\n 14939    integrity sha1-mEcocL8igTL8vdhoEputEsPAKeM=\n 14940  \n 14941: promise-to-callback@^1.0.0:\n 14942    version \"1.0.0\"\n 14943:   resolved \"https://registry.npmjs.org/promise-to-callback/-/promise-to-callback-1.0.0.tgz\"\n 14944    integrity sha1-XSp0kBC/tn2WNZj805YHRqaP7vc=\n 14945    dependencies:\n .....\n 14947      set-immediate-shim \"^1.0.1\"\n 14948  \n 14949: promise@^8.1.0:\n 14950    version \"8.1.0\"\n 14951:   resolved \"https://registry.npmjs.org/promise/-/promise-8.1.0.tgz\"\n 14952    integrity sha512-W04AqnILOL/sPRXziNicCjSNRruLAuIHEOVBazepu0545DDNGYHz7ar9ZgZ1fMU8/MA4mVxp5rkBWRi6OXIy3Q==\n 14953    dependencies:\n .....\n 15254      core-js \"^3.6.5\"\n 15255      object-assign \"^4.1.1\"\n 15256:     promise \"^8.1.0\"\n 15257      raf \"^3.4.1\"\n 15258      regenerator-runtime \"^0.13.7\"\n .....\n 18499      ethereumjs-vm \"^2.3.4\"\n 18500      json-stable-stringify \"^1.0.1\"\n 18501:     promise-to-callback \"^1.0.0\"\n 18502      readable-stream \"^2.2.9\"\n 18503      request \"^2.85.0\"\n .....\n 18527      ethereumjs-vm \"^2.3.4\"\n 18528      json-stable-stringify \"^1.0.1\"\n 18529:     promise-to-callback \"^1.0.0\"\n 18530      readable-stream \"^2.2.9\"\n 18531      request \"^2.85.0\"\n .....\n 18555      ethereumjs-vm \"^2.3.4\"\n 18556      json-stable-stringify \"^1.0.1\"\n 18557:     promise-to-callback \"^1.0.0\"\n 18558      readable-stream \"^2.2.9\"\n 18559      request \"^2.85.0\"\n .....\n 19159    integrity sha512-KMvVuFzpKBuiIXW3E4u3mySRO2/mCHSyZDJQM5NQ9Q9KHWHWh0NHgfbRMLLrceUK5qAL4ytALJbpRMjixFZh8A==\n 19160  \n 19161: xhr-request-promise@^0.1.2:\n 19162    version \"0.1.3\"\n 19163:   resolved \"https://registry.npmjs.org/xhr-request-promise/-/xhr-request-promise-0.1.3.tgz\"\n 19164    integrity sha512-YUBytBsuwgitWtdRzXDDkWAXzhdGB8bYm0sSzMPZT7Z2MBjMSTHFsyCT1yCRATY+XC69DUrQraRAEgcoCRaIPg==\n 19165    dependencies:\n\n~/Sandbox/hop/packages/frontend/src/abis/types/common.ts:\n   30  \n   31  export type MinEthersFactory<C, ARGS> = {\n   32:   deploy(...a: ARGS[]): Promise<C>;\n   33  };\n   34  \n\n~/Sandbox/hop/packages/frontend/src/abis/types/ENSToken.d.ts:\n  325    connect(signerOrProvider: Signer | Provider | string): this;\n  326    attach(addressOrName: string): this;\n  327:   deployed(): Promise<this>;\n  328  \n  329    listeners<EventArgsArray extends Array<any>, EventArgsObject>(\n  ...\n  361      fromBlockOrBlockhash?: string | number | undefined,\n  362      toBlock?: string | number | undefined\n  363:   ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;\n  364  \n  365    interface: ENSTokenInterface;\n  366  \n  367    functions: {\n  368:     DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;\n  369  \n  370      allowance(\n  ...\n  372        spender: string,\n  373        overrides?: CallOverrides\n  374:     ): Promise<[BigNumber]>;\n  375  \n  376      approve(\n  377        spender: string,\n  378        amount: BigNumberish,\n  379:       overrides?: Overrides & { from?: string | Promise<string> }\n  380:     ): Promise<ContractTransaction>;\n  381  \n  382:     balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;\n  383  \n  384      checkpoints(\n  ...\n  386        pos: BigNumberish,\n  387        overrides?: CallOverrides\n  388:     ): Promise<[[number, BigNumber] & { fromBlock: number; votes: BigNumber }]>;\n  389  \n  390:     claimPeriodEnds(overrides?: CallOverrides): Promise<[BigNumber]>;\n  391  \n  392      claimTokens(\n  ...\n  394        delegate: string,\n  395        merkleProof: BytesLike[],\n  396:       overrides?: Overrides & { from?: string | Promise<string> }\n  397:     ): Promise<ContractTransaction>;\n  398  \n  399:     decimals(overrides?: CallOverrides): Promise<[number]>;\n  400  \n  401      decreaseAllowance(\n  402        spender: string,\n  403        subtractedValue: BigNumberish,\n  404:       overrides?: Overrides & { from?: string | Promise<string> }\n  405:     ): Promise<ContractTransaction>;\n  406  \n  407      delegate(\n  408        delegatee: string,\n  409:       overrides?: Overrides & { from?: string | Promise<string> }\n  410:     ): Promise<ContractTransaction>;\n  411  \n  412      delegateBySig(\n  ...\n  417        r: BytesLike,\n  418        s: BytesLike,\n  419:       overrides?: Overrides & { from?: string | Promise<string> }\n  420:     ): Promise<ContractTransaction>;\n  421  \n  422:     delegates(account: string, overrides?: CallOverrides): Promise<[string]>;\n  423  \n  424      getPastTotalSupply(\n  425        blockNumber: BigNumberish,\n  426        overrides?: CallOverrides\n  427:     ): Promise<[BigNumber]>;\n  428  \n  429      getPastVotes(\n  ...\n  431        blockNumber: BigNumberish,\n  432        overrides?: CallOverrides\n  433:     ): Promise<[BigNumber]>;\n  434  \n  435:     getVotes(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;\n  436  \n  437      increaseAllowance(\n  438        spender: string,\n  439        addedValue: BigNumberish,\n  440:       overrides?: Overrides & { from?: string | Promise<string> }\n  441:     ): Promise<ContractTransaction>;\n  442  \n  443      isClaimed(\n  444        index: BigNumberish,\n  445        overrides?: CallOverrides\n  446:     ): Promise<[boolean]>;\n  447  \n  448:     merkleRoot(overrides?: CallOverrides): Promise<[string]>;\n  449  \n  450:     minimumMintInterval(overrides?: CallOverrides): Promise<[BigNumber]>;\n  451  \n  452      mint(\n  453        dest: string,\n  454        amount: BigNumberish,\n  455:       overrides?: Overrides & { from?: string | Promise<string> }\n  456:     ): Promise<ContractTransaction>;\n  457  \n  458:     mintCap(overrides?: CallOverrides): Promise<[BigNumber]>;\n  459  \n  460:     name(overrides?: CallOverrides): Promise<[string]>;\n  461  \n  462:     nextMint(overrides?: CallOverrides): Promise<[BigNumber]>;\n  463  \n  464:     nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;\n  465  \n  466      numCheckpoints(\n  467        account: string,\n  468        overrides?: CallOverrides\n  469:     ): Promise<[number]>;\n  470  \n  471:     owner(overrides?: CallOverrides): Promise<[string]>;\n  472  \n  473      permit(\n  ...\n  479        r: BytesLike,\n  480        s: BytesLike,\n  481:       overrides?: Overrides & { from?: string | Promise<string> }\n  482:     ): Promise<ContractTransaction>;\n  483  \n  484      renounceOwnership(\n  485:       overrides?: Overrides & { from?: string | Promise<string> }\n  486:     ): Promise<ContractTransaction>;\n  487  \n  488      setMerkleRoot(\n  489        _merkleRoot: BytesLike,\n  490:       overrides?: Overrides & { from?: string | Promise<string> }\n  491:     ): Promise<ContractTransaction>;\n  492  \n  493      sweep(\n  494        dest: string,\n  495:       overrides?: Overrides & { from?: string | Promise<string> }\n  496:     ): Promise<ContractTransaction>;\n  497  \n  498:     symbol(overrides?: CallOverrides): Promise<[string]>;\n  499  \n  500:     totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;\n  501  \n  502      transfer(\n  503        recipient: string,\n  504        amount: BigNumberish,\n  505:       overrides?: Overrides & { from?: string | Promise<string> }\n  506:     ): Promise<ContractTransaction>;\n  507  \n  508      transferFrom(\n  ...\n  510        recipient: string,\n  511        amount: BigNumberish,\n  512:       overrides?: Overrides & { from?: string | Promise<string> }\n  513:     ): Promise<ContractTransaction>;\n  514  \n  515      transferOwnership(\n  516        newOwner: string,\n  517:       overrides?: Overrides & { from?: string | Promise<string> }\n  518:     ): Promise<ContractTransaction>;\n  519    };\n  520  \n  521:   DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;\n  522  \n  523    allowance(\n  ...\n  525      spender: string,\n  526      overrides?: CallOverrides\n  527:   ): Promise<BigNumber>;\n  528  \n  529    approve(\n  530      spender: string,\n  531      amount: BigNumberish,\n  532:     overrides?: Overrides & { from?: string | Promise<string> }\n  533:   ): Promise<ContractTransaction>;\n  534  \n  535:   balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n  536  \n  537    checkpoints(\n  ...\n  539      pos: BigNumberish,\n  540      overrides?: CallOverrides\n  541:   ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;\n  542  \n  543:   claimPeriodEnds(overrides?: CallOverrides): Promise<BigNumber>;\n  544  \n  545    claimTokens(\n  ...\n  547      delegate: string,\n  548      merkleProof: BytesLike[],\n  549:     overrides?: Overrides & { from?: string | Promise<string> }\n  550:   ): Promise<ContractTransaction>;\n  551  \n  552:   decimals(overrides?: CallOverrides): Promise<number>;\n  553  \n  554    decreaseAllowance(\n  555      spender: string,\n  556      subtractedValue: BigNumberish,\n  557:     overrides?: Overrides & { from?: string | Promise<string> }\n  558:   ): Promise<ContractTransaction>;\n  559  \n  560    delegate(\n  561      delegatee: string,\n  562:     overrides?: Overrides & { from?: string | Promise<string> }\n  563:   ): Promise<ContractTransaction>;\n  564  \n  565    delegateBySig(\n  ...\n  570      r: BytesLike,\n  571      s: BytesLike,\n  572:     overrides?: Overrides & { from?: string | Promise<string> }\n  573:   ): Promise<ContractTransaction>;\n  574  \n  575:   delegates(account: string, overrides?: CallOverrides): Promise<string>;\n  576  \n  577    getPastTotalSupply(\n  578      blockNumber: BigNumberish,\n  579      overrides?: CallOverrides\n  580:   ): Promise<BigNumber>;\n  581  \n  582    getPastVotes(\n  ...\n  584      blockNumber: BigNumberish,\n  585      overrides?: CallOverrides\n  586:   ): Promise<BigNumber>;\n  587  \n  588:   getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n  589  \n  590    increaseAllowance(\n  591      spender: string,\n  592      addedValue: BigNumberish,\n  593:     overrides?: Overrides & { from?: string | Promise<string> }\n  594:   ): Promise<ContractTransaction>;\n  595  \n  596:   isClaimed(index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;\n  597  \n  598:   merkleRoot(overrides?: CallOverrides): Promise<string>;\n  599  \n  600:   minimumMintInterval(overrides?: CallOverrides): Promise<BigNumber>;\n  601  \n  602    mint(\n  603      dest: string,\n  604      amount: BigNumberish,\n  605:     overrides?: Overrides & { from?: string | Promise<string> }\n  606:   ): Promise<ContractTransaction>;\n  607  \n  608:   mintCap(overrides?: CallOverrides): Promise<BigNumber>;\n  609  \n  610:   name(overrides?: CallOverrides): Promise<string>;\n  611  \n  612:   nextMint(overrides?: CallOverrides): Promise<BigNumber>;\n  613  \n  614:   nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;\n  615  \n  616:   numCheckpoints(account: string, overrides?: CallOverrides): Promise<number>;\n  617  \n  618:   owner(overrides?: CallOverrides): Promise<string>;\n  619  \n  620    permit(\n  ...\n  626      r: BytesLike,\n  627      s: BytesLike,\n  628:     overrides?: Overrides & { from?: string | Promise<string> }\n  629:   ): Promise<ContractTransaction>;\n  630  \n  631    renounceOwnership(\n  632:     overrides?: Overrides & { from?: string | Promise<string> }\n  633:   ): Promise<ContractTransaction>;\n  634  \n  635    setMerkleRoot(\n  636      _merkleRoot: BytesLike,\n  637:     overrides?: Overrides & { from?: string | Promise<string> }\n  638:   ): Promise<ContractTransaction>;\n  639  \n  640    sweep(\n  641      dest: string,\n  642:     overrides?: Overrides & { from?: string | Promise<string> }\n  643:   ): Promise<ContractTransaction>;\n  644  \n  645:   symbol(overrides?: CallOverrides): Promise<string>;\n  646  \n  647:   totalSupply(overrides?: CallOverrides): Promise<BigNumber>;\n  648  \n  649    transfer(\n  650      recipient: string,\n  651      amount: BigNumberish,\n  652:     overrides?: Overrides & { from?: string | Promise<string> }\n  653:   ): Promise<ContractTransaction>;\n  654  \n  655    transferFrom(\n  ...\n  657      recipient: string,\n  658      amount: BigNumberish,\n  659:     overrides?: Overrides & { from?: string | Promise<string> }\n  660:   ): Promise<ContractTransaction>;\n  661  \n  662    transferOwnership(\n  663      newOwner: string,\n  664:     overrides?: Overrides & { from?: string | Promise<string> }\n  665:   ): Promise<ContractTransaction>;\n  666  \n  667    callStatic: {\n  668:     DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;\n  669  \n  670      allowance(\n  ...\n  672        spender: string,\n  673        overrides?: CallOverrides\n  674:     ): Promise<BigNumber>;\n  675  \n  676      approve(\n  ...\n  678        amount: BigNumberish,\n  679        overrides?: CallOverrides\n  680:     ): Promise<boolean>;\n  681  \n  682:     balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n  683  \n  684      checkpoints(\n  ...\n  686        pos: BigNumberish,\n  687        overrides?: CallOverrides\n  688:     ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;\n  689  \n  690:     claimPeriodEnds(overrides?: CallOverrides): Promise<BigNumber>;\n  691  \n  692      claimTokens(\n  ...\n  695        merkleProof: BytesLike[],\n  696        overrides?: CallOverrides\n  697:     ): Promise<void>;\n  698  \n  699:     decimals(overrides?: CallOverrides): Promise<number>;\n  700  \n  701      decreaseAllowance(\n  ...\n  703        subtractedValue: BigNumberish,\n  704        overrides?: CallOverrides\n  705:     ): Promise<boolean>;\n  706  \n  707:     delegate(delegatee: string, overrides?: CallOverrides): Promise<void>;\n  708  \n  709      delegateBySig(\n  ...\n  715        s: BytesLike,\n  716        overrides?: CallOverrides\n  717:     ): Promise<void>;\n  718  \n  719:     delegates(account: string, overrides?: CallOverrides): Promise<string>;\n  720  \n  721      getPastTotalSupply(\n  722        blockNumber: BigNumberish,\n  723        overrides?: CallOverrides\n  724:     ): Promise<BigNumber>;\n  725  \n  726      getPastVotes(\n  ...\n  728        blockNumber: BigNumberish,\n  729        overrides?: CallOverrides\n  730:     ): Promise<BigNumber>;\n  731  \n  732:     getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n  733  \n  734      increaseAllowance(\n  ...\n  736        addedValue: BigNumberish,\n  737        overrides?: CallOverrides\n  738:     ): Promise<boolean>;\n  739  \n  740:     isClaimed(index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;\n  741  \n  742:     merkleRoot(overrides?: CallOverrides): Promise<string>;\n  743  \n  744:     minimumMintInterval(overrides?: CallOverrides): Promise<BigNumber>;\n  745  \n  746      mint(\n  ...\n  748        amount: BigNumberish,\n  749        overrides?: CallOverrides\n  750:     ): Promise<void>;\n  751  \n  752:     mintCap(overrides?: CallOverrides): Promise<BigNumber>;\n  753  \n  754:     name(overrides?: CallOverrides): Promise<string>;\n  755  \n  756:     nextMint(overrides?: CallOverrides): Promise<BigNumber>;\n  757  \n  758:     nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;\n  759  \n  760:     numCheckpoints(account: string, overrides?: CallOverrides): Promise<number>;\n  761  \n  762:     owner(overrides?: CallOverrides): Promise<string>;\n  763  \n  764      permit(\n  ...\n  771        s: BytesLike,\n  772        overrides?: CallOverrides\n  773:     ): Promise<void>;\n  774  \n  775:     renounceOwnership(overrides?: CallOverrides): Promise<void>;\n  776  \n  777      setMerkleRoot(\n  778        _merkleRoot: BytesLike,\n  779        overrides?: CallOverrides\n  780:     ): Promise<void>;\n  781  \n  782:     sweep(dest: string, overrides?: CallOverrides): Promise<void>;\n  783  \n  784:     symbol(overrides?: CallOverrides): Promise<string>;\n  785  \n  786:     totalSupply(overrides?: CallOverrides): Promise<BigNumber>;\n  787  \n  788      transfer(\n  ...\n  790        amount: BigNumberish,\n  791        overrides?: CallOverrides\n  792:     ): Promise<boolean>;\n  793  \n  794      transferFrom(\n  ...\n  797        amount: BigNumberish,\n  798        overrides?: CallOverrides\n  799:     ): Promise<boolean>;\n  800  \n  801      transferOwnership(\n  802        newOwner: string,\n  803        overrides?: CallOverrides\n  804:     ): Promise<void>;\n  805    };\n  806  \n  ...\n  920  \n  921    estimateGas: {\n  922:     DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;\n  923  \n  924      allowance(\n  ...\n  926        spender: string,\n  927        overrides?: CallOverrides\n  928:     ): Promise<BigNumber>;\n  929  \n  930      approve(\n  931        spender: string,\n  932        amount: BigNumberish,\n  933:       overrides?: Overrides & { from?: string | Promise<string> }\n  934:     ): Promise<BigNumber>;\n  935  \n  936:     balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n  937  \n  938      checkpoints(\n  ...\n  940        pos: BigNumberish,\n  941        overrides?: CallOverrides\n  942:     ): Promise<BigNumber>;\n  943  \n  944:     claimPeriodEnds(overrides?: CallOverrides): Promise<BigNumber>;\n  945  \n  946      claimTokens(\n  ...\n  948        delegate: string,\n  949        merkleProof: BytesLike[],\n  950:       overrides?: Overrides & { from?: string | Promise<string> }\n  951:     ): Promise<BigNumber>;\n  952  \n  953:     decimals(overrides?: CallOverrides): Promise<BigNumber>;\n  954  \n  955      decreaseAllowance(\n  956        spender: string,\n  957        subtractedValue: BigNumberish,\n  958:       overrides?: Overrides & { from?: string | Promise<string> }\n  959:     ): Promise<BigNumber>;\n  960  \n  961      delegate(\n  962        delegatee: string,\n  963:       overrides?: Overrides & { from?: string | Promise<string> }\n  964:     ): Promise<BigNumber>;\n  965  \n  966      delegateBySig(\n  ...\n  971        r: BytesLike,\n  972        s: BytesLike,\n  973:       overrides?: Overrides & { from?: string | Promise<string> }\n  974:     ): Promise<BigNumber>;\n  975  \n  976:     delegates(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n  977  \n  978      getPastTotalSupply(\n  979        blockNumber: BigNumberish,\n  980        overrides?: CallOverrides\n  981:     ): Promise<BigNumber>;\n  982  \n  983      getPastVotes(\n  ...\n  985        blockNumber: BigNumberish,\n  986        overrides?: CallOverrides\n  987:     ): Promise<BigNumber>;\n  988  \n  989:     getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n  990  \n  991      increaseAllowance(\n  992        spender: string,\n  993        addedValue: BigNumberish,\n  994:       overrides?: Overrides & { from?: string | Promise<string> }\n  995:     ): Promise<BigNumber>;\n  996  \n  997      isClaimed(\n  998        index: BigNumberish,\n  999        overrides?: CallOverrides\n 1000:     ): Promise<BigNumber>;\n 1001  \n 1002:     merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;\n 1003  \n 1004:     minimumMintInterval(overrides?: CallOverrides): Promise<BigNumber>;\n 1005  \n 1006      mint(\n 1007        dest: string,\n 1008        amount: BigNumberish,\n 1009:       overrides?: Overrides & { from?: string | Promise<string> }\n 1010:     ): Promise<BigNumber>;\n 1011  \n 1012:     mintCap(overrides?: CallOverrides): Promise<BigNumber>;\n 1013  \n 1014:     name(overrides?: CallOverrides): Promise<BigNumber>;\n 1015  \n 1016:     nextMint(overrides?: CallOverrides): Promise<BigNumber>;\n 1017  \n 1018:     nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;\n 1019  \n 1020      numCheckpoints(\n 1021        account: string,\n 1022        overrides?: CallOverrides\n 1023:     ): Promise<BigNumber>;\n 1024  \n 1025:     owner(overrides?: CallOverrides): Promise<BigNumber>;\n 1026  \n 1027      permit(\n ....\n 1033        r: BytesLike,\n 1034        s: BytesLike,\n 1035:       overrides?: Overrides & { from?: string | Promise<string> }\n 1036:     ): Promise<BigNumber>;\n 1037  \n 1038      renounceOwnership(\n 1039:       overrides?: Overrides & { from?: string | Promise<string> }\n 1040:     ): Promise<BigNumber>;\n 1041  \n 1042      setMerkleRoot(\n 1043        _merkleRoot: BytesLike,\n 1044:       overrides?: Overrides & { from?: string | Promise<string> }\n 1045:     ): Promise<BigNumber>;\n 1046  \n 1047      sweep(\n 1048        dest: string,\n 1049:       overrides?: Overrides & { from?: string | Promise<string> }\n 1050:     ): Promise<BigNumber>;\n 1051  \n 1052:     symbol(overrides?: CallOverrides): Promise<BigNumber>;\n 1053  \n 1054:     totalSupply(overrides?: CallOverrides): Promise<BigNumber>;\n 1055  \n 1056      transfer(\n 1057        recipient: string,\n 1058        amount: BigNumberish,\n 1059:       overrides?: Overrides & { from?: string | Promise<string> }\n 1060:     ): Promise<BigNumber>;\n 1061  \n 1062      transferFrom(\n ....\n 1064        recipient: string,\n 1065        amount: BigNumberish,\n 1066:       overrides?: Overrides & { from?: string | Promise<string> }\n 1067:     ): Promise<BigNumber>;\n 1068  \n 1069      transferOwnership(\n 1070        newOwner: string,\n 1071:       overrides?: Overrides & { from?: string | Promise<string> }\n 1072:     ): Promise<BigNumber>;\n 1073    };\n 1074  \n 1075    populateTransaction: {\n 1076:     DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n 1077  \n 1078      allowance(\n ....\n 1080        spender: string,\n 1081        overrides?: CallOverrides\n 1082:     ): Promise<PopulatedTransaction>;\n 1083  \n 1084      approve(\n 1085        spender: string,\n 1086        amount: BigNumberish,\n 1087:       overrides?: Overrides & { from?: string | Promise<string> }\n 1088:     ): Promise<PopulatedTransaction>;\n 1089  \n 1090      balanceOf(\n 1091        account: string,\n 1092        overrides?: CallOverrides\n 1093:     ): Promise<PopulatedTransaction>;\n 1094  \n 1095      checkpoints(\n ....\n 1097        pos: BigNumberish,\n 1098        overrides?: CallOverrides\n 1099:     ): Promise<PopulatedTransaction>;\n 1100  \n 1101:     claimPeriodEnds(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n 1102  \n 1103      claimTokens(\n ....\n 1105        delegate: string,\n 1106        merkleProof: BytesLike[],\n 1107:       overrides?: Overrides & { from?: string | Promise<string> }\n 1108:     ): Promise<PopulatedTransaction>;\n 1109  \n 1110:     decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n 1111  \n 1112      decreaseAllowance(\n 1113        spender: string,\n 1114        subtractedValue: BigNumberish,\n 1115:       overrides?: Overrides & { from?: string | Promise<string> }\n 1116:     ): Promise<PopulatedTransaction>;\n 1117  \n 1118      delegate(\n 1119        delegatee: string,\n 1120:       overrides?: Overrides & { from?: string | Promise<string> }\n 1121:     ): Promise<PopulatedTransaction>;\n 1122  \n 1123      delegateBySig(\n ....\n 1128        r: BytesLike,\n 1129        s: BytesLike,\n 1130:       overrides?: Overrides & { from?: string | Promise<string> }\n 1131:     ): Promise<PopulatedTransaction>;\n 1132  \n 1133      delegates(\n 1134        account: string,\n 1135        overrides?: CallOverrides\n 1136:     ): Promise<PopulatedTransaction>;\n 1137  \n 1138      getPastTotalSupply(\n 1139        blockNumber: BigNumberish,\n 1140        overrides?: CallOverrides\n 1141:     ): Promise<PopulatedTransaction>;\n 1142  \n 1143      getPastVotes(\n ....\n 1145        blockNumber: BigNumberish,\n 1146        overrides?: CallOverrides\n 1147:     ): Promise<PopulatedTransaction>;\n 1148  \n 1149      getVotes(\n 1150        account: string,\n 1151        overrides?: CallOverrides\n 1152:     ): Promise<PopulatedTransaction>;\n 1153  \n 1154      increaseAllowance(\n 1155        spender: string,\n 1156        addedValue: BigNumberish,\n 1157:       overrides?: Overrides & { from?: string | Promise<string> }\n 1158:     ): Promise<PopulatedTransaction>;\n 1159  \n 1160      isClaimed(\n 1161        index: BigNumberish,\n 1162        overrides?: CallOverrides\n 1163:     ): Promise<PopulatedTransaction>;\n 1164  \n 1165:     merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n 1166  \n 1167      minimumMintInterval(\n 1168        overrides?: CallOverrides\n 1169:     ): Promise<PopulatedTransaction>;\n 1170  \n 1171      mint(\n 1172        dest: string,\n 1173        amount: BigNumberish,\n 1174:       overrides?: Overrides & { from?: string | Promise<string> }\n 1175:     ): Promise<PopulatedTransaction>;\n 1176  \n 1177:     mintCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n 1178  \n 1179:     name(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n 1180  \n 1181:     nextMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n 1182  \n 1183      nonces(\n 1184        owner: string,\n 1185        overrides?: CallOverrides\n 1186:     ): Promise<PopulatedTransaction>;\n 1187  \n 1188      numCheckpoints(\n 1189        account: string,\n 1190        overrides?: CallOverrides\n 1191:     ): Promise<PopulatedTransaction>;\n 1192  \n 1193:     owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n 1194  \n 1195      permit(\n ....\n 1201        r: BytesLike,\n 1202        s: BytesLike,\n 1203:       overrides?: Overrides & { from?: string | Promise<string> }\n 1204:     ): Promise<PopulatedTransaction>;\n 1205  \n 1206      renounceOwnership(\n 1207:       overrides?: Overrides & { from?: string | Promise<string> }\n 1208:     ): Promise<PopulatedTransaction>;\n 1209  \n 1210      setMerkleRoot(\n 1211        _merkleRoot: BytesLike,\n 1212:       overrides?: Overrides & { from?: string | Promise<string> }\n 1213:     ): Promise<PopulatedTransaction>;\n 1214  \n 1215      sweep(\n 1216        dest: string,\n 1217:       overrides?: Overrides & { from?: string | Promise<string> }\n 1218:     ): Promise<PopulatedTransaction>;\n 1219  \n 1220:     symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n 1221  \n 1222:     totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n 1223  \n 1224      transfer(\n 1225        recipient: string,\n 1226        amount: BigNumberish,\n 1227:       overrides?: Overrides & { from?: string | Promise<string> }\n 1228:     ): Promise<PopulatedTransaction>;\n 1229  \n 1230      transferFrom(\n ....\n 1232        recipient: string,\n 1233        amount: BigNumberish,\n 1234:       overrides?: Overrides & { from?: string | Promise<string> }\n 1235:     ): Promise<PopulatedTransaction>;\n 1236  \n 1237      transferOwnership(\n 1238        newOwner: string,\n 1239:       overrides?: Overrides & { from?: string | Promise<string> }\n 1240:     ): Promise<PopulatedTransaction>;\n 1241    };\n 1242  }\n\n~/Sandbox/hop/packages/frontend/src/abis/types/factories/ENSToken__factory.ts:\n  873      airdropSupply: BigNumberish,\n  874      _claimPeriodEnds: BigNumberish,\n  875:     overrides?: Overrides & { from?: string | Promise<string> }\n  876:   ): Promise<ENSToken> {\n  877      return super.deploy(\n  878        freeSupply,\n  ...\n  880        _claimPeriodEnds,\n  881        overrides || {}\n  882:     ) as Promise<ENSToken>;\n  883    }\n  884    getDeployTransaction(\n  ...\n  886      airdropSupply: BigNumberish,\n  887      _claimPeriodEnds: BigNumberish,\n  888:     overrides?: Overrides & { from?: string | Promise<string> }\n  889    ): TransactionRequest {\n  890      return super.getDeployTransaction(\n\n~/Sandbox/hop/packages/frontend/src/components/Rebalancer/Modal.tsx:\n  108    }\n  109  \n  110:   async function changeNetwork(newChainId: number): Promise<boolean> {\n  111      try {\n  112        const event = { target: { value: networkIdToSlug(newChainId) } }\n  ...\n  119    }\n  120  \n  121:   async function getTokensAreStaked(stakingContract: Contract): Promise<boolean | undefined> {\n  122      // check if any tokens are staked\n  123      try {\n\n~/Sandbox/hop/packages/frontend/src/components/Rebalancer/Sections/BridgingStatus.tsx:\n   71        }\n   72  \n   73:       await new Promise(resolve => setTimeout(resolve, 1000 * pollingIntervalInSeconds))\n   74      }\n   75      console.log(\"Unable to confirm successful bridge transaction\")\n\n~/Sandbox/hop/packages/frontend/src/components/Rebalancer/Sections/NetworkSelection.tsx:\n   13  \n   14  interface NetworkSelectionSectionProps {\n   15:   checkConnectedNetworkId: (networkId: number) => Promise<boolean>\n   16    networksWithYields: NetworkAPRTupleType[],\n   17    connectedNetworkId: number | undefined,\n\n~/Sandbox/hop/packages/frontend/src/contexts/Web3Context.tsx:\n   32    walletConnected: boolean\n   33    walletName: string\n   34:   checkConnectedNetworkId: (networkId: number) => Promise<boolean>\n   35  }\n   36  \n   ..\n  172    // Displays the wallet select modal:\n  173    // const walletSelected = await onboard.walletSelect()\n  174:   // returns a Promise that:\n  175    // resolves with true if the user selected a wallet\n  176    // resolves with false if the user exited from the wallet select modal\n  ...\n  179    // Once a wallet is selected, you will want to make sure that the user's wallet is prepared and ready to transact by calling the walletCheck function:\n  180    // const readyToTransact = await onboard.walletCheck()\n  181:   // returns a Promise that:\n  182    // resolves with true if user is ready to transact\n  183    // resolves with false if user exited before completing all wallet checks\n  ...\n  324  \n  325    // TODO: cleanup\n  326:   const checkConnectedNetworkId = async (networkId?: number, recheck: boolean = true): Promise<boolean> => {\n  327      if (!(networkId && provider)) return false\n  328  \n\n~/Sandbox/hop/packages/frontend/src/contexts/AppContext/useTxConfirm.ts:\n   11  export interface TxConfirm {\n   12    txConfirmParams: TxConfirmParams\n   13:   show: (params: TxConfirmParams) => Promise<any>\n   14  }\n   15  \n   ..\n   20    const show = (params: TxConfirmParams) => {\n   21      const { kind, inputProps, onConfirm } = params\n   22:     return new Promise((resolve, reject) => {\n   23        setTxConfirm({\n   24          kind,\n\n~/Sandbox/hop/packages/frontend/src/hooks/useDebounceAsync.ts:\n    2  import { wait } from 'src/utils'\n    3  \n    4: const useDebouncePromise = (\n    5    fn: (isCancelled: () => boolean) => void,\n    6    debounceDelay: number,\n    .\n   43  }\n   44  \n   45: export default useDebouncePromise\n   46  \n\n~/Sandbox/hop/packages/frontend/src/hooks/useGnosisSafeTransaction.ts:\n  124  \n  125    const getSafeTx = useCallback(\n  126:     async (tx: Transaction | ContractTransaction): Promise<GnosisSafeTx | undefined> => {\n  127        try {\n  128          console.log(`getting safe tx:`, tx)\n\n~/Sandbox/hop/packages/frontend/src/hooks/usePollValue.tsx:\n    4  \n    5  function usePollValue<T>(\n    6:   factory: () => Promise<T>,\n    7    interval: number,\n    8    deps: DependencyList | undefined\n\n~/Sandbox/hop/packages/frontend/src/models/Transaction.ts:\n  164    }\n  165  \n  166:   async receipt(): Promise<any> {\n  167      // fyi issue: https://github.com/ethers-io/ethers.js/issues/3477\n  168      return this.provider.waitForTransaction(this.hash)\n\n~/Sandbox/hop/packages/frontend/src/pages/Claim/useClaim.ts:\n   95        }\n   96        if (contractBalance.eq(0) || airdropSupply.eq(0)) {\n   97:         const [_contractBalance, _airdropSupply] = await Promise.all([\n   98            getContractBalance(claimProvider),\n   99            getAirdropSupply(claimProvider)\n\n~/Sandbox/hop/packages/frontend/src/pages/Claim/useDelegates.ts:\n   74        }\n   75  \n   76:       const _delegates = await Promise.all((delegates).map(async (delegate: any) => {\n   77          try {\n   78            if (!delegate.address) {\n\n~/Sandbox/hop/packages/frontend/src/pages/Convert/ConvertContext.tsx:\n  321    // Transactions\n  322    // ===============================================================================================\n  323:   const approveTokens = async (): Promise<any> => {\n  324      try {\n  325        const networkId = Number(sourceNetwork?.networkId)\n\n~/Sandbox/hop/packages/frontend/src/pages/Convert/ConvertOption/AmmConvertOption.tsx:\n   25      l1TokenSymbol?: TokenSymbol,\n   26      sourceNetwork?: Network\n   27:   ): Promise<string> {\n   28      if (!l1TokenSymbol) {\n   29        throw new Error('Token is required to get target address')\n   ..\n   47      l1TokenSymbol?: TokenSymbol,\n   48      amountIn?: BigNumberish\n   49:   ): Promise<SendData> {\n   50      if (!l1TokenSymbol || !sourceNetwork) {\n   51        return {\n   ..\n  110      network?: Network,\n  111      bridge?: HopBridge\n  112:   ): Promise<Token | undefined> {\n  113      if (!bridge || !network) return\n  114  \n  ...\n  128      network?: Network,\n  129      bridge?: HopBridge\n  130:   ): Promise<Token | undefined> {\n  131      if (!bridge || !network) return\n  132  \n  ...\n  150      isConvertingToHToken: boolean,\n  151      l1TokenSymbol: TokenSymbol\n  152:   ): Promise<ReactNode> {\n  153      let rateDisplay = '-'\n  154      let slippageToleranceDisplay = '-'\n\n~/Sandbox/hop/packages/frontend/src/pages/Convert/ConvertOption/ConvertOption.tsx:\n   21      sourceNetwork: Network | undefined,\n   22      destNetwork: Network | undefined\n   23:   ): Promise<string>\n   24  \n   25    abstract getSendData(\n   ..\n   30      l1TokenSymbol: string | undefined,\n   31      amountIn: BigNumberish | undefined\n   32:   ): Promise<SendData>\n   33  \n   34    abstract convert(\n   ..\n   43      deadline: number,\n   44      bonderFee?: BigNumberish\n   45:   ): Promise<any>\n   46  \n   47    abstract sourceToken(\n   ..\n   49      network: Network | undefined,\n   50      bridge: HopBridge | undefined\n   51:   ): Promise<Token | undefined>\n   52  \n   53    abstract destToken(\n   ..\n   55      network: Network | undefined,\n   56      bridge: HopBridge | undefined\n   57:   ): Promise<Token | undefined>\n   58  }\n   59  \n\n~/Sandbox/hop/packages/frontend/src/pages/Convert/ConvertOption/HopConvertOption.tsx:\n   81      l1TokenSymbol: TokenSymbol | undefined,\n   82      amountIn: BigNumberish | undefined\n   83:   ): Promise<SendData> {\n   84      if (!l1TokenSymbol || !sourceNetwork || !destNetwork || !amountIn) {\n   85        return {\n   ..\n  154      l1TokenSymbol?: TokenSymbol,\n  155      sourceNetwork?: Network\n  156:   ): Promise<string> {\n  157      if (!l1TokenSymbol) {\n  158        throw new Error('Token symbol is required to get target address')\n  ...\n  177      network?: Network,\n  178      bridge?: HopBridge\n  179:   ): Promise<Token | undefined> {\n  180      if (!bridge || !network) return\n  181  \n  ...\n  191      network?: Network,\n  192      bridge?: HopBridge\n  193:   ): Promise<Token | undefined> {\n  194      if (!bridge || !network) return\n  195  \n\n~/Sandbox/hop/packages/frontend/src/pages/Pools/PoolsContext.tsx:\n  424        const bridge = sdk.bridge(canonicalToken.symbol)\n  425        const lpToken = bridge.getSaddleLpToken(selectedNetwork.slug)\n  426:       const [reserves, lpTokenTotalSupply] = await Promise.all([\n  427          bridge.getSaddleSwapReserves(selectedNetwork.slug),\n  428          lpToken.totalSupply(),\n  ...\n  484        const lpToken = bridge.getSaddleLpToken(selectedNetwork.slug)\n  485  \n  486:       const [_totalSupplyBn, balance, reserves] = await Promise.all([\n  487          (await lpToken.getErc20()).totalSupply(),\n  488          lpToken.balanceOf(),\n\n~/Sandbox/hop/packages/frontend/src/pages/Pools/useStakingAll.tsx:\n   24          return\n   25        }\n   26:       const promises : any[] = []\n   27        const contracts = hopStakingRewardsContracts?.[reactAppNetwork]\n   28        let _totalEarnedBn = BigNumber.from(0)\n   ..\n   30        for (const chainSlug in contracts) {\n   31          for (const tokenSymbol in contracts[chainSlug]) {\n   32:           promises.push(async () => {\n   33              try {\n   34                const address = contracts[chainSlug][tokenSymbol]\n   ..\n   61          }\n   62        }\n   63:       await Promise.all(promises.map(fn => fn()))\n   64        setTotalEarnedBn(_totalEarnedBn)\n   65        setTxList(_txList)\n\n~/Sandbox/hop/packages/frontend/src/pages/Pools/PoolsOverview/usePools.tsx:\n  128          return cache.base\n  129        }\n  130:       const _pools = await Promise.all(basePools.map(async (_pool: any) => {\n  131          const pool = Object.assign({}, _pool)\n  132          const tokenSymbol = pool.token.symbol\n  ...\n  184              const lpToken = bridge.getSaddleLpToken(pool.chain.slug)\n  185              const tokenDecimals = bridge.getTokenDecimals()\n  186:             const [poolReserves, lpTokenTotalSupplyBn, lpBalance] = await Promise.all([\n  187                bridge.getSaddleSwapReserves(pool.chain.slug),\n  188                lpToken.totalSupply(),\n  ...\n  217                  const _provider = sdk.getChainProvider(pool.chain.slug)\n  218                  const contract = StakingRewards__factory.connect(address, _provider)\n  219:                 const [stakedBalance, earned] = await Promise.all([\n  220                    contract?.balanceOf(accountAddress),\n  221                    contract?.earned(accountAddress)\n  ...\n  242                  const _provider = sdk.getChainProvider(chainSlug)\n  243                  const contract = StakingRewards__factory.connect(hopStakingContractAddress, _provider)\n  244:                 const [stakedBalance, earned] = await Promise.all([\n  245                    contract?.balanceOf(accountAddress),\n  246                    contract?.earned(accountAddress)\n\n~/Sandbox/hop/packages/frontend/src/pages/Stats/StatsContext.tsx:\n  195        }\n  196        setFetching(true)\n  197:       const promises: Promise<any>[] = []\n  198        for (const network of filteredNetworks) {\n  199          for (const token of tokens) {\n  200:           promises.push(fetchStats(network, token).catch(logger.error))\n  201          }\n  202        }\n  203:       const results: any[] = await Promise.all(promises)\n  204        setFetching(false)\n  205        setStats(results.filter(x => x))\n  ...\n  213      selectedToken: Token,\n  214      bonder: string\n  215:   ): Promise<BonderStats | undefined> {\n  216      if (!selectedNetwork) {\n  217        return\n  ...\n  230      }\n  231      const [credit, debit, totalDebit, availableLiquidity, nativeBalance, vaultBalance] =\n  232:       await Promise.all([\n  233          bridge.getCredit(selectedNetwork.slug, bonder),\n  234          bridge.getDebit(selectedNetwork.slug, bonder),\n  ...\n  271          return\n  272        }\n  273:       const promises: Promise<any>[] = []\n  274        for (const network of networks) {\n  275          for (const token of tokens) {\n  ...\n  285            }\n  286            for (const bonder of bonders) {\n  287:             promises.push(fetchBonderStats(network, token, bonder).catch(logger.error))\n  288            }\n  289          }\n  290        }\n  291:       let results: any[] = await Promise.all(promises)\n  292        results = results.filter(x => x)\n  293        setFetchingBonderStats(!results.length)\n  ...\n  344        }\n  345        setFetchingPendingAmounts(true)\n  346:       const promises: Promise<any>[] = []\n  347        for (const sourceNetwork of filteredNetworks) {\n  348          for (const token of tokens) {\n  ...\n  351                continue\n  352              }\n  353:             promises.push(\n  354                fetchPendingAmounts(sourceNetwork, destinationNetwork, token).catch(logger.error)\n  355              )\n  ...\n  357          }\n  358        }\n  359:       const results: any[] = await Promise.all(promises)\n  360        setFetchingPendingAmounts(false)\n  361        setPendingAmounts(results.filter(x => x))\n  ...\n  370      address: string,\n  371      tokenSymbol: string\n  372:   ): Promise<BalanceStats | undefined> {\n  373      if (!slug) {\n  374        return\n  ...\n  427          addressDatas.push(['ethereum', `${token.symbol} Wrapper (Nova)`, messengerWrapperAddress, token.symbol])\n  428        }\n  429:       const promises: Promise<any>[] = []\n  430        for (const addressData of addressDatas) {\n  431          const slug: string = addressData[0]\n  432          const name: string = addressData[1]\n  433          const address: string = addressData[2]\n  434:         promises.push(fetchBalances(slug, name, address, addressData[3]).catch(logger.error))\n  435        }\n  436:       const results: any[] = await Promise.all(promises)\n  437        setFetchingBalances(false)\n  438        setBalances(results.filter(x => !!x))\n  ...\n  445      selectedToken: Token,\n  446      bonder: string\n  447:   ): Promise<DebitWindowStats | undefined> {\n  448      if (!pendingAmounts?.length) {\n  449        return\n  ...\n  487          return\n  488        }\n  489:       const promises: Promise<any>[] = []\n  490        for (const token of tokens) {\n  491          const bonders = new Set<string>()\n  ...\n  503          }\n  504          for (const bonder of bonders) {\n  505:           promises.push(fetchDebitWindowStats(token, bonder).catch(logger.error))\n  506          }\n  507        }\n  508:       let results: any[] = await Promise.all(promises)\n  509        results = results.filter(x => x)\n  510        setFetchingDebitWindowStats(!results.length)\n\n~/Sandbox/hop/packages/frontend/src/pages/Withdraw/Withdraw.tsx:\n   71        setError('')\n   72        let wp: WithdrawalProof\n   73:       await new Promise(async (resolve, reject) => {\n   74          try {\n   75            wp = new WithdrawalProof(transferIdOrTxHash)\n\n~/Sandbox/hop/packages/frontend/src/pages/Withdraw/WithdrawalProof.ts:\n  236        const { transferId, destinationChainId, token } = transfer\n  237        const destinationChain = networkIdToSlug(destinationChainId)\n  238:       const [withdrewEvent, bondedEvent] = await Promise.all([\n  239          this.queryWithdrew(transferId, destinationChain),\n  240          this.queryBondWithdrawal(transferId, destinationChain)\n  ...\n  678      const destinationChain = networkIdToSlug(transferRoot.destinationChainId)\n  679  \n  680:     const [rootSet, transferIds] = await Promise.all([\n  681        this.queryRootSet(destinationChain, token, transferRootHash),\n  682        this.queryTransferIdsForTransferRoot(chain, token, transferRootHash)\n\n~/Sandbox/hop/packages/frontend/src/utils/blocks.ts:\n    4    const blockNumber = await provider.getBlockNumber()\n    5    const nums = [0, 1, 2, 3]\n    6:   const recentBlocks = await Promise.all(\n    7      nums.map(num => provider.getBlockWithTransactions(blockNumber - num))\n    8    )\n\n~/Sandbox/hop/packages/frontend/src/utils/promiseTimeout.ts:\n    1: const promiseTimeout = async (promise: any, timeout: number): Promise<any> => {\n    2:   return new Promise((resolve, reject) => {\n    3      let timedout = false\n    4      const t = setTimeout(() => {\n    .\n    7      }, timeout)\n    8  \n    9:     // make it a promise if it's not one\n   10:     Promise.resolve(promise)\n   11        .then((result: any) => {\n   12          clearTimeout(t)\n   ..\n   24  }\n   25  \n   26: export default promiseTimeout\n   27  \n\n~/Sandbox/hop/packages/frontend/src/utils/queries.ts:\n  109    recipient: string,\n  110    txHash: string\n  111: ): Promise<L2Transfer[]> {\n  112    recipient = recipient.toLowerCase()\n  113    txHash = txHash.toLowerCase()\n  ...\n  148    amount: BigNumberish,\n  149    deadline: BigNumberish\n  150: ): Promise<L1Transfer[]> {\n  151    recipient = recipient.toLowerCase()\n  152    amount = normalizeBN(amount)\n\n~/Sandbox/hop/packages/frontend/src/utils/transactions.ts:\n   41    const blockTags = getBlockTagChunks(blockNumber)\n   42  \n   43:   const evs = await Promise.all(\n   44      blockTags.map(([fromBlock, toBlock]) => destL2Bridge.queryFilter(filter, fromBlock, toBlock))\n   45    )\n\n~/Sandbox/hop/packages/frontend/src/utils/wait.ts:\n    1  export const wait = async (t: number) => {\n    2:   return new Promise(resolve => setTimeout(() => resolve(null), t))\n    3  }\n    4  \n\n~/Sandbox/hop/packages/hop-node/.eslintrc.json:\n   26      \"prefer-const\": 1,\n   27      \"array-callback-return\": 0,\n   28:     \"no-async-promise-executor\": 0,\n   29      \"node/no-callback-literal\": 0,\n   30      \"sort-imports-es6-autofix/sort-imports-es6\": [1, {\n   ..\n   38      \"@typescript-eslint/restrict-template-expressions\": 0,\n   39      \"@typescript-eslint/explicit-function-return-type\": 0,\n   40:     \"@typescript-eslint/no-floating-promises\": 0,\n   41:     \"@typescript-eslint/no-misused-promises\": 0,\n   42      \"@typescript-eslint/no-dynamic-delete\": 0,\n   43      \"@typescript-eslint/return-await\": 0,\n\n~/Sandbox/hop/packages/hop-node/package-lock.json:\n   92          \"eslint-plugin-jest\": \"^24.3.6\",\n   93          \"eslint-plugin-node\": \"^11.1.0\",\n   94:         \"eslint-plugin-promise\": \"^5.1.0\",\n   95          \"eslint-plugin-sort-imports-es6-autofix\": \"^0.6.0\",\n   96          \"eslint-plugin-unused-imports\": \"^1.1.2\",\n   ..\n 7916        }\n 7917      },\n 7918:     \"node_modules/es6-promise\": {\n 7919        \"version\": \"4.2.8\",\n 7920:       \"resolved\": \"https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz\",\n 7921        \"integrity\": \"sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w==\"\n 7922      },\n ....\n 8113          \"eslint-plugin-import\": \"^2.22.1\",\n 8114          \"eslint-plugin-node\": \"^11.1.0\",\n 8115:         \"eslint-plugin-promise\": \"^4.2.1 || ^5.0.0\"\n 8116        }\n 8117      },\n ....\n 8130          \"eslint-plugin-import\": \"^2.22.1\",\n 8131          \"eslint-plugin-node\": \"^11.1.0\",\n 8132:         \"eslint-plugin-promise\": \"^4.2.1 || ^5.0.0\",\n 8133          \"typescript\": \"^3.9 || ^4.0.0\"\n 8134        }\n ....\n 8346        }\n 8347      },\n 8348:     \"node_modules/eslint-plugin-promise\": {\n 8349        \"version\": \"5.2.0\",\n 8350:       \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-5.2.0.tgz\",\n 8351        \"integrity\": \"sha512-SftLb1pUG01QYq2A/hGAWfDRXqYD82zE7j7TopDOyNdU+7SvvoXREls/+PRTY17vUXzXnZA/zfnyKgRH6x4JJw==\",\n 8352        \"dev\": true,\n ....\n 8655          \"servify\": \"^0.1.12\",\n 8656          \"ws\": \"^3.0.0\",\n 8657:         \"xhr-request-promise\": \"^0.1.2\"\n 8658        }\n 8659      },\n ....\n 14030        \"optional\": true\n 14031      },\n 14032:     \"node_modules/mkdirp-promise\": {\n 14033        \"version\": \"5.0.1\",\n 14034:       \"resolved\": \"https://registry.npmjs.org/mkdirp-promise/-/mkdirp-promise-5.0.1.tgz\",\n 14035        \"integrity\": \"sha512-Hepn5kb1lJPtVW84RFT40YG1OddBNTOVUZR2bzQUHc+Z03en8/3uX0+060JDhcEzyO08HmipsN9DcnFMxhIL9w==\",\n 14036:       \"deprecated\": \"This package is broken and no longer maintained. 'mkdirp' itself supports promises now, please switch to that.\",\n 14037        \"dependencies\": {\n 14038          \"mkdirp\": \"*\"\n .....\n 17781          \"got\": \"^11.8.5\",\n 17782          \"mime-types\": \"^2.1.16\",\n 17783:         \"mkdirp-promise\": \"^5.0.1\",\n 17784          \"mock-fs\": \"^4.1.0\",\n 17785          \"setimmediate\": \"^1.0.5\",\n .....\n 19151          \"bn.js\": \"^4.11.6\",\n 19152          \"elliptic\": \"^6.4.0\",\n 19153:         \"xhr-request-promise\": \"^0.1.2\"\n 19154        }\n 19155      },\n .....\n 19252          \"abortcontroller-polyfill\": \"^1.7.3\",\n 19253          \"cross-fetch\": \"^3.1.4\",\n 19254:         \"es6-promise\": \"^4.2.8\",\n 19255          \"web3-core-helpers\": \"1.7.5\"\n 19256        },\n .....\n 19632        }\n 19633      },\n 19634:     \"node_modules/xhr-request-promise\": {\n 19635        \"version\": \"0.1.3\",\n 19636:       \"resolved\": \"https://registry.npmjs.org/xhr-request-promise/-/xhr-request-promise-0.1.3.tgz\",\n 19637        \"integrity\": \"sha512-YUBytBsuwgitWtdRzXDDkWAXzhdGB8bYm0sSzMPZT7Z2MBjMSTHFsyCT1yCRATY+XC69DUrQraRAEgcoCRaIPg==\",\n 19638        \"dependencies\": {\n .....\n 26071        }\n 26072      },\n 26073:     \"es6-promise\": {\n 26074        \"version\": \"4.2.8\",\n 26075:       \"resolved\": \"https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz\",\n 26076        \"integrity\": \"sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w==\"\n 26077      },\n .....\n 26438        }\n 26439      },\n 26440:     \"eslint-plugin-promise\": {\n 26441        \"version\": \"5.2.0\",\n 26442:       \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-5.2.0.tgz\",\n 26443        \"integrity\": \"sha512-SftLb1pUG01QYq2A/hGAWfDRXqYD82zE7j7TopDOyNdU+7SvvoXREls/+PRTY17vUXzXnZA/zfnyKgRH6x4JJw==\",\n 26444        \"dev\": true\n .....\n 26598          \"servify\": \"^0.1.12\",\n 26599          \"ws\": \"^3.0.0\",\n 26600:         \"xhr-request-promise\": \"^0.1.2\"\n 26601        },\n 26602        \"dependencies\": {\n .....\n 30747        \"optional\": true\n 30748      },\n 30749:     \"mkdirp-promise\": {\n 30750        \"version\": \"5.0.1\",\n 30751:       \"resolved\": \"https://registry.npmjs.org/mkdirp-promise/-/mkdirp-promise-5.0.1.tgz\",\n 30752        \"integrity\": \"sha512-Hepn5kb1lJPtVW84RFT40YG1OddBNTOVUZR2bzQUHc+Z03en8/3uX0+060JDhcEzyO08HmipsN9DcnFMxhIL9w==\",\n 30753        \"requires\": {\n .....\n 33615          \"got\": \"^11.8.5\",\n 33616          \"mime-types\": \"^2.1.16\",\n 33617:         \"mkdirp-promise\": \"^5.0.1\",\n 33618          \"mock-fs\": \"^4.1.0\",\n 33619          \"setimmediate\": \"^1.0.5\",\n .....\n 34688              \"bn.js\": \"^4.11.6\",\n 34689              \"elliptic\": \"^6.4.0\",\n 34690:             \"xhr-request-promise\": \"^0.1.2\"\n 34691            }\n 34692          },\n .....\n 34774          \"abortcontroller-polyfill\": \"^1.7.3\",\n 34775          \"cross-fetch\": \"^3.1.4\",\n 34776:         \"es6-promise\": \"^4.2.8\",\n 34777          \"web3-core-helpers\": \"1.7.5\"\n 34778        }\n .....\n 35110        }\n 35111      },\n 35112:     \"xhr-request-promise\": {\n 35113        \"version\": \"0.1.3\",\n 35114:       \"resolved\": \"https://registry.npmjs.org/xhr-request-promise/-/xhr-request-promise-0.1.3.tgz\",\n 35115        \"integrity\": \"sha512-YUBytBsuwgitWtdRzXDDkWAXzhdGB8bYm0sSzMPZT7Z2MBjMSTHFsyCT1yCRATY+XC69DUrQraRAEgcoCRaIPg==\",\n 35116        \"requires\": {\n\n~/Sandbox/hop/packages/hop-node/package.json:\n  118      \"eslint-plugin-jest\": \"^24.3.6\",\n  119      \"eslint-plugin-node\": \"^11.1.0\",\n  120:     \"eslint-plugin-promise\": \"^5.1.0\",\n  121      \"eslint-plugin-sort-imports-es6-autofix\": \"^0.6.0\",\n  122      \"eslint-plugin-unused-imports\": \"^1.1.2\",\n\n~/Sandbox/hop/packages/hop-node/yarn.lock:\n 4497      semver \"^6.1.0\"\n 4498  \n 4499: eslint-plugin-promise@^5.1.0:\n 4500    version \"5.2.0\"\n 4501:   resolved \"https://registry.yarnpkg.com/eslint-plugin-promise/-/eslint-plugin-promise-5.2.0.tgz#a596acc32981627eb36d9d75f9666ac1a4564971\"\n 4502    integrity sha512-SftLb1pUG01QYq2A/hGAWfDRXqYD82zE7j7TopDOyNdU+7SvvoXREls/+PRTY17vUXzXnZA/zfnyKgRH6x4JJw==\n 4503  \n\n~/Sandbox/hop/packages/hop-node/src/aws/cloudWatch.ts:\n   54    let { logGroup, logStream, filterPattern, startTime, endTime } = config\n   55    const cloudwatch = new AWS.CloudWatchLogs()\n   56:   const getLatestLogStream = async (): Promise<any> => {\n   57      const params = {\n   58        logGroupName: logGroup,\n   ..\n   73    }\n   74  \n   75:   const getLogEvents = async (nextToken?: string): Promise<any> => {\n   76      const params = {\n   77        startTime,\n\n~/Sandbox/hop/packages/hop-node/src/aws/parameterStore.ts:\n    6  })\n    7  \n    8: export async function getParameter (name: string, region?: string): Promise<string> {\n    9    const ssm = new AWS.SSM({\n   10      region\n   ..\n   14      WithDecryption: true\n   15    }\n   16:   return await new Promise((resolve, reject) => {\n   17      ssm.getParameter(params, function (err: Error, data: any) {\n   18        if (err) {\n\n~/Sandbox/hop/packages/hop-node/src/cli/cli.ts:\n   51  })\n   52  \n   53: process.on('unhandledRejection', (reason: Error, p: Promise<any>) => {\n   54:   logger.error('unhandled rejection: promise:', p, 'reason:', reason)\n   55  })\n   56  \n\n~/Sandbox/hop/packages/hop-node/src/cli/dbDump.ts:\n  137          throw new Error('chain flag is required')\n  138        }\n  139:       items = await Promise.all([\n  140          db.gasCost.getNearest(chain, tokenSymbol, GasCostTransactionType.BondWithdrawal, nearest),\n  141          db.gasCost.getNearest(chain, tokenSymbol, GasCostTransactionType.BondWithdrawalAndAttemptSwap, nearest),\n\n~/Sandbox/hop/packages/hop-node/src/cli/hopNode.ts:\n  132    }\n  133  \n  134:   const promises: Array<Promise<void>> = []\n  135:   promises.push(new Promise((resolve) => {\n  136      new OsWatcher({\n  137        heapdump\n  ...\n  160      }\n  161  \n  162:     promises.push(new Promise((resolve) => {\n  163        new HealthCheckWatcher({\n  164          days: healthCheckDays,\n  ...\n  172    }\n  173  \n  174:   await Promise.all([...starts, ...promises])\n  175  }\n  176  \n\n~/Sandbox/hop/packages/hop-node/src/cli/keystores.ts:\n  171  }\n  172  \n  173: async function generatePassphrase (): Promise<string> {\n  174    const passphrase = await promptPassphrase(\n  175      'Enter new keystore encryption passphrase'\n\n~/Sandbox/hop/packages/hop-node/src/cli/stake.ts:\n  136  }\n  137  \n  138: async function getToken (bridge: L2Bridge | L1Bridge): Promise<Token | void> { // eslint-disable-line @typescript-eslint/no-invalid-void-type\n  139    const isEthSend: boolean = bridge.l1CanonicalTokenAddress === constants.AddressZero\n  140    if (isEthSend) {\n  ...\n  154  }\n  155  \n  156: async function getTokenBalance (bridge: L2Bridge | L1Bridge, token: Token | void): Promise<BigNumber> { // eslint-disable-line @typescript-eslint/no-invalid-void-type\n  157    if (!token) {\n  158      return bridge.getEthBalance()\n  ...\n  161  }\n  162  \n  163: async function getBridge (token: string, chain: string): Promise<L2Bridge | L1Bridge> {\n  164    // Arbitrary watcher since only the bridge is needed\n  165    const watcher = await getBondWithdrawalWatcher({ chain, token, dryMode: false })\n\n~/Sandbox/hop/packages/hop-node/src/cli/stakeStatus.ts:\n   33    logger.debug(`bonder address: ${bonderAddress}`)\n   34  \n   35:   const [credit, rawDebit, debit, allowance, eth] = await Promise.all([\n   36      bridge.getCredit(),\n   37      bridge.getRawDebit(),\n   ..\n   54  }\n   55  \n   56: async function getToken (bridge: L2Bridge | L1Bridge): Promise<Token | void> { // eslint-disable-line @typescript-eslint/no-invalid-void-type\n   57    const isEthSend: boolean = bridge.l1CanonicalTokenAddress === constants.AddressZero\n   58    if (isEthSend) {\n\n~/Sandbox/hop/packages/hop-node/src/cli/unconfirmedRoots.ts:\n   59  }\n   60  \n   61: async function getRootsBonded (token: string, endDateSeconds: number): Promise<string[]> {\n   62    const startDate = 0\n   63    const bondedRes = await getTransferRootBonded(Chain.Ethereum, token, startDate, endDateSeconds)\n   ..\n   70  }\n   71  \n   72: async function getRootsConfirmed (token: string): Promise<string[]> {\n   73    const confirmedRes = await getTransferRootConfirmed(Chain.Ethereum, token)\n   74    const rootsConfirmed: string[] = []\n   ..\n   80  }\n   81  \n   82: async function getRootsBondedButNotConfirmed (rootsBonded: string[], rootsConfirmed: string[]): Promise<string[]> {\n   83    const rootsBondedButNotConfirmed: string[] = []\n   84    for (const rootBonded of rootsBonded) {\n   ..\n   90  }\n   91  \n   92: async function getRootsCommitted (token: string): Promise<Record<string, RootsCommitted>> {\n   93    const sourceChains = getSourceChains(token)\n   94    const rpcRootsCommitted: Record<string, RootsCommitted> = {}\n\n~/Sandbox/hop/packages/hop-node/src/cli/unsettledRoots.ts:\n  110  }\n  111  \n  112: async function getSettledRoots (chain: string, token: string): Promise<SettledRootsPerBonder> {\n  113    const multipleWithdrawalsSettledRes = await getMultipleWithdrawalsSettled(chain, token)\n  114    const settledPerBonder: any = {}\n\n~/Sandbox/hop/packages/hop-node/src/cli/unstake.ts:\n   45  ) {\n   46    logger.debug('Unstaking')\n   47:   const [credit, debit] = await Promise.all([\n   48      bridge.getCredit(),\n   49      bridge.getDebit()\n\n~/Sandbox/hop/packages/hop-node/src/db/BaseDb.ts:\n  138    }\n  139  \n  140:   protected async tilReady (): Promise<boolean> {\n  141      if (this.ready) {\n  142        return true\n  ...\n  199    async _updateWithBatch (key: string, data: any) {\n  200      const logger = this.logger.create({ id: key })\n  201:     return new Promise(async (resolve, reject) => {\n  202        const cb = (err: Error, ops: any[]) => {\n  203          if (err) {\n  ...\n  236        })\n  237  \n  238:       return new Promise((resolve, reject) => {\n  239          this.db.batch(groupedOps, (err: Error) => {\n  240            for (const { cb } of putItems) {\n  ...\n  285    }\n  286  \n  287:   async getKeys (filter?: KeyFilter): Promise<string[]> {\n  288      filter = Object.assign({\n  289        keys: true,\n  ...\n  294    }\n  295  \n  296:   async getValues (filter?: KeyFilter): Promise<any[]> {\n  297      filter = Object.assign({\n  298        keys: true,\n  ...\n  303    }\n  304  \n  305:   async getKeyValues (filter: KeyFilter = { keys: true, values: true }): Promise<KV[]> {\n  306:     return await new Promise((resolve, reject) => {\n  307        const kv: KV[] = []\n  308        const s = this.db.createReadStream(filter)\n\n~/Sandbox/hop/packages/hop-node/src/db/GasBoostDb.ts:\n    2  \n    3  class GasBoostDb extends BaseDb {\n    4:   async updateItem (key: string, data: any): Promise<void> {\n    5      await this._update(key, data)\n    6    }\n    7  \n    8:   async getItem (key: string): Promise<any> {\n    9      const item = await this.getById(key)\n   10      return item\n   11    }\n   12  \n   13:   async deleteItem (key: string): Promise<void> {\n   14      await this.deleteById(key)\n   15    }\n\n~/Sandbox/hop/packages/hop-node/src/db/GasCostDb.ts:\n   50    }\n   51  \n   52:   async getItems (filter?: KeyFilter): Promise<GasCost[]> {\n   53      const items: GasCost[] = await this.getValues(filter)\n   54      return items.filter(x => x)\n   55    }\n   56  \n   57:   async getNearest (chain: string, token: string, transactionType: GasCostTransactionType, targetTimestamp: number): Promise<GasCost | null> {\n   58      await this.tilReady()\n   59      const startTimestamp = targetTimestamp - OneHourSeconds\n   ..\n   85    }\n   86  \n   87:   private async getOldEntries (): Promise<GasCost[]> {\n   88      await this.tilReady()\n   89      const oneWeekAgo = Math.floor((Date.now() - OneWeekMs) / 1000)\n   ..\n   98    }\n   99  \n  100:   private async prune (): Promise<void> {\n  101      await this.tilReady()\n  102      const items = await this.getOldEntries()\n\n~/Sandbox/hop/packages/hop-node/src/db/SyncStateDb.ts:\n   28    }\n   29  \n   30:   async getByKey (key: string): Promise<State> {\n   31      const item: State = await this.getById(key)\n   32      return this.normalizeValue(key, item)\n   33    }\n   34  \n   35:   async getItems (): Promise<State[]> {\n   36      const items: State[] = await this.getValues()\n   37      return items.filter(x => x)\n\n~/Sandbox/hop/packages/hop-node/src/db/TransferRootsDb.ts:\n  321    }\n  322  \n  323:   async getEvents (transferRootId: string): Promise<MultipleWithdrawalsSettled[]> {\n  324      const filter: KeyFilter = {\n  325        gte: `${transferRootId}:`,\n  ...\n  387      transferRoot.transferRootId = transferRootId\n  388  \n  389:     await Promise.all([\n  390        this.subDbTimestamps.insertItem(transferRoot as TransferRoot),\n  391        this.subDbRootHashes.insertItem(transferRoot as TransferRoot),\n  ...\n  397    async getByTransferRootId (\n  398      transferRootId: string\n  399:   ): Promise<TransferRoot> {\n  400      await this.tilReady()\n  401      const item: TransferRoot = await this.getById(transferRootId)\n  ...\n  413    async getByTransferRootHash (\n  414      transferRootHash: string\n  415:   ): Promise<TransferRoot | null> {\n  416      await this.tilReady()\n  417      const transferRootId = await this.subDbRootHashes.getByTransferRootHash(transferRootHash)\n  ...\n  423    }\n  424  \n  425:   async getTransferRootIds (dateFilter?: TransferRootsDateFilter): Promise<string[]> {\n  426      await this.tilReady()\n  427      const kv = await this.subDbTimestamps.getFilteredKeyValues(dateFilter)\n  ...\n  429    }\n  430  \n  431:   async getItems (dateFilter?: TransferRootsDateFilter): Promise<TransferRoot[]> {\n  432      await this.tilReady()\n  433      const transferRootIds = await this.getTransferRootIds(dateFilter)\n  ...\n  440    }\n  441  \n  442:   async getTransferRoots (dateFilter?: TransferRootsDateFilter): Promise<TransferRoot[]> {\n  443      await this.tilReady()\n  444      return this.getItems(dateFilter)\n  ...\n  446  \n  447    // gets only transfer roots within range: now - 2 weeks ago\n  448:   async getTransferRootsFromTwoWeeks (): Promise<TransferRoot[]> {\n  449      await this.tilReady()\n  450      const fromUnix = Math.floor((Date.now() - (OneWeekMs * 2)) / 1000)\n  ...\n  454    }\n  455  \n  456:   async getBondedTransferRootsFromTwoWeeks (): Promise<TransferRoot[]> {\n  457      await this.tilReady()\n  458      const fromUnix = Math.floor((Date.now() - (OneWeekMs * 2)) / 1000)\n  ...\n  465    async getUnbondedTransferRoots (\n  466      filter: GetItemsFilter = {}\n  467:   ): Promise<UnbondedTransferRoot[]> {\n  468      await this.tilReady()\n  469      const transferRoots: TransferRoot[] = await this.getTransferRootsFromTwoWeeks()\n  ...\n  511    async getExitableTransferRoots (\n  512      filter: GetItemsFilter = {}\n  513:   ): Promise<ExitableTransferRoot[]> {\n  514      await this.tilReady()\n  515      const transferRoots: TransferRoot[] = await this.getTransferRootsFromTwoWeeks()\n  ...\n  575    async getConfirmableTransferRoots (\n  576      filter: GetItemsFilter = {}\n  577:   ): Promise<ExitableTransferRoot[]> {\n  578      await this.tilReady()\n  579      const transferRoots: TransferRoot[] = await this.getTransferRootsFromTwoWeeks()\n  ...\n  632    async getRelayableTransferRoots (\n  633      filter: GetItemsFilter = {}\n  634:   ): Promise<RelayableTransferRoot[]> {\n  635      await this.tilReady()\n  636      const transferRoots: TransferRoot[] = await this.getTransferRootsFromTwoWeeks()\n  ...\n  685    async getChallengeableTransferRoots (\n  686      filter: GetItemsFilter = {}\n  687:   ): Promise<ChallengeableTransferRoot[]> {\n  688      await this.tilReady()\n  689      const transferRoots: TransferRoot[] = await this.getBondedTransferRootsFromTwoWeeks()\n  ...\n  724    async getUnsettledTransferRoots (\n  725      filter: GetItemsFilter = {}\n  726:   ): Promise<UnsettledTransferRoot[]> {\n  727      await this.tilReady()\n  728      const transferRoots: TransferRoot[] = await this.getTransferRootsFromTwoWeeks()\n\n~/Sandbox/hop/packages/hop-node/src/db/TransfersDb.ts:\n  326      logger.debug('update called')\n  327      transfer.transferId = transferId\n  328:     await Promise.all([\n  329        this.subDbTimestamps.upsertItem(transfer as Transfer),\n  330        this.subDbRootHashes.insertItem(transfer as Transfer),\n  ...\n  333    }\n  334  \n  335:   async getByTransferId (transferId: string): Promise<Transfer> {\n  336      const item: Transfer = await this.getById(transferId)\n  337      return this.normalizeItem(item)\n  338    }\n  339  \n  340:   async getTransferIds (dateFilter?: TransfersDateFilter): Promise<string[]> {\n  341      const kv = await this.subDbTimestamps.getFilteredKeyValues(dateFilter)\n  342      return kv.map(this.filterValueTransferId).filter(this.filterExisty)\n  343    }\n  344  \n  345:   async getItems (dateFilter?: TransfersDateFilter): Promise<Transfer[]> {\n  346      const transferIds = await this.getTransferIds(dateFilter)\n  347      return this.getMultipleTransfersByTransferIds(transferIds)\n  ...\n  357    }\n  358  \n  359:   async getTransfers (dateFilter?: TransfersDateFilter): Promise<Transfer[]> {\n  360      await this.tilReady()\n  361      return await this.getItems(dateFilter)\n  ...\n  382    async getUncommittedTransfers (\n  383      filter: GetItemsFilter = {}\n  384:   ): Promise<UncommittedTransfer[]> {\n  385      const transfers: Transfer[] = await this.getTransfersFromWeek()\n  386      const filtered = transfers.filter(item => {\n  ...\n  402    async getUnbondedSentTransfers (\n  403      filter: GetItemsFilter = {}\n  404:   ): Promise<UnbondedSentTransfer[]> {\n  405      const transfers: Transfer[] = await this.getTransfersFromWeek()\n  406      const isEthToken = this.prefix?.startsWith('ETH')\n  ...\n  450    async getUnrelayedSentTransfers (\n  451      filter: GetItemsFilter = {}\n  452:   ): Promise<UnrelayedSentTransfer[]> {\n  453      const transfers: Transfer[] = await this.getTransfersFromWeek()\n  454      const filtered = transfers.filter(item => {\n\n~/Sandbox/hop/packages/hop-node/src/gasboost/GasBoostSigner.ts:\n   79    }\n   80  \n   81:   protected async tilReady (): Promise<boolean> {\n   82      if (this.ready) {\n   83        return true\n   ..\n   94  \n   95    // this is a required ethers Signer method\n   96:   async sendTransaction (tx: providers.TransactionRequest): Promise<providers.TransactionResponse> {\n   97      await this.tilReady()\n   98      return await this.mutex.runExclusive(async () => {\n   ..\n  106    }\n  107  \n  108:   private async _sendTransaction (tx: providers.TransactionRequest, id: string): Promise<providers.TransactionResponse> {\n  109      const _timeId = `GasBoostTransaction elapsed ${id} `\n  110      console.time(_timeId)\n\n~/Sandbox/hop/packages/hop-node/src/gasboost/GasBoostTransaction.ts:\n  377    }\n  378  \n  379:   async getLatestNonce (): Promise<number> {\n  380      return await this.signer.getTransactionCount('pending')\n  381    }\n  ...\n  385    }\n  386  \n  387:   async getMarketGasPrice (): Promise<BigNumber> {\n  388      return await this.signer.getGasPrice()\n  389    }\n  390  \n  391:   async getMarketMaxFeePerGas (): Promise<BigNumber> {\n  392      const { maxFeePerGas } = await this.getGasFeeData()\n  393      return maxFeePerGas! // eslint-disable-line\n  394    }\n  395  \n  396:   async getMarketMaxPriorityFeePerGas (): Promise<BigNumber> {\n  397      const isMainnet = typeof this._is1559Supported === 'boolean' && this._is1559Supported && this.chainSlug === Chain.Ethereum\n  398      if (isMainnet) {\n  ...\n  431    }\n  432  \n  433:   async getBumpedGasPrice (multiplier: number = this.gasPriceMultiplier): Promise<BigNumber> {\n  434      const marketGasPrice = await this.getMarketGasPrice()\n  435      if (!this.isChainGasFeeBumpable()) {\n  ...\n  444    }\n  445  \n  446:   async getBumpedMaxPriorityFeePerGas (multiplier: number = this.gasPriceMultiplier): Promise<BigNumber> {\n  447      const marketMaxPriorityFeePerGas = await this.getMarketMaxPriorityFeePerGas()\n  448      if (!this.isChainGasFeeBumpable()) {\n  ...\n  460    }\n  461  \n  462:   async getBumpedGasFeeData (multiplier: number = this.gasPriceMultiplier): Promise<Partial<GasFeeData>> {\n  463      const use1559 = await this.is1559Supported() && !this.gasPrice && this.type !== 0\n  464  \n  465      if (use1559) {\n  466:       let [maxFeePerGas, maxPriorityFeePerGas, currentBaseFeePerGas] = await Promise.all([\n  467          this.getMarketMaxFeePerGas(),\n  468          this.getBumpedMaxPriorityFeePerGas(multiplier),\n  ...\n  506    }\n  507  \n  508:   async getCurrentBaseFeePerGas (): Promise<BigNumber | null> {\n  509      const { baseFeePerGas } = await this.signer.provider!.getBlock('latest')\n  510      return baseFeePerGas ?? null\n  ...\n  559    }\n  560  \n  561:   async wait (): Promise<providers.TransactionReceipt> {\n  562      this.logger.debug(`wait() called, tx: ${this.hash}`)\n  563      this.logger.debug(`wait() called, txHash: ${this.txHash}`)\n  ...\n  570          .then(async (receipt: providers.TransactionReceipt) => this.handleConfirmation(hash!, receipt))\n  571      }\n  572:     return await new Promise((resolve, reject) => {\n  573        this\n  574          .on(State.Confirmed, (tx) => {\n  ...\n  732    }\n  733  \n  734:   private async _sendTransaction (gasFeeData: Partial<GasFeeData>): Promise<providers.TransactionResponse> {\n  735      const maxRetries = 10\n  736      let i = 0\n  ...\n  902    }\n  903  \n  904:   async is1559Supported (): Promise<boolean> {\n  905      if (typeof this._is1559Supported === 'boolean') {\n  906        return this._is1559Supported\n\n~/Sandbox/hop/packages/hop-node/src/gasboost/MemoryStore.ts:\n    1  export default class MemoryStore {\n    2    items: any = {}\n    3:   async updateItem (key: string, value: any): Promise<void> {\n    4      this.items[key] = Object.assign({}, this.items[key], value)\n    5    }\n    6  \n    7:   async getItem (key: string): Promise<any> {\n    8      return this.items[key]\n    9    }\n   10  \n   11:   async deleteItem (key: string): Promise<void> {\n   12      delete this.items[key]\n   13    }\n\n~/Sandbox/hop/packages/hop-node/src/gasboost/Store.ts:\n    1  export default interface Store {\n    2:   updateItem: (key: string, value: any) => Promise<void>\n    3:   getItem: (key: string) => Promise<any>\n    4:   deleteItem: (key: string) => Promise<void>\n    5  }\n    6  \n\n~/Sandbox/hop/packages/hop-node/src/keystore/keystore.ts:\n   41    }\n   42  \n   43:   return new Promise(resolve => {\n   44      keythereum.dump(\n   45        passphrase,\n   ..\n   56    keystore: any,\n   57    passphrase: string\n   58: ): Promise<any> {\n   59    if (typeof keystore === 'string') {\n   60      keystore = JSON.parse(keystore.trim())\n\n~/Sandbox/hop/packages/hop-node/src/priceFeed/Coinbase.ts:\n    4    private readonly baseUrl: string = 'https://api.pro.coinbase.com'\n    5  \n    6:   public async getPriceByTokenSymbol (symbol: string, base: string = 'USD'): Promise<number> {\n    7      // pair \"USDC-USD\" doesn't exist so just return $1\n    8      if (symbol === 'USDC') {\n\n~/Sandbox/hop/packages/hop-node/src/provider/provider.ts:\n   29    }\n   30  \n   31:   async perform (method: string, params: any): Promise<any> {\n   32      this._monitorRequest(method, params)\n   33      return super.perform(method, params)\n   ..\n   68  \n   69    // Network\n   70:   getNetwork = rateLimitRetry(async (): Promise<Network> => {\n   71      return super.getNetwork()\n   72    })\n   73  \n   74    // Latest State\n   75:   getBlockNumber = rateLimitRetry(async (): Promise<number> => {\n   76      return super.getBlockNumber()\n   77    })\n   78  \n   79:   getGasPrice = rateLimitRetry(async (): Promise<BigNumber> => {\n   80      return super.getGasPrice()\n   81    })\n   82  \n   83    // Account\n   84:   getBalance = rateLimitRetry(async (addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> => {\n   85      return super.getBalance(addressOrName, blockTag)\n   86    })\n   87  \n   88:   getTransactionCount = rateLimitRetry(async (addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> => {\n   89      return super.getTransactionCount(addressOrName, blockTag)\n   90    })\n   91  \n   92:   getCode = rateLimitRetry(async (addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> => {\n   93      return super.getCode(addressOrName, blockTag)\n   94    })\n   95  \n   96:   getStorageAt = rateLimitRetry(async (addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> => {\n   97      return super.getStorageAt(addressOrName, position, blockTag)\n   98    })\n   99  \n  100    // Execution\n  101:   sendTransaction = rateLimitRetry(async (signedTransaction: string | Promise<string>): Promise<TransactionResponse> => {\n  102      return super.sendTransaction(signedTransaction)\n  103    })\n  104  \n  105:   call = rateLimitRetry(async (transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> => {\n  106      return super.call(transaction, blockTag)\n  107    })\n  108  \n  109:   estimateGas = rateLimitRetry(async (transaction: Deferrable<TransactionRequest>): Promise<BigNumber> => {\n  110      return super.estimateGas(transaction)\n  111    })\n  112  \n  113    // Queries\n  114:   getBlock = rateLimitRetry(async (blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> => {\n  115      return super.getBlock(blockHashOrBlockTag)\n  116    })\n  117  \n  118:   getBlockWithTransactions = rateLimitRetry(async (blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> => {\n  119      return super.getBlockWithTransactions(blockHashOrBlockTag)\n  120    })\n  121  \n  122:   getTransaction = rateLimitRetry(async (transactionHash: string | Promise<string>): Promise<TransactionResponse> => {\n  123      return super.getTransaction(transactionHash)\n  124    })\n  125  \n  126:   getTransactionReceipt = rateLimitRetry(async (transactionHash: string | Promise<string>): Promise<TransactionReceipt> => {\n  127      return super.getTransactionReceipt(transactionHash)\n  128    })\n  129  \n  130    // Bloom-filter Queries\n  131:   getLogs = rateLimitRetry(async (filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Log[]> => {\n  132      // this._trackStackTrace('getLogs', new Error().stack)\n  133      return super.getLogs(filter)\n  ...\n  135  \n  136    // ENS\n  137:   resolveName = rateLimitRetry(async (name: string | Promise<string>): Promise<null | string> => {\n  138      return super.resolveName(name)\n  139    })\n  140  \n  141:   lookupAddress = rateLimitRetry(async (address: string | Promise<string>): Promise<null | string> => {\n  142      return super.lookupAddress(address)\n  143    })\n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getIncompleteSettlements.ts:\n   31  }\n   32  \n   33: export default async function getIncompleteSettlements (token: string, chain: string, destinationChain: string): Promise<any> {\n   34    const destinationChainId: number = chainSlugToId(destinationChain)\n   35  \n   ..\n  155    chain: string,\n  156    destinationChainId: number\n  157: ): Promise<TransferCommitted[]> {\n  158    const query = getTransfersCommittedsQuery(token)\n  159    const transfersCommittedRes = await makeRequest(chain, query, {\n  ...\n  167    destinationChain: string,\n  168    rootHash: string\n  169: ): Promise<MultipleWithdrawalsSettled[]> {\n  170    const query = getMultipleWithdrawalsSettledsQuery()\n  171    const multipleWithdrawalsSettledRes = await makeRequest(destinationChain, query, {\n  ...\n  181    startBlockNumber: string,\n  182    endBlockNumber: string\n  183: ): Promise<TransferSent[]> {\n  184    const query = getTransferSentsQuery(token)\n  185    const transferSentRes = await makeRequest(chain, query, {\n  ...\n  195    destinationChain: string,\n  196    transferId: string\n  197: ): Promise<WithdrawnTransfer[]> {\n  198    const query = getWithdrewsQuery()\n  199    const withdrewsRes = await makeRequest(destinationChain, query, {\n  ...\n  206    destinationChain: string,\n  207    transferId: string\n  208: ): Promise<BondedTransfer[]> {\n  209    const query = getWithdrawalBondedsQuery()\n  210    const withdrawalBondedsRes = await makeRequest(destinationChain, query, {\n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getTransfer.ts:\n    5  import { chainIdToSlug, normalizeEntity } from './shared'\n    6  \n    7: export default async function getTransfer (chain: string, token: string, transferId: string): Promise<any> {\n    8    let query = `\n    9      query TransferId(${token ? '$token: String, ' : ''}$transferId: String) {\n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getTransferIds.ts:\n    9    filters: Partial<Filters> = {},\n   10    lastId: string = '0'\n   11: ): Promise<any[]> {\n   12    if (chain === 'ethereum') {\n   13      return []\n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getTransferIdsForTransferRoot.ts:\n    9    token: string,\n   10    rootHash: string\n   11: ): Promise<string[]> {\n   12    // get commit transfer event of root hash\n   13    let query = `\n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getTransferRoot.ts:\n  104  }\n  105  \n  106: export default async function getTransferRoot (chain: string, token: string, transferRootHash: string): Promise<any> {\n  107    const transferRoot = await queryTransferRoot(chain, token, transferRootHash)\n  108    if (!transferRoot) {\n  ...\n  111    const destinationChain = chainIdToSlug[transferRoot.destinationChainId]\n  112  \n  113:   const [rootSet, rootConfirmed, transferIds] = await Promise.all([\n  114      queryRootSet(destinationChain, token, transferRootHash),\n  115      queryRootConfirmed(Chain.Ethereum, token, transferRootHash),\n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getTransferRootForTransferId.ts:\n    3  import makeRequest from './makeRequest'\n    4  \n    5: export default async function getTransferRootForTransferId (chain: string, token: string, transferId: string): Promise<any> {\n    6    let query = `\n    7      query TransferId($token: String, $transferId: String) {\n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getTransferRoots.ts:\n    6    token: string,\n    7    lastId: string = '0'\n    8: ): Promise<any[]> {\n    9    const query = `\n   10      query TransferRoots($token: String, $lastId: ID) {\n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getTransfers.ts:\n    3  import { Filters } from './shared'\n    4  \n    5: export default async function getTransfers (chain: string, token: string, cb: any, filters: Partial<Filters> = {}): Promise<any[]> {\n    6    const transferIds = await getTransferIds(chain, token, filters)\n    7    console.log(`transfer ids count: ${transferIds.length}`)\n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getTransferSent.ts:\n    2  import { normalizeEntity } from './shared'\n    3  \n    4: export default async function getTransferSent (chain: string, transferId: string): Promise<any> {\n    5    const query = `\n    6      query TransferSents($transferId: String) {\n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getUnbondedTransferRoots.ts:\n    6  import { formatUnits } from 'ethers/lib/utils'\n    7  \n    8: export default async function getUnbondedTransferRoots (chain: string, token: string, destinationChain: string, startTime?: number, endTime?: number): Promise<any> {\n    9    const destinationChainId: number = chainSlugToId(destinationChain)\n   10  \n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getUnbondedTransfers.ts:\n   32      scrollZkTransfers,\n   33      baseTransfers\n   34:   ] = await Promise.all([\n   35:     enabledChains.includes(Chain.Ethereum) ? fetchTransfers(Chain.Ethereum, startTime, endTime) : Promise.resolve([]),\n   36:     enabledChains.includes(Chain.Gnosis) ? fetchTransfers(Chain.Gnosis, startTime, endTime) : Promise.resolve([]),\n   37:     enabledChains.includes(Chain.Polygon) ? fetchTransfers(Chain.Polygon, startTime, endTime) : Promise.resolve([]),\n   38:     enabledChains.includes(Chain.Optimism) ? fetchTransfers(Chain.Optimism, startTime, endTime) : Promise.resolve([]),\n   39:     enabledChains.includes(Chain.Arbitrum) ? fetchTransfers(Chain.Arbitrum, startTime, endTime) : Promise.resolve([]),\n   40:     enabledChains.includes(Chain.Nova) ? fetchTransfers(Chain.Nova, startTime, endTime) : Promise.resolve([]),\n   41:     enabledChains.includes(Chain.ZkSync) ? fetchTransfers(Chain.ZkSync, startTime, endTime) : Promise.resolve([]),\n   42:     enabledChains.includes(Chain.ConsenSysZk) ? fetchTransfers(Chain.ConsenSysZk, startTime, endTime) : Promise.resolve([]),\n   43:     enabledChains.includes(Chain.ScrollZk) ? fetchTransfers(Chain.ScrollZk, startTime, endTime) : Promise.resolve([]),\n   44:     enabledChains.includes(Chain.Base) ? fetchTransfers(Chain.Base, startTime, endTime) : Promise.resolve([])\n   45    ])\n   46  \n   ..\n  221      novaBondedWithdrawals,\n  222      mainnetBondedWithdrawals\n  223:   ] = await Promise.all([\n  224:     enabledChains.includes(Chain.Gnosis) ? fetchBonds(Chain.Gnosis, transferIds) : Promise.resolve([]),\n  225:     enabledChains.includes(Chain.Polygon) ? fetchBonds(Chain.Polygon, transferIds) : Promise.resolve([]),\n  226:     enabledChains.includes(Chain.Optimism) ? fetchBonds(Chain.Optimism, transferIds) : Promise.resolve([]),\n  227:     enabledChains.includes(Chain.Arbitrum) ? fetchBonds(Chain.Arbitrum, transferIds) : Promise.resolve([]),\n  228:     enabledChains.includes(Chain.Nova) ? fetchBonds(Chain.Nova, transferIds) : Promise.resolve([]),\n  229:     enabledChains.includes(Chain.Ethereum) ? fetchBonds(Chain.Ethereum, transferIds) : Promise.resolve([])\n  230    ])\n  231  \n  ...\n  240      novaWithdrews,\n  241      mainnetWithdrews\n  242:   ] = await Promise.all([\n  243:     enabledChains.includes(Chain.Gnosis) ? fetchWithdrews(Chain.Gnosis, transferIds) : Promise.resolve([]),\n  244:     enabledChains.includes(Chain.Polygon) ? fetchWithdrews(Chain.Polygon, transferIds) : Promise.resolve([]),\n  245:     enabledChains.includes(Chain.Optimism) ? fetchWithdrews(Chain.Optimism, transferIds) : Promise.resolve([]),\n  246:     enabledChains.includes(Chain.Arbitrum) ? fetchWithdrews(Chain.Arbitrum, transferIds) : Promise.resolve([]),\n  247:     enabledChains.includes(Chain.Nova) ? fetchWithdrews(Chain.Nova, transferIds) : Promise.resolve([]),\n  248:     enabledChains.includes(Chain.Ethereum) ? fetchWithdrews(Chain.Ethereum, transferIds) : Promise.resolve([])\n  249    ])\n  250  \n  ...\n  258      arbitrumFromL1Completeds,\n  259      novaFromL1Completeds\n  260:   ] = await Promise.all([\n  261:     enabledChains.includes(Chain.Gnosis) ? fetchTransferFromL1Completeds(Chain.Gnosis, startTime, endTime) : Promise.resolve([]),\n  262:     enabledChains.includes(Chain.Polygon) ? fetchTransferFromL1Completeds(Chain.Polygon, startTime, endTime) : Promise.resolve([]),\n  263:     enabledChains.includes(Chain.Optimism) ? fetchTransferFromL1Completeds(Chain.Optimism, startTime, endTime) : Promise.resolve([]),\n  264:     enabledChains.includes(Chain.Arbitrum) ? fetchTransferFromL1Completeds(Chain.Arbitrum, startTime, endTime) : Promise.resolve([]),\n  265:     enabledChains.includes(Chain.Nova) ? fetchTransferFromL1Completeds(Chain.Nova, startTime, endTime) : Promise.resolve([])\n  266    ])\n  267  \n  ...\n  314    console.log('getTransfersData: mapping transfers to bonds')\n  315  \n  316:   await Promise.all(data.map((x: any) => {\n  317      const bonds = bondsMap[chainIdToSlug(x.destinationChain)]\n  318      if (bonds) {\n  ...\n  329    console.log('getTransfersData: mapping events to l1CompletedsMap')\n  330  \n  331:   await Promise.all(data.map((x: any) => {\n  332      const sourceChain = chainIdToSlug(x.sourceChain)\n  333      if (sourceChain !== Chain.Ethereum) {\n\n~/Sandbox/hop/packages/hop-node/src/utils/getBlockNumberFromDate.ts:\n    5  import { etherscanApiKeys, etherscanApiUrls } from 'src/config'\n    6  \n    7: export async function getBlockNumberFromDate (chain: string, timestamp: number): Promise<number> {\n    8    const useEtherscan = etherscanApiKeys[chain]\n    9    if (useEtherscan) {\n   ..\n   14  }\n   15  \n   16: async function getBlockNumberFromDateUsingEtherscan (chain: string, timestamp: number): Promise<number> {\n   17    const apiKey = etherscanApiKeys[chain]\n   18    if (!apiKey) {\n   ..\n   32  }\n   33  \n   34: async function getBlockNumberFromDateUsingLib (chain: string, timestamp: number): Promise<number> {\n   35    const provider = getRpcProvider(chain)\n   36    const blockDater = new BlockDater(provider)\n\n~/Sandbox/hop/packages/hop-node/src/utils/getNameservers.ts:\n    3  dns.setServers(['8.8.8.8'])\n    4  \n    5: export async function getNameservers (domain: string): Promise<string[]> {\n    6:   return new Promise((resolve, reject) => {\n    7      dns.resolveNs(domain, (err: any, res: string[]) => {\n    8        if (err) {\n\n~/Sandbox/hop/packages/hop-node/src/utils/promiseQueue.ts:\n    7  }\n    8  \n    9: export async function promiseQueue (items: any[], cb: any, options: Options) {\n   10:   return promiseQueueConcurrent(items, cb, options)\n   11  }\n   12  \n   13: async function promiseQueueChunk (items: any[], cb: any, options: Options) {\n   14    const { concurrency } = options\n   15    const allChunks = chunk(items, concurrency)\n   16    let i = 0\n   17    for (const chunks of allChunks) {\n   18:     await Promise.all(chunks.map(async (item) => {\n   19        i++\n   20        await cb(item, i)\n   ..\n   23  }\n   24  \n   25: async function promiseQueueConcurrent (items: any[], cb: any, options: Options) {\n   26    const { concurrency, timeoutMs: timeout } = options\n   27    const queue = new PQueue({ concurrency, timeout })\n\n~/Sandbox/hop/packages/hop-node/src/utils/promiseTimeout.ts:\n    1  class TimeoutError extends Error {}\n    2  \n    3: export async function promiseTimeout<T> (promise: Promise<T>, timeout: number): Promise<T> {\n    4:   return await new Promise(async (resolve, reject) => {\n    5      let timedout = false\n    6      const t = setTimeout(() => {\n    .\n    9      }, timeout)\n   10  \n   11:     // make it a promise if it's not one\n   12:     Promise.resolve(promise)\n   13        .then((result: any) => {\n   14          clearTimeout(t)\n\n~/Sandbox/hop/packages/hop-node/src/utils/rateLimitRetry.ts:\n    3  import { Notifier } from 'src/notifier'\n    4  import { hostname, rateLimitMaxRetries, rpcTimeoutSeconds } from 'src/config'\n    5: import { promiseTimeout } from 'src/utils/promiseTimeout'\n    6  \n    7  const _logger = new Logger('rateLimitRetry')\n    8  const notifier = new Notifier(`rateLimitRetry, host: ${hostname}`)\n    9  \n   10: export default function rateLimitRetry<FN extends (...args: any[]) => Promise<any>> (fn: FN): (...args: Parameters<FN>) => Promise<Awaited<ReturnType<FN>>> {\n   11    const id = `${process.hrtime.bigint()}`\n   12    const logger = _logger.create({ id })\n   13:   return async (...args: Parameters<FN>): Promise<Awaited<ReturnType<FN>>> => {\n   14      let retries = 0\n   15:     const retry = () => promiseTimeout(fn(...args), rpcTimeoutSeconds * 1000) // eslint-disable-line\n   16      while (true) {\n   17        try {\n\n~/Sandbox/hop/packages/hop-node/src/utils/wait.ts:\n    1  async function wait (t: number) {\n    2:   return await new Promise(resolve => setTimeout(() => resolve(null), t))\n    3  }\n    4  \n\n~/Sandbox/hop/packages/hop-node/src/vault/AaveVault.ts:\n  106    }\n  107  \n  108:   async getBalance (account?: string): Promise<BigNumber> {\n  109      if (!account) {\n  110        account = await this.signer.getAddress()\n\n~/Sandbox/hop/packages/hop-node/src/vault/Vault.ts:\n   31    }\n   32  \n   33:   abstract getBalance (account?: string): Promise<BigNumber>\n   34:   abstract deposit (amount: BigNumber): Promise<any>\n   35:   abstract withdraw (amount: BigNumber): Promise<any>\n   36    abstract formatUnits (amount: BigNumber): number\n   37    abstract parseUnits (amount: string | number): BigNumber\n\n~/Sandbox/hop/packages/hop-node/src/vault/YearnVault.ts:\n   83    }\n   84  \n   85:   async getBalance (account?: string): Promise<BigNumber> {\n   86      if (!account) {\n   87        account = await this.signer.getAddress()\n\n~/Sandbox/hop/packages/hop-node/src/watchers/ArbitrumBridgeWatcher.ts:\n   41    async relayXDomainMessage (\n   42      txHash: string\n   43:   ): Promise<providers.TransactionResponse> {\n   44      const txReceipt = await this.l2Wallet.provider.getTransactionReceipt(txHash)\n   45      const initiatingTxnReceipt = new L2TransactionReceipt(\n   ..\n   89    }\n   90  \n   91:   async redeemArbitrumTransaction (l1TxHash: string, messageIndex: number = 0): Promise<providers.TransactionResponse> {\n   92      const status = await this.getMessageStatus(l1TxHash, messageIndex)\n   93      if (status !== L1ToL2MessageStatus.FUNDS_DEPOSITED_ON_L2) {\n   ..\n  100    }\n  101  \n  102:   async getL1ToL2Message (l1TxHash: string, messageIndex: number = 0, useDefaultProvider: boolean = false): Promise<IL1ToL2MessageWriter> {\n  103      const l1ToL2Messages = await this.getL1ToL2Messages(l1TxHash, useDefaultProvider)\n  104      return l1ToL2Messages[messageIndex]\n  105    }\n  106  \n  107:   async getL1ToL2Messages (l1TxHash: string, useDefaultProvider: boolean = false): Promise<IL1ToL2MessageWriter[]> {\n  108      const l2Wallet = useDefaultProvider ? this.l2Wallet.connect(this.defaultL2Provider) : this.l2Wallet\n  109      const txReceipt = await this.l1Wallet.provider.getTransactionReceipt(l1TxHash)\n  ...\n  112    }\n  113  \n  114:   async isTransactionRedeemed (l1TxHash: string, messageIndex: number = 0): Promise<boolean> {\n  115      const status = await this.getMessageStatus(l1TxHash, messageIndex)\n  116      return status === L1ToL2MessageStatus.REDEEMED\n  117    }\n  118  \n  119:   async getMessageStatus (l1TxHash: string, messageIndex: number = 0): Promise<L1ToL2MessageStatus> {\n  120      // We cannot use our provider here because the SDK will rateLimitRetry and exponentially backoff as it retries an on-chain call\n  121      const useDefaultProvider = true\n\n~/Sandbox/hop/packages/hop-node/src/watchers/AvailableLiquidityWatcher.ts:\n  191    }\n  192  \n  193:   async getBonderAddress (destinationChain: string): Promise<string> {\n  194      const routeBonder = getConfigBonderForRoute(this.tokenSymbol, this.chainSlug, destinationChain)\n  195      return (routeBonder || await this.bridge.getBonderAddress())?.toLowerCase()\n\n~/Sandbox/hop/packages/hop-node/src/watchers/BondTransferRootWatcher.ts:\n   46      )\n   47  \n   48:     const promises: Array<Promise<any>> = []\n   49      for (const dbTransferRoot of dbTransferRoots) {\n   50        const {\n   ..\n   70        }\n   71  \n   72:       promises.push(this.checkTransfersCommitted(\n   73          transferRootId,\n   74          transferRootHash,\n   ..\n   81      }\n   82  \n   83:     await Promise.all(promises)\n   84    }\n   85  \n\n~/Sandbox/hop/packages/hop-node/src/watchers/BondWithdrawalWatcher.ts:\n   14  import { bondWithdrawalBatchSize, config as globalConfig, zeroAvailableCreditTest } from 'src/config'\n   15  import { isExecutionError } from 'src/utils/isExecutionError'\n   16: import { promiseQueue } from 'src/utils/promiseQueue'\n   17  \n   18  type Config = {\n   ..\n   64      )\n   65  \n   66:     await promiseQueue(batchedDbTransfers, async (dbTransfer: Transfer, i: number) => {\n   67        const {\n   68          transferId,\n\n~/Sandbox/hop/packages/hop-node/src/watchers/ConfirmRootsWatcher.ts:\n  141    async pollHandler () {\n  142      try {\n  143:       await Promise.all([\n  144          this.checkExitableTransferRootsFromDb(),\n  145          this.checkConfirmableTransferRootsFromDb()\n  ...\n  248    }\n  249  \n  250:   async confirmRootsViaWrapper (rootData: ConfirmRootsData[]): Promise<void> {\n  251      const rootHashes: string[] = []\n  252      const destinationChainIds: number[] = []\n\n~/Sandbox/hop/packages/hop-node/src/watchers/ConsenSysZkBridgeWatcher.ts:\n   27    }\n   28  \n   29:   async relayXDomainMessage (commitTxHash: string): Promise<void> {\n   30      // noop\n   31    }\n\n~/Sandbox/hop/packages/hop-node/src/watchers/GnosisBridgeWatcher.ts:\n   74    }\n   75  \n   76:   async relayXDomainMessage (commitTxHash: string): Promise<providers.TransactionResponse> {\n   77      const token: string = this.tokenSymbol\n   78      const l1Amb = getL1Amb(token)\n\n~/Sandbox/hop/packages/hop-node/src/watchers/HealthCheckWatcher.ts:\n  319    }\n  320  \n  321:   private async getResult (): Promise<Result> {\n  322      const [\n  323        lowBonderBalances,\n  ...\n  334        dnsNameserversChanged,\n  335        lowOsResources\n  336:     ] = await Promise.all([\n  337:       this.enabledChecks.lowBonderBalances ? this.getLowBonderBalances() : Promise.resolve([]),\n  338:       this.enabledChecks.lowAvailableLiquidityBonders ? this.getLowAvailableLiquidityBonders() : Promise.resolve([]),\n  339:       this.enabledChecks.unbondedTransfers ? this.getUnbondedTransfers() : Promise.resolve([]),\n  340:       this.enabledChecks.unbondedTransferRoots ? this.getUnbondedTransferRoots() : Promise.resolve([]),\n  341:       this.enabledChecks.incompleteSettlements ? this.getIncompleteSettlements() : Promise.resolve([]),\n  342:       this.enabledChecks.challengedTransferRoots ? this.getChallengedTransferRoots() : Promise.resolve([]),\n  343:       this.enabledChecks.unsyncedSubgraphs ? this.getUnsyncedSubgraphs() : Promise.resolve([]),\n  344:       this.enabledChecks.missedEvents ? this.getMissedEvents() : Promise.resolve([]),\n  345:       this.enabledChecks.invalidBondWithdrawals ? this.getInvalidBondWithdrawals() : Promise.resolve([]),\n  346:       this.enabledChecks.unrelayedTransfers ? this.getUnrelayedTransfers() : Promise.resolve([]),\n  347:       this.enabledChecks.unsetTransferRoots ? this.getUnsetTransferRoots() : Promise.resolve([]),\n  348:       this.enabledChecks.dnsNameserversChanged ? this.getDnsServersChanged() : Promise.resolve([]),\n  349:       this.enabledChecks.lowOsResources ? this.getLowOsResources() : Promise.resolve([])\n  350      ])\n  351  \n  ...\n  517    }\n  518  \n  519:   private async getLowBonderBalances (): Promise<LowBonderBalance[]> {\n  520      // TODO: Add Arbitrum and Optimism\n  521      const chainProviders: Record<string, providers.Provider> = {\n  ...\n  542      for (const bonder of bonders) {\n  543        const bridge = bonderBridges[bonder]\n  544:       const [ethBalance, xdaiBalance, maticBalance] = await Promise.all([\n  545          chainProviders[Chain.Ethereum].getBalance(bonder),\n  546          chainProviders[Chain.Gnosis].getBalance(bonder),\n  ...\n  588    }\n  589  \n  590:   private async getLowAvailableLiquidityBonders (): Promise<LowAvailableLiquidityBonder[]> {\n  591      const url = 'https://assets.hop.exchange/mainnet/v1-available-liquidity.json'\n  592      const res = await fetch(url)\n  ...\n  641    }\n  642  \n  643:   private async getUnbondedTransfers (): Promise<UnbondedTransfer[]> {\n  644      this.logger.debug('checking for unbonded transfers')\n  645  \n  ...\n  715    }\n  716  \n  717:   private async getUnbondedTransferRoots (): Promise<UnbondedTransferRoot[]> {\n  718      const now = DateTime.now().toUTC()\n  719      const sourceChains = [Chain.Optimism, Chain.Arbitrum, Chain.Nova]\n  ...\n  752    }\n  753  \n  754:   private async getIncompleteSettlements (): Promise<IncompleteSettlement[]> {\n  755      this.logger.debug('fetching incomplete settlements')\n  756      const timestamp = DateTime.now().toUTC().toSeconds()\n  ...\n  789    }\n  790  \n  791:   private async getChallengedTransferRoots (): Promise<ChallengedTransferRoot[]> {\n  792      // This function does not use TheGraph, as that adds an additional layer/failure point.\n  793  \n  ...\n  833    }\n  834  \n  835:   async getUnsyncedSubgraphs (): Promise<UnsyncedSubgraph[]> {\n  836      const now = DateTime.now().toUTC()\n  837      const outOfSyncTimestamp = Math.floor(now.minus({ hours: this.healthCheckFinalityTimeHours }).toSeconds())\n  ...\n  862    }\n  863  \n  864:   async getMissedEvents (): Promise<MissedEvent[]> {\n  865      const missedEvents: MissedEvent[] = []\n  866      const sourceChains = [Chain.Polygon, Chain.Gnosis, Chain.Optimism, Chain.Arbitrum, Chain.Nova]\n  ...\n  873        endDate: endDate.toISO()\n  874      }\n  875:     const promises: Array<Promise<null>> = []\n  876      for (const sourceChain of sourceChains) {\n  877        for (const token of tokens) {\n  ...\n  886            continue\n  887          }\n  888:         promises.push(new Promise(async (resolve, reject) => {\n  889            try {\n  890              const db = getDbSet(token)\n  ...\n  907      }\n  908  \n  909:     await Promise.all(promises)\n  910      this.logger.debug('done fetching all getTransferIds')\n  911  \n  ...\n  913    }\n  914  \n  915:   async getInvalidBondWithdrawals (): Promise<InvalidBondWithdrawal[]> {\n  916      const now = DateTime.now().toUTC()\n  917      const endDate = now.minus({ hours: this.healthCheckFinalityTimeHours * 2 })\n  ...\n  930    }\n  931  \n  932:   async getUnrelayedTransfers (): Promise<UnrelayedTransfer[]> {\n  933      const now = DateTime.now().toUTC()\n  934      const endDate = now.minus({ hours: this.healthCheckFinalityTimeHours })\n  ...\n  990    }\n  991  \n  992:   async getUnsetTransferRoots (): Promise<UnsetTransferRoot[]> {\n  993      const now = DateTime.now().toUTC()\n  994      const endDate = now.minus({ hours: this.healthCheckFinalityTimeHours })\n  ...\n 1005    }\n 1006  \n 1007:   async getDnsServersChanged (): Promise<DnsNameserversChanged[]> {\n 1008      try {\n 1009        if (expectedNameservers.length === 0) {\n ....\n 1040    }\n 1041  \n 1042:   async getLowOsResources (): Promise<LowOsResource[]> {\n 1043      const lowOsResources: LowOsResource[] = []\n 1044      const {\n\n~/Sandbox/hop/packages/hop-node/src/watchers/IncompleteSettlementsWatcher.ts:\n   16  import { getEnabledTokens } from 'src/config/config'\n   17  import { mainnet as mainnetAddresses } from '@hop-protocol/core/addresses'\n   18: import { promiseQueue } from 'src/utils/promiseQueue'\n   19  \n   20  type Options = {\n   ..\n   92    }\n   93  \n   94:   private async tilReady (): Promise<any> {\n   95      if (this.ready) {\n   96        return true\n   ..\n  111  \n  112      for (const chain of this.chains) {\n  113:       const promises: Array<Promise<any>> = []\n  114        for (const token of this.tokens) {\n  115          this.logger.debug(`${chain} ${token} reading events`)\n  ...\n  125          }\n  126          if (chain === 'ethereum') {\n  127:           promises.push(this.setTransferRootConfirmeds(chain, token))\n  128          }\n  129          if (chain !== 'ethereum') {\n  130:           promises.push(this.setTransferCommittedEvents(chain, token))\n  131          }\n  132:         promises.push(this.setMultipleWithdrawalsSettleds(chain, token))\n  133:         promises.push(this.setWithdrawalBondSettleds(chain, token))\n  134:         promises.push(this.setWithdrews(chain, token))\n  135:         promises.push(this.setTransferRootSets(chain, token))\n  136          this.logger.debug(`${chain} ${token} done reading events`)\n  137        }\n  138:       await Promise.all(promises)\n  139      }\n  140  \n  ...\n  143  \n  144    private async setStartBlockNumbers () {\n  145:     await Promise.all(this.chains.map(async (chain: string) => {\n  146        this.logger.debug(`${chain} - getting start and end block numbers`)\n  147        const date = DateTime.fromMillis(Date.now()).minus({ days: this.days + this.offsetDays })\n  ...\n  185  \n  186      const concurrency = 20\n  187:     await promiseQueue(logs, async (log: any, i: number) => {\n  188        const { rootHash, totalAmount, destinationChainId } = log.args\n  189        const destinationChain = chainIdToSlug(destinationChainId)\n  ...\n  207  \n  208      const concurrency = 20\n  209:     await promiseQueue(logs, async (log: any, i: number) => {\n  210        await this.setRootTransferIds(chain, token, log)\n  211      }, { concurrency })\n  ...\n  304    }\n  305  \n  306:   async getDiffResults (): Promise<any> {\n  307      await this.init()\n  308      await this.tilReady()\n  ...\n  381  \n  382      const concurrency = 10\n  383:     await promiseQueue(rootHashes, async (rootHash: string, i: number) => {\n  384        this.logger.debug(`rootHashes processing item ${i + 1}/${rootHashes.length}`)\n  385        const { sourceChain, destinationChain, token } = this.rootHashMeta[rootHash]\n  ...\n  480      const unsettledTransferBonders = new Set()\n  481      const concurrency = 20\n  482:     await promiseQueue(transferIds, async (transferId: string, i: number) => {\n  483        this.logger.debug(`rootHash transferIds processing item ${i + 1}/${transferIds.length}`)\n  484        const bondWithdrawalEvent = await getBondedWithdrawal(destinationChain, token, transferId)\n\n~/Sandbox/hop/packages/hop-node/src/watchers/OptimismBridgeWatcher.ts:\n   53    async relayXDomainMessage (\n   54      txHash: string\n   55:   ): Promise<providers.TransactionResponse | undefined> {\n   56      let messageStatus = await this.csm.getMessageStatus(txHash)\n   57      if (messageStatus === MessageStatus.STATE_ROOT_NOT_PUBLISHED) {\n\n~/Sandbox/hop/packages/hop-node/src/watchers/OsWatcher.ts:\n   33  \n   34    async poll () {\n   35:     await Promise.all([\n   36        this.pollStats(),\n   37        this.pollHeapdump()\n   ..\n   65    }\n   66  \n   67:   static async getDiskUsage (): Promise<any> {\n   68:     return new Promise((resolve) => {\n   69        checkDiskSpace('/').then((diskSpace) => {\n   70          const totalSize = diskSpace?.size\n   ..\n  100    }\n  101  \n  102:   static async getCpuMemoryUsage (): Promise<any> {\n  103:     return new Promise((resolve, reject) => {\n  104        pidusage(process.pid, (err: Error, stats: any) => {\n  105          if (err) {\n\n~/Sandbox/hop/packages/hop-node/src/watchers/PolygonBridgeWatcher.ts:\n   88    }\n   89  \n   90:   protected async tilReady (): Promise<boolean> {\n   91      if (this.ready) {\n   92        return true\n   ..\n  104    }\n  105  \n  106:   async relayXDomainMessage (txHash: string): Promise<providers.TransactionResponse> {\n  107      await this.tilReady()\n  108  \n  109      const tx = await this.maticClient.erc20(constants.AddressZero, true).withdrawExitFaster(txHash)\n  110:     return tx.promise\n  111    }\n  112  \n\n~/Sandbox/hop/packages/hop-node/src/watchers/RelayWatcher.ts:\n   12  import { getEnabledNetworks, relayTransactionBatchSize } from 'src/config'\n   13  import { isExecutionError } from 'src/utils/isExecutionError'\n   14: import { promiseQueue } from 'src/utils/promiseQueue'\n   15  import { providers } from 'ethers'\n   16  \n   ..\n   61  \n   62    async pollHandler () {\n   63:     await Promise.all([\n   64        this.checkTransferSentToL2FromDb(),\n   65        this.checkRelayableTransferRootsFromDb()\n   ..\n   86      )\n   87  \n   88:     await promiseQueue(batchedDbTransfers, async (dbTransfer: Transfer, i: number) => {\n   89        const {\n   90          transferId\n   ..\n  119      )\n  120  \n  121:     const promises: Array<Promise<any>> = []\n  122      for (const dbTransferRoot of dbTransferRoots) {\n  123        const { transferRootId } = dbTransferRoot\n  124:       promises.push(this.checkRelayableTransferRoots(transferRootId))\n  125      }\n  126  \n  127:     await Promise.all(promises)\n  128      this.logger.debug('checkRelayableTransferRootsFromDb completed')\n  129    }\n  ...\n  345    }\n  346  \n  347:   async sendTransferRelayTx (params: any): Promise<providers.TransactionResponse> {\n  348      const {\n  349        transferId,\n  ...\n  361    }\n  362  \n  363:   async sendTransferRootRelayTx (destinationChainId: number, transferRootId: string, txHash: string): Promise<providers.TransactionResponse> {\n  364      const logger = this.logger.create({ root: transferRootId })\n  365      logger.debug(\n  ...\n  369    }\n  370  \n  371:   async sendRelayTx (destinationChainId: number, txHash: string, messageIndex: number = 0): Promise<providers.TransactionResponse> {\n  372      return await this.relayWatchers[destinationChainId].redeemArbitrumTransaction(txHash, messageIndex)\n  373    }\n  374  \n  375:   async getMessageIndex (transferId: string, transferSentTxHash: string, transferSentTimestamp: number): Promise<number> {\n  376      // We need to deterministically order all the messages in an L1 tx, even if they have already been relayed\n  377      type TransferId = string\n\n~/Sandbox/hop/packages/hop-node/src/watchers/ScrollZkBridgeWatcher.ts:\n   26    }\n   27  \n   28:   async relayXDomainMessage (commitTxHash: string): Promise<void> {\n   29      // noop\n   30    }\n\n~/Sandbox/hop/packages/hop-node/src/watchers/SettleBondedWithdrawalWatcher.ts:\n   36      const dbTransferRoots = await this.db.transferRoots.getUnsettledTransferRoots(await this.getFilterRoute())\n   37  \n   38:     const promises: Array<Promise<any>> = []\n   39      for (const dbTransferRoot of dbTransferRoots) {\n   40        const { transferRootId, transferIds } = dbTransferRoot\n   ..\n   95        for (const bonder of bonderSet.values()) {\n   96          // check settle-able transfer root\n   97:         promises.push(\n   98            this.checkTransferRootId(transferRootId, bonder)\n   99              .catch((err: Error) => {\n  ...\n  104      }\n  105  \n  106:     if (promises.length === 0) {\n  107        this.logger.debug('no unsettled db transfer roots to check')\n  108        return\n  ...\n  110  \n  111      this.logger.info(\n  112:       `checking ${promises.length} unsettled db transfer roots`\n  113      )\n  114  \n  115:     await Promise.all(promises)\n  116    }\n  117  \n\n~/Sandbox/hop/packages/hop-node/src/watchers/SyncWatcher.ts:\n   33  import { getSortedTransferIds } from 'src/utils/getSortedTransferIds'\n   34  import { config as globalConfig, minEthBonderFeeBn, oruChains } from 'src/config'\n   35: import { promiseQueue } from 'src/utils/promiseQueue'\n   36  \n   37  type Config = {\n   ..\n   93      this.started = true\n   94      try {\n   95:       await Promise.all([\n   96          this.pollGasCost(),\n   97          this.pollSync()\n   ..\n  143        this.logger.info(`transfer roots incomplete items: ${incompleteTransferRoots.length}`)\n  144        if (incompleteTransferRoots.length) {\n  145:         await promiseQueue(incompleteTransferRoots, async (transferRoot: TransferRoot, i: number) => {\n  146            const { transferRootId } = transferRoot\n  147            const logger = this.logger.create({ id: transferRootId })\n  ...\n  169        this.logger.info(`transfers incomplete items: ${incompleteTransfers.length}`)\n  170        if (incompleteTransfers.length) {\n  171:         await promiseQueue(incompleteTransfers, async (transfer: Transfer, i: number) => {\n  172            const { transferId } = transfer\n  173            const logger = this.logger.create({ id: transferId })\n  ...\n  217    }\n  218  \n  219:   async syncHandler (): Promise<any> {\n  220:     const promises: Array<Promise<any>> = []\n  221      let startBlockNumber = this.bridge.bridgeDeployedBlockNumber\n  222      let useCacheKey = true\n  ...\n  241      }\n  242  \n  243:     const transferRootInitialEventPromises: Array<Promise<any>> = []\n  244      if (this.isL1) {\n  245        const l1Bridge = this.bridge as L1Bridge\n  246:       transferRootInitialEventPromises.push(\n  247          l1Bridge.mapTransferRootBondedEvents(\n  248            async (event: TransferRootBondedEvent) => {\n  ...\n  253        )\n  254  \n  255:       promises.push(\n  256          l1Bridge.mapTransferSentToL2Events(\n  257            async (event: TransferSentToL2Event) => {\n  ...\n  262        )\n  263  \n  264:       promises.push(\n  265          l1Bridge.mapTransferRootConfirmedEvents(\n  266            async (event: TransferRootConfirmedEvent) => {\n  ...\n  271        )\n  272  \n  273:       promises.push(\n  274          l1Bridge.mapTransferBondChallengedEvents(\n  275            async (event: TransferBondChallengedEvent) => {\n  ...\n  283      if (!this.isL1) {\n  284        const l2Bridge = this.bridge as L2Bridge\n  285:       promises.push(\n  286          l2Bridge.mapTransferSentEvents(\n  287            async (event: TransferSentEvent) => {\n  ...\n  292        )\n  293  \n  294:       transferRootInitialEventPromises.push(\n  295          l2Bridge.mapTransfersCommittedEvents(\n  296            async (event: TransfersCommittedEvent) => {\n  297:             return await Promise.all([\n  298                this.handleTransfersCommittedEvent(event)\n  299              ])\n  ...\n  304      }\n  305  \n  306:     const transferSpentPromises: Array<Promise<any>> = []\n  307:     transferSpentPromises.push(\n  308        this.bridge.mapWithdrawalBondedEvents(\n  309          async (event: WithdrawalBondedEvent) => {\n  ...\n  314      )\n  315  \n  316:     transferSpentPromises.push(\n  317        this.bridge.mapWithdrewEvents(\n  318          async (event: WithdrewEvent) => {\n  ...\n  323      )\n  324  \n  325:     promises.push(\n  326:       Promise.all(transferSpentPromises.concat(transferRootInitialEventPromises))\n  327          .then(async () => {\n  328:           await Promise.all([\n  329              // This must be executed after the Withdrew and WithdrawalBonded event handlers\n  330              // on initial sync since it relies on data from those handlers.\n  ...\n  345      )\n  346  \n  347:     promises.push(\n  348        this.bridge.mapTransferRootSetEvents(\n  349          async (event: TransferRootSetEvent) => {\n  ...\n  356      // these must come after db is done syncing,\n  357      // and syncAvailableCredit must be last\n  358:     await Promise.all(promises)\n  359        .then(async () => await this.availableLiquidityWatcher.syncBonderCredit())\n  360    }\n  ...\n  694      logger.debug(`transferIds count: ${transferIds.length}`)\n  695      const dbTransfers: Transfer[] = []\n  696:     await Promise.all(transferIds.map(async transferId => {\n  697        const dbTransfer = await this.db.transfers.getByTransferId(transferId)\n  698        if (!dbTransfer) {\n  ...\n 1102      })\n 1103  \n 1104:     await Promise.all(_transferIds.map(async (transferId: string) => {\n 1105        await this.db.transfers.update(transferId, {\n 1106          transferRootHash,\n ....\n 1341      )\n 1342  \n 1343:     await Promise.all(transferIds.map(async (transferId: string) => {\n 1344        await this.db.transfers.update(transferId, {\n 1345          transferRootHash,\n ....\n 1550  \n 1551          logger.debug('pollGasCost estimate. estimates complete')\n 1552:         await Promise.all(estimates.map(async ({ gasLimit, data, to, transactionType }) => {\n 1553            const { gasCost, gasCostInToken, gasPrice, tokenPriceUsd, nativeTokenPriceUsd } = await this.bridge.getGasCostEstimation(\n 1554              this.chainSlug,\n\n~/Sandbox/hop/packages/hop-node/src/watchers/ZkSyncBridgeWatcher.ts:\n  100    }\n  101  \n  102:   private async isReadyToExit (commitTxHash: string, transferRootId: string): Promise<boolean> {\n  103      const { message, messageHash } = await this.getEncodedMessage(transferRootId)\n  104  \n  ...\n  241    }\n  242  \n  243:   public async relayXDomainMessage (commitTxHash: string, transferRootId: string): Promise<providers.TransactionResponse> {\n  244      if (!commitTxHash) {\n  245        throw new Error('expected commitTxHash')\n\n~/Sandbox/hop/packages/hop-node/src/watchers/classes/BaseWatcher.ts:\n  157    }\n  158  \n  159:   async stop (): Promise<void> {\n  160      this.bridge.removeAllListeners()\n  161      this.started = false\n  ...\n  224    }\n  225  \n  226:   async getFilterRoute (): Promise<any> {\n  227      const sourceChainId = await this.getFilterSourceChainId()\n  228      const destinationChainIds = await this.getFilterDestinationChainIds()\n  ...\n  328      transferId: string,\n  329      transactionType: GasCostTransactionType\n  330:   ): Promise<boolean> {\n  331      const logger = this.logger.create({ id: transferId })\n  332      const dbTransfer = await this.db.transfers.getByTransferId(transferId)\n\n~/Sandbox/hop/packages/hop-node/src/watchers/classes/Bridge.ts:\n   74    }\n   75  \n   76:   async getBonderAddress (): Promise<string> {\n   77      const address = await (this.bridgeContract as Contract).signer.getAddress()\n   78      if (!address) {\n   ..\n   82    }\n   83  \n   84:   isBonder = async (): Promise<boolean> => {\n   85      const bonder = await this.getBonderAddress()\n   86      return await this.bridgeContract.getIsBonder(bonder)\n   87    }\n   88  \n   89:   getCredit = async (bonder?: string): Promise<BigNumber> => {\n   90      if (!bonder) {\n   91        bonder = await this.getBonderAddress()\n   ..\n   95    }\n   96  \n   97:   getDebit = async (bonder?: string): Promise<BigNumber> => {\n   98      if (!bonder) {\n   99        bonder = await this.getBonderAddress()\n  ...\n  105    }\n  106  \n  107:   getRawDebit = async (): Promise<BigNumber> => {\n  108      const bonder = await this.getBonderAddress()\n  109      const debit = await this.bridgeContract.getRawDebit(bonder)\n  ...\n  111    }\n  112  \n  113:   async getBaseAvailableCredit (bonder?: string): Promise<BigNumber> {\n  114:     const [credit, debit] = await Promise.all([\n  115        this.getCredit(bonder),\n  116        this.getDebit(bonder)\n  ...\n  124    }\n  125  \n  126:   async getBondedWithdrawalAmount (transferId: string): Promise<BigNumber> {\n  127      const bonderAddress = await this.getBonderAddress()\n  128      return await this.getBondedWithdrawalAmountByBonder(bonderAddress, transferId)\n  ...\n  132      bonder: string,\n  133      transferId: string\n  134:   ): Promise<BigNumber> => {\n  135      const bondedBn = await this.bridgeContract.getBondedWithdrawalAmount(\n  136        bonder,\n  ...\n  144      startBlockNumber?: number,\n  145      endBlockNumber?: number\n  146:   ): Promise<number> {\n  147      const event = await this.getBondedWithdrawalEvent(\n  148        transferId,\n  ...\n  160      startBlockNumber?: number,\n  161      endBlockNumber?: number\n  162:   ): Promise<WithdrawalBondedEvent | undefined> {\n  163      let match: WithdrawalBondedEvent | undefined\n  164      await this.eventsBatch(\n  ...\n  185      startBlockNumber?: number,\n  186      endBlockNumber?: number\n  187:   ): Promise<WithdrewEvent | undefined> {\n  188      let match: WithdrewEvent | undefined\n  189      await this.eventsBatch(\n  ...\n  206    }\n  207  \n  208:   isTransferIdSpent = async (transferId: string): Promise<boolean> => {\n  209      return await this.bridgeContract.isTransferIdSpent(transferId)\n  210    }\n  ...\n  395  \n  396    // get the chain ids of all bridged L2s and L1\n  397:   async getChainIds (): Promise<number[]> {\n  398      const chainIds: number[] = []\n  399      for (const key in globalConfig.networks) {\n  ...\n  404    }\n  405  \n  406:   stake = async (amount: BigNumber): Promise<providers.TransactionResponse> => {\n  407      const bonder = await this.getBonderAddress()\n  408      const txOverrides = await this.txOverrides()\n  ...\n  423    }\n  424  \n  425:   unstake = async (amount: BigNumber): Promise<providers.TransactionResponse> => {\n  426      const tx = await this.bridgeContract.unstake(\n  427        amount,\n  ...\n  436      transferNonce: string,\n  437      bonderFee: BigNumber\n  438:   ): Promise<providers.TransactionResponse> => {\n  439      const txOverrides = await this.txOverrides()\n  440  \n  ...\n  462      transferIds: string[],\n  463      amount: BigNumber\n  464:   ): Promise<providers.TransactionResponse> => {\n  465      const tx = await this.bridgeContract.settleBondedWithdrawals(\n  466        bonder,\n  ...\n  485      siblings: string[],\n  486      totalLeaves: number\n  487:   ): Promise<providers.TransactionResponse> => {\n  488      const tx = await this.bridgeContract.withdraw(\n  489        recipient,\n  ...\n  504    }\n  505  \n  506:   async getEthBalance (): Promise<BigNumber> {\n  507      const bonder = await this.getBonderAddress()\n  508      if (!bonder) {\n  ...\n  532  \n  533    protected async mapEventsBatch<E extends Event, R> (\n  534:     getEventsMethod: (start: number, end: number) => Promise<E[]>,\n  535      cb: EventCb<E, R>,\n  536      options?: Partial<EventsBatchOptions>\n  537:   ): Promise<R[]> {\n  538      let i = 0\n  539:     const promises: R[] = []\n  540      await this.eventsBatch(async (start: number, end: number) => {\n  541        let events = await getEventsMethod(start, end)\n  542        events = events.reverse()\n  543        for (const event of events) {\n  544:         promises.push(cb(event, i))\n  545        }\n  546        i++\n  547      }, options)\n  548:     return await Promise.all(promises)\n  549    }\n  550  \n  551    public async eventsBatch (\n  552:     cb: (start?: number, end?: number, i?: number) => Promise<boolean | undefined> | Promise<void>,\n  553      options: Partial<EventsBatchOptions> = {}\n  554    ) {\n  ...\n  861    }\n  862  \n  863:   async isTransferRootSet (transferRootHash: string, totalAmount: BigNumber): Promise<boolean> {\n  864      const transferRootStruct = await this.getTransferRoot(transferRootHash, totalAmount)\n  865      if (!transferRootStruct) {\n\n~/Sandbox/hop/packages/hop-node/src/watchers/classes/ContractBase.ts:\n   32    }\n   33  \n   34:   getChainId = async (): Promise<number> => {\n   35      if (this.chainId) {\n   36        return this.chainId\n   ..\n   58    }\n   59  \n   60:   getTransaction = async (txHash: string): Promise<Transaction> => {\n   61      if (!txHash) {\n   62        throw new Error('tx hash is required')\n   ..\n   67    getTransactionReceipt = async (\n   68      txHash: string\n   69:   ): Promise<providers.TransactionReceipt> => {\n   70      return await this.contract.provider.getTransactionReceipt(txHash)\n   71    }\n   72  \n   73:   getBlockNumber = async (): Promise<number> => {\n   74      return await this.contract.provider.getBlockNumber()\n   75    }\n   76  \n   77:   getFinalizedBlockNumber = async (): Promise<number> => {\n   78      // TODO: Use this.contract.provider when ethers.js is updated\n   79      const provider = getRpcProvider(this.chainSlug)!\n   ..\n   82    }\n   83  \n   84:   getSafeBlockNumber = async (): Promise<number> => {\n   85      // TODO: Use this.contract.provider when ethers.js is updated\n   86      const provider = getRpcProvider(this.chainSlug)!\n   ..\n   89    }\n   90  \n   91:   getTransactionBlockNumber = async (txHash: string): Promise<number> => {\n   92      const tx = await this.contract.provider.getTransaction(txHash)\n   93      if (!tx) {\n   ..\n   99    getBlockTimestamp = async (\n  100      blockNumber: number | string = 'latest'\n  101:   ): Promise<number> => {\n  102      const block = await this.contract.provider.getBlock(blockNumber)\n  103      if (!block) {\n  ...\n  109    async getTransactionTimestamp (\n  110      txHash: string\n  111:   ): Promise<number> {\n  112      const blockNumber = await this.getTransactionBlockNumber(txHash)\n  113      return await this.getBlockTimestamp(blockNumber)\n  114    }\n  115  \n  116:   async getEventTimestamp (event: Event): Promise<number> {\n  117      const tx = await event.getBlock()\n  118      if (!tx) {\n  ...\n  128      address: string,\n  129      blockNumber: string | number = 'latest'\n  130:   ): Promise<string> => {\n  131      return await this.contract.provider.getCode(address, blockNumber)\n  132    }\n  ...\n  134    getBalance = async (\n  135      address: string\n  136:   ): Promise<BigNumber> => {\n  137      if (!address) {\n  138        throw new Error('expected address')\n  ...\n  141    }\n  142  \n  143:   protected getGasPrice = async (): Promise<BigNumber> => {\n  144      return await this.contract.provider.getGasPrice()\n  145    }\n  146  \n  147:   protected async getBumpedGasPrice (multiplier: number): Promise<BigNumber> {\n  148      const gasPrice = await this.getGasPrice()\n  149      return getBumpedGasPrice(gasPrice, multiplier)\n  ...\n  162    }\n  163  \n  164:   async txOverrides (): Promise<TxOverrides> {\n  165      const txOptions: TxOverrides = {}\n  166      if (globalConfig.isMainnet) {\n\n~/Sandbox/hop/packages/hop-node/src/watchers/classes/IBaseWatcher.ts:\n    1  export interface IBaseWatcher {\n    2:   pollCheck(): Promise<void>\n    3    prePollHandler(): boolean\n    4:   pollHandler(): Promise<void>\n    5:   postPollHandler(): Promise<void>\n    6  \n    7:   start(): Promise<void>\n    8:   stop(): Promise<void>\n    9  }\n   10  \n\n~/Sandbox/hop/packages/hop-node/src/watchers/classes/L1Bridge.ts:\n  110    }\n  111  \n  112:   async isTransferRootIdBonded (transferRootId: string): Promise<boolean> {\n  113      const transferBondStruct = await this.getTransferBond(transferRootId)\n  114      if (!transferBondStruct) {\n  ...\n  122      startBlockNumber: number,\n  123      endBlockNumber: number\n  124:   ): Promise<TransferRootConfirmedEvent[]> => {\n  125      return await this.l1BridgeContract.queryFilter(\n  126        this.l1BridgeContract.filters.TransferRootConfirmed(),\n  ...\n  137    }\n  138  \n  139:   async isTransferRootIdConfirmed (destChainId: number, transferRootId: string): Promise<boolean> {\n  140      const committedAt = await this.getTransferRootCommittedAt(destChainId, transferRootId)\n  141      return committedAt > 0\n  142    }\n  143  \n  144:   getTransferRootCommittedAt = async (destChainId: number, transferRootId: string): Promise<number> => {\n  145      let committedAt\n  146      if (this.tokenSymbol === 'USDC' && globalConfig.network === 'mainnet') {\n  ...\n  152    }\n  153  \n  154:   async getMinTransferRootBondDelaySeconds (): Promise<number> {\n  155      // MIN_TRANSFER_ROOT_BOND_DELAY\n  156      return 15 * 60\n  157    }\n  158  \n  159:   async l1CanonicalToken (): Promise<Token> {\n  160      const tokenAddress = await (this.l1BridgeContract as L1ERC20BridgeContract).l1CanonicalToken()\n  161      const tokenContract = new Contract(\n  ...\n  171      chainId: number,\n  172      totalAmount: BigNumber\n  173:   ): Promise<providers.TransactionResponse> => {\n  174      const tx = await this.l1BridgeContract.bondTransferRoot(\n  175        transferRootHash,\n  ...\n  186      totalAmount: BigNumber,\n  187      destinationChainId: number\n  188:   ): Promise<providers.TransactionResponse> => {\n  189      const tx = await this.l1BridgeContract.challengeTransferBond(\n  190        transferRootHash,\n  ...\n  201      totalAmount: BigNumber,\n  202      destinationChainId: number\n  203:   ): Promise<providers.TransactionResponse> => {\n  204      const tx = await this.l1BridgeContract.resolveChallenge(\n  205        transferRootHash,\n  ...\n  216      amount: BigNumber,\n  217      recipient: string\n  218:   ): Promise<providers.TransactionResponse> => {\n  219      const isSupportedChainId = await this.isSupportedChainId(destinationChainId)\n  220      if (!isSupportedChainId) {\n  ...\n  262      amount: BigNumber,\n  263      recipient: string\n  264:   ): Promise<providers.TransactionResponse> => {\n  265      const isSupportedChainId = await this.isSupportedChainId(destinationChainId)\n  266      if (!isSupportedChainId) {\n  ...\n  310    }\n  311  \n  312:   isSupportedChainId = async (chainId: number): Promise<boolean> => {\n  313      const address = await this.l1BridgeContract.crossDomainMessengerWrappers(\n  314        chainId\n  ...\n  317    }\n  318  \n  319:   getBondForTransferAmount = async (amount: BigNumber): Promise<BigNumber> => {\n  320      return await this.l1BridgeContract.getBondForTransferAmount(amount)\n  321    }\n  322  \n  323:   async decodeBondTransferRootCalldata (data: string): Promise<any> {\n  324      if (!data) {\n  325        throw new Error('data to decode is required')\n\n~/Sandbox/hop/packages/hop-node/src/watchers/classes/L1MessengerWrapper.ts:\n    3  \n    4  export default class L1MessengerWrapper extends ContractBase {\n    5:   confirmRoots = async (rootHashes: string[], destinationChainIds: number[], totalAmounts: BigNumber[], rootCommittedAts: number[]): Promise<void> => {\n    6      return this.contract.confirmRoots(\n    7        rootHashes,\n\n~/Sandbox/hop/packages/hop-node/src/watchers/classes/L2Amm.ts:\n    4  \n    5  export default class L2Amm extends ContractBase {\n    6:   calculateToHTokensAmount = async (amountIn: BigNumber): Promise<BigNumber> => {\n    7      const hTokenAmount = await this.contract.calculateSwap(\n    8        TokenIndex.CanonicalToken,\n    .\n   13    }\n   14  \n   15:   calculateFromHTokensAmount = async (amountIn: BigNumber): Promise<BigNumber> => {\n   16      const amountOut = await this.contract.calculateSwap(\n   17        TokenIndex.HopBridgeToken,\n   ..\n   22    }\n   23  \n   24:   swap = async (fromTokenIndex: number, toTokenIndex: number, amountIn: BigNumber, minAmountOut: BigNumber = BigNumber.from(0), deadline: BigNumber = this.defaultDeadline()): Promise<BigNumber> => {\n   25      const txOverrides = await this.txOverrides()\n   26      return this.contract.swap(\n\n~/Sandbox/hop/packages/hop-node/src/watchers/classes/L2AmmWrapper.ts:\n   37      token: string,\n   38      recipient: string\n   39:   ): Promise<providers.TransactionResponse> => {\n   40      const sdk = new Hop(globalConfig.network)\n   41      const bridge = sdk.bridge(token)\n\n~/Sandbox/hop/packages/hop-node/src/watchers/classes/L2Bridge.ts:\n   44    }\n   45  \n   46:   getL1Bridge = async (): Promise<L1Bridge> => {\n   47      const l1BridgeAddress = await this.l2BridgeContract.l1BridgeAddress()\n   48      if (!l1BridgeAddress) {\n   ..\n   52    }\n   53  \n   54:   canonicalToken = async (): Promise<Token> => {\n   55      const tokenAddress = await this.ammWrapper.contract.l2CanonicalToken()\n   56      const tokenContract = new Contract(\n   ..\n   62    }\n   63  \n   64:   hToken = async (): Promise<Token> => {\n   65      const tokenAddress = await this.l2BridgeContract.hToken()\n   66      const tokenContract = new Contract(\n   ..\n   75      startBlockNumber: number,\n   76      endBlockNumber: number\n   77:   ): Promise<TransferFromL1CompletedEvent[]> => {\n   78      return await this.bridgeContract.queryFilter(\n   79        this.l2BridgeContract.filters.TransferFromL1Completed(),\n   ..\n   86      startBlockNumber: number,\n   87      endBlockNumber: number\n   88:   ): Promise<TransfersCommittedEvent[]> => {\n   89      return await this.bridgeContract.queryFilter(\n   90        this.l2BridgeContract.filters.TransfersCommitted(),\n   ..\n  104      startBlockNumber: number,\n  105      endBlockNumber: number\n  106:   ): Promise<TransferSentEvent[]> => {\n  107      return await this.l2BridgeContract.queryFilter(\n  108        this.l2BridgeContract.filters.TransferSent(),\n  ...\n  119    }\n  120  \n  121:   async getTransferSentEvent (transferId: string): Promise<TransferSentEvent | null> {\n  122      let match: TransferSentEvent | undefined\n  123      await this.eventsBatch(async (start: number, end: number) => {\n  ...\n  147      amount: BigNumber,\n  148      recipient: string\n  149:   ): Promise<providers.TransactionResponse> => {\n  150      const isSupportedChainId = await this.isSupportedChainId(destinationChainId)\n  151      if (!isSupportedChainId) {\n  ...\n  180      amount: BigNumber,\n  181      recipient: string\n  182:   ): Promise<providers.TransactionResponse> => {\n  183      return await this.ammWrapper.swapAndSend(\n  184        destinationChainId,\n  ...\n  189    }\n  190  \n  191:   getChainId = async (): Promise<number> => {\n  192      if (this.chainId) {\n  193        return this.chainId\n  ...\n  219    }\n  220  \n  221:   async doPendingTransfersExist (chainId: number): Promise<boolean> {\n  222      try {\n  223        await this.getPendingTransferByIndex(chainId, 0)\n  ...\n  228    }\n  229  \n  230:   getPendingAmountForChainId = async (chainId: number): Promise<BigNumber> => {\n  231      const pendingAmount = await this.l2BridgeContract.pendingAmountForChainId(\n  232        chainId\n  ...\n  235    }\n  236  \n  237:   getMaxPendingTransfers = async (): Promise<number> => {\n  238      return Number(\n  239        (await this.l2BridgeContract.maxPendingTransfers()).toString()\n  ...\n  241    }\n  242  \n  243:   async getPendingTransfers (chainId: number): Promise<string[]> {\n  244      const pendingTransfers: string[] = []\n  245      const max = await this.getMaxPendingTransfers()\n  ...\n  256    }\n  257  \n  258:   async getTransfersCommittedEvent (transferRootHash: string): Promise<TransfersCommittedEvent | null> {\n  259      let match: TransfersCommittedEvent | undefined\n  260      await this.eventsBatch(async (start: number, end: number) => {\n  ...\n  283      destinationChainId: number,\n  284      contractAddress?: string\n  285:   ): Promise<providers.TransactionResponse> => {\n  286      let contract = this.l2BridgeContract\n  287      if (contractAddress) {\n  ...\n  309      amountOutMin: BigNumber,\n  310      deadline: BigNumber\n  311:   ): Promise<providers.TransactionResponse> => {\n  312      const txOverrides = await this.txOverrides()\n  313  \n  ...\n  333    }\n  334  \n  335:   isSupportedChainId = async (chainId: number): Promise<boolean> => {\n  336      return await this.l2BridgeContract.activeChainIds(\n  337        chainId\n  ...\n  339    }\n  340  \n  341:   async getOnChainMinBonderFeeAbsolute (): Promise<BigNumber> {\n  342      return this.l2BridgeContract.minBonderFeeAbsolute()\n  343    }\n\n~/Sandbox/hop/packages/hop-node/src/watchers/classes/Token.ts:\n   15    }\n   16  \n   17:   getBalance = async (): Promise<BigNumber> => {\n   18      const address = await this.tokenContract.signer.getAddress()\n   19      if (!address) {\n   ..\n   39    }\n   40  \n   41:   getAllowance = async (spender: string): Promise<BigNumber> => {\n   42      if (this.isEth) {\n   43        return constants.MaxUint256\n   ..\n   51      spender: string,\n   52      amount: BigNumber = ethers.constants.MaxUint256\n   53:   ): Promise<providers.TransactionResponse | undefined> => {\n   54      if (this.isEth) {\n   55        return\n   ..\n   68      recipient: string,\n   69      amount: BigNumber\n   70:   ): Promise<providers.TransactionResponse> => {\n   71      if (this.isEth) {\n   72        const tx = {\n\n~/Sandbox/hop/packages/hop-node/test/db.test.ts:\n   27        const _namespace = `testns-${Date.now()}`\n   28        const db = new TransfersDb(prefix, _namespace)\n   29:       const promises: Array<Promise<any>> = []\n   30        for (let i = 0; i < max; i++) {\n   31          const transferId = i.toString()\n   32          ids.push(transferId)\n   33:         promises.push(db.update(transferId, { transferSentTimestamp: i }))\n   34:         promises.push(db.update(transferId, { bondWithdrawalAttemptedAt: i }))\n   35        }\n   36:       await Promise.all(promises)\n   37        const items = await db.getTransfers()\n   38        expect(items.length).toStrictEqual(ids.length)\n\n~/Sandbox/hop/packages/hop-node/test/promiseQueue.test.ts:\n    1  import wait from 'src/utils/wait'\n    2: import { promiseQueue } from 'src/utils/promiseQueue'\n    3  \n    4  test(\n    5:   'promiseQueue',\n    6    async () => {\n    7      const data = []\n    .\n   12  \n   13      console.time('elapsed')\n   14:     await promiseQueue(data, async (item: any, i: number) => {\n   15        console.log(`processing #${i}: ${item}`)\n   16        await wait(2 * 1000)\n\n~/Sandbox/hop/packages/hop-node/test/queue.test.ts:\n   19    async () => {\n   20      const t = new Test()\n   21:     const values = await Promise.all(\n   22        Array(ITERATIONS)\n   23          .fill('0')\n\n~/Sandbox/hop/packages/hop-node/test/rateLimitRetry.test.ts:\n    4    counter = 0\n    5    triggerRateLimitError= rateLimitRetry(async () => {\n    6:     return new Promise((resolve, reject) => {\n    7        setTimeout(() => {\n    8          this.counter++\n    .\n   17  \n   18    triggerRevertError= rateLimitRetry(async () => {\n   19:     return new Promise((resolve, reject) => {\n   20        setTimeout(() => {\n   21          this.counter++\n   ..\n   28  \n   29    triggerCallRevertError= rateLimitRetry(async () => {\n   30:     return new Promise((resolve, reject) => {\n   31        setTimeout(() => {\n   32          this.counter++\n   ..\n   39  \n   40    triggerGatewayTimeoutError= rateLimitRetry(async () => {\n   41:     return new Promise((resolve, reject) => {\n   42        setTimeout(() => {\n   43          this.counter++\n\n~/Sandbox/hop/packages/hop-node/test/syncWatcher.test.ts:\n    5    setGlobalConfigFromConfigFile\n    6  } from 'src/config'\n    7: import { promiseQueue } from '../src/utils/promiseQueue'\n    8  \n    9  // known to cause getLogs issues with alchemy\n   ..\n 1050    const watcher = await getSyncWatcher({ token, dryMode: true })\n 1051  \n 1052:   await promiseQueue(transferRootHashes, async (transferRootHash: string) => {\n 1053      try {\n 1054        const dbItem = await watcher.db.transferRoots.getByTransferRootHash(transferRootHash)\n\n~/Sandbox/hop/packages/hop-node/test/utils/helpers.ts:\n  583      const lpToken = await this.getLpToken(network, token)\n  584      const address = await this.getAddress()\n  585:     const [balance, decimals] = await Promise.all([\n  586        lpToken.balanceOf(address),\n  587        lpToken.decimals()\n  ...\n 1158      network: string,\n 1159      percent: number\n 1160:   ): Promise<BigNumber> {\n 1161      const provider = this.getProvider(network)!\n 1162      const gasPrice = await provider.getGasPrice()\n ....\n 1210    predicate?: (data: any) => boolean\n 1211  ) {\n 1212:   return await new Promise((resolve, reject) => {\n 1213      watchers.forEach(watcher => {\n 1214        watcher\n ....\n 1375    sourceNetwork: string,\n 1376    destNetwork: string\n 1377: ): Promise<[number[], number[]]> {\n 1378:   return await Promise.all([\n 1379:     Promise.all(\n 1380        users.map(async (user: User) => await user.getBalance(sourceNetwork, token))\n 1381      ),\n 1382:     Promise.all(users.map(async (user: User) => await user.getBalance(destNetwork, token)))\n 1383    ])\n 1384  }\n 1385  \n 1386: async function getTokenDecimals (token: string | Contract): Promise<number> {\n 1387    let tokenSymbol: string\n 1388    if (typeof token === 'string') {\n\n~/Sandbox/hop/packages/ipfs-worker/package-lock.json:\n 4152        \"dev\": true\n 4153      },\n 4154:     \"node_modules/is-promise\": {\n 4155        \"version\": \"2.2.2\",\n 4156:       \"resolved\": \"https://registry.npmjs.org/is-promise/-/is-promise-2.2.2.tgz\",\n 4157        \"integrity\": \"sha512-+lP4/6lKUBfQjZ2pdxThZvLUAafmZb8OAxFb8XXtiQmS35INgr85hdOGoEs124ez1FCnZJt6jau/T+alh58QFQ==\",\n 4158        \"dev\": true\n ....\n 5250          \"@samverschueren/stream-to-observable\": \"^0.3.0\",\n 5251          \"is-observable\": \"^1.1.0\",\n 5252:         \"is-promise\": \"^2.1.0\",\n 5253          \"is-stream\": \"^1.1.0\",\n 5254          \"listr-silent-renderer\": \"^1.1.1\",\n ....\n 5799          \"map-age-cleaner\": \"^0.1.3\",\n 5800          \"mimic-fn\": \"^2.1.0\",\n 5801:         \"p-is-promise\": \"^2.1.0\"\n 5802        },\n 5803        \"engines\": {\n ....\n 6254        }\n 6255      },\n 6256:     \"node_modules/p-is-promise\": {\n 6257        \"version\": \"2.1.0\",\n 6258:       \"resolved\": \"https://registry.npmjs.org/p-is-promise/-/p-is-promise-2.1.0.tgz\",\n 6259        \"integrity\": \"sha512-Y3W0wlRPK8ZMRbNq97l4M5otioeA5lm1z7bkNkxCka8HSPjR0xRWmpCmc9utiaLP9Jb1eD8BgeIxTW4AIF45Pg==\",\n 6260        \"dev\": true,\n ....\n 6445        }\n 6446      },\n 6447:     \"node_modules/pinkie-promise\": {\n 6448        \"version\": \"2.0.1\",\n 6449:       \"resolved\": \"https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.1.tgz\",\n 6450        \"integrity\": \"sha512-0Gni6D4UcLTbv9c57DfxDGdr41XfgUjqWZu492f0cIGr16zDU06BWP/RAEvOuo7CQ0CNjHaLlM59YJJFm3NWlw==\",\n 6451        \"dev\": true,\n ....\n 6798          \"object-assign\": \"^4.0.1\",\n 6799          \"pify\": \"^2.0.0\",\n 6800:         \"pinkie-promise\": \"^2.0.0\"\n 6801        },\n 6802        \"engines\": {\n ....\n 7019          \"object-assign\": \"^4.0.1\",\n 7020          \"pify\": \"^2.0.0\",\n 7021:         \"pinkie-promise\": \"^2.0.0\"\n 7022        },\n 7023        \"engines\": {\n ....\n 11967        \"dev\": true\n 11968      },\n 11969:     \"is-promise\": {\n 11970        \"version\": \"2.2.2\",\n 11971:       \"resolved\": \"https://registry.npmjs.org/is-promise/-/is-promise-2.2.2.tgz\",\n 11972        \"integrity\": \"sha512-+lP4/6lKUBfQjZ2pdxThZvLUAafmZb8OAxFb8XXtiQmS35INgr85hdOGoEs124ez1FCnZJt6jau/T+alh58QFQ==\",\n 11973        \"dev\": true\n .....\n 12833          \"@samverschueren/stream-to-observable\": \"^0.3.0\",\n 12834          \"is-observable\": \"^1.1.0\",\n 12835:         \"is-promise\": \"^2.1.0\",\n 12836          \"is-stream\": \"^1.1.0\",\n 12837          \"listr-silent-renderer\": \"^1.1.1\",\n .....\n 13270          \"map-age-cleaner\": \"^0.1.3\",\n 13271          \"mimic-fn\": \"^2.1.0\",\n 13272:         \"p-is-promise\": \"^2.1.0\"\n 13273        }\n 13274      },\n .....\n 13633        \"dev\": true\n 13634      },\n 13635:     \"p-is-promise\": {\n 13636        \"version\": \"2.1.0\",\n 13637:       \"resolved\": \"https://registry.npmjs.org/p-is-promise/-/p-is-promise-2.1.0.tgz\",\n 13638        \"integrity\": \"sha512-Y3W0wlRPK8ZMRbNq97l4M5otioeA5lm1z7bkNkxCka8HSPjR0xRWmpCmc9utiaLP9Jb1eD8BgeIxTW4AIF45Pg==\",\n 13639        \"dev\": true\n .....\n 13773        \"dev\": true\n 13774      },\n 13775:     \"pinkie-promise\": {\n 13776        \"version\": \"2.0.1\",\n 13777:       \"resolved\": \"https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.1.tgz\",\n 13778        \"integrity\": \"sha512-0Gni6D4UcLTbv9c57DfxDGdr41XfgUjqWZu492f0cIGr16zDU06BWP/RAEvOuo7CQ0CNjHaLlM59YJJFm3NWlw==\",\n 13779        \"dev\": true,\n .....\n 14053              \"object-assign\": \"^4.0.1\",\n 14054              \"pify\": \"^2.0.0\",\n 14055:             \"pinkie-promise\": \"^2.0.0\"\n 14056            }\n 14057          },\n .....\n 14227              \"object-assign\": \"^4.0.1\",\n 14228              \"pify\": \"^2.0.0\",\n 14229:             \"pinkie-promise\": \"^2.0.0\"\n 14230            }\n 14231          },\n\n~/Sandbox/hop/packages/ipfs-worker/yarn.lock:\n 2144      object-assign \"^4.0.1\"\n 2145      pify \"^2.0.0\"\n 2146:     pinkie-promise \"^2.0.0\"\n 2147  \n 2148  globby@^10.0.1:\n ....\n 2524    integrity sha512-bCYeRA2rVibKZd+s2625gGnGF/t7DSqDs4dP7CrLA1m7jKWz6pps0LpYLJN8Q64HtmPKJ1hrN3nzPNKFEKOUiQ==\n 2525  \n 2526: is-promise@^2.1.0:\n 2527    version \"2.2.2\"\n 2528:   resolved \"https://registry.yarnpkg.com/is-promise/-/is-promise-2.2.2.tgz#39ab959ccbf9a774cf079f7b40c7a26f763135f1\"\n 2529    integrity sha512-+lP4/6lKUBfQjZ2pdxThZvLUAafmZb8OAxFb8XXtiQmS35INgr85hdOGoEs124ez1FCnZJt6jau/T+alh58QFQ==\n 2530  \n ....\n 3218      \"@samverschueren/stream-to-observable\" \"^0.3.0\"\n 3219      is-observable \"^1.1.0\"\n 3220:     is-promise \"^2.1.0\"\n 3221      is-stream \"^1.1.0\"\n 3222      listr-silent-renderer \"^1.1.1\"\n ....\n 3348      map-age-cleaner \"^0.1.3\"\n 3349      mimic-fn \"^2.1.0\"\n 3350:     p-is-promise \"^2.1.0\"\n 3351  \n 3352  merge-stream@^2.0.0:\n ....\n 3627    integrity sha512-vpm09aKwq6H9phqRQzecoDpD8TmVyGw70qmWlyq5onxY7tqyTTFVvxMykxQSQKILBSFlbXpypIw2T1Ml7+DDtw==\n 3628  \n 3629: p-is-promise@^2.1.0:\n 3630    version \"2.1.0\"\n 3631:   resolved \"https://registry.yarnpkg.com/p-is-promise/-/p-is-promise-2.1.0.tgz#918cebaea248a62cf7ffab8e3bca8c5f882fc42e\"\n 3632    integrity sha512-Y3W0wlRPK8ZMRbNq97l4M5otioeA5lm1z7bkNkxCka8HSPjR0xRWmpCmc9utiaLP9Jb1eD8BgeIxTW4AIF45Pg==\n 3633  \n ....\n 3760    integrity sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==\n 3761  \n 3762: pinkie-promise@^2.0.0:\n 3763    version \"2.0.1\"\n 3764:   resolved \"https://registry.yarnpkg.com/pinkie-promise/-/pinkie-promise-2.0.1.tgz#2135d6dfa7a358c069ac9b178776288228450ffa\"\n 3765    integrity sha512-0Gni6D4UcLTbv9c57DfxDGdr41XfgUjqWZu492f0cIGr16zDU06BWP/RAEvOuo7CQ0CNjHaLlM59YJJFm3NWlw==\n 3766    dependencies:\n\n~/Sandbox/hop/packages/ipfs-worker/src/utils/fetchJsonOrThrow.ts:\n    1  import fetch from 'isomorphic-fetch'\n    2: import { promiseTimeout } from './promiseTimeout'\n    3  \n    4  export async function fetchJsonOrThrow (\n    .\n   14    const res = await (signal\n   15      ? fetch(url, { signal })\n   16:     : promiseTimeout(fetch(url), timeoutMs))\n   17    const json = await res.json()\n   18    if (!json || !(json instanceof Object)) {\n\n~/Sandbox/hop/packages/ipfs-worker/src/utils/promiseTimeout.ts:\n    1  class TimeoutError extends Error {}\n    2  \n    3: export async function promiseTimeout<T> (\n    4:   promise: Promise<T>,\n    5    timeout: number\n    6: ): Promise<T> {\n    7:   return await new Promise(async (resolve, reject) => {\n    8      let timedout = false\n    9      const t = setTimeout(() => {\n   ..\n   12      }, timeout)\n   13  \n   14:     // make it a promise if it's not one\n   15:     Promise.resolve(promise)\n   16        .then((result: any) => {\n   17          clearTimeout(t)\n\n~/Sandbox/hop/packages/sdk/.eslintrc.json:\n   27        \"new-cap\": 0,\n   28        \"prefer-const\": 1,\n   29:       \"no-async-promise-executor\": 0,\n   30        \"node/no-callback-literal\": 0,\n   31        \"import/no-named-default\": 0,\n\n~/Sandbox/hop/packages/sdk/package-lock.json:\n   45          \"eslint-plugin-jest\": \"^24.3.6\",\n   46          \"eslint-plugin-node\": \"^11.1.0\",\n   47:         \"eslint-plugin-promise\": \"^5.1.0\",\n   48          \"eslint-plugin-sort-imports-es6-autofix\": \"^0.6.0\",\n   49          \"eslint-plugin-unused-imports\": \"^1.1.2\",\n   ..\n 7572        }\n 7573      },\n 7574:     \"node_modules/any-promise\": {\n 7575        \"version\": \"1.3.0\",\n 7576:       \"resolved\": \"https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz\",\n 7577        \"integrity\": \"sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==\",\n 7578        \"dev\": true\n ....\n 10253        }\n 10254      },\n 10255:     \"node_modules/es6-promise\": {\n 10256        \"version\": \"4.2.8\",\n 10257:       \"resolved\": \"https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz\",\n 10258        \"integrity\": \"sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w==\"\n 10259      },\n .....\n 10462          \"eslint-plugin-import\": \"^2.22.1\",\n 10463          \"eslint-plugin-node\": \"^11.1.0\",\n 10464:         \"eslint-plugin-promise\": \"^4.2.1 || ^5.0.0\"\n 10465        }\n 10466      },\n .....\n 10678        }\n 10679      },\n 10680:     \"node_modules/eslint-plugin-promise\": {\n 10681        \"version\": \"5.2.0\",\n 10682:       \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-5.2.0.tgz\",\n 10683        \"integrity\": \"sha512-SftLb1pUG01QYq2A/hGAWfDRXqYD82zE7j7TopDOyNdU+7SvvoXREls/+PRTY17vUXzXnZA/zfnyKgRH6x4JJw==\",\n 10684        \"dev\": true,\n .....\n 11117          \"servify\": \"^0.1.12\",\n 11118          \"ws\": \"^3.0.0\",\n 11119:         \"xhr-request-promise\": \"^0.1.2\"\n 11120        }\n 11121      },\n .....\n 17222        \"devOptional\": true\n 17223      },\n 17224:     \"node_modules/mkdirp-promise\": {\n 17225        \"version\": \"5.0.1\",\n 17226:       \"resolved\": \"https://registry.npmjs.org/mkdirp-promise/-/mkdirp-promise-5.0.1.tgz\",\n 17227        \"integrity\": \"sha512-Hepn5kb1lJPtVW84RFT40YG1OddBNTOVUZR2bzQUHc+Z03en8/3uX0+060JDhcEzyO08HmipsN9DcnFMxhIL9w==\",\n 17228:       \"deprecated\": \"This package is broken and no longer maintained. 'mkdirp' itself supports promises now, please switch to that.\",\n 17229        \"dependencies\": {\n 17230          \"mkdirp\": \"*\"\n .....\n 20433          \"eslint-plugin-import\": \"~2.14.0\",\n 20434          \"eslint-plugin-node\": \"~7.0.1\",\n 20435:         \"eslint-plugin-promise\": \"~4.0.0\",\n 20436          \"eslint-plugin-react\": \"~7.11.1\",\n 20437          \"eslint-plugin-standard\": \"~4.0.0\",\n .....\n 20576          \"eslint-plugin-import\": \">=2.13.0\",\n 20577          \"eslint-plugin-node\": \">=7.0.0\",\n 20578:         \"eslint-plugin-promise\": \">=4.0.0\",\n 20579          \"eslint-plugin-standard\": \">=4.0.0\"\n 20580        }\n .....\n 20668        }\n 20669      },\n 20670:     \"node_modules/standard/node_modules/eslint-plugin-promise\": {\n 20671        \"version\": \"4.0.1\",\n 20672:       \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-4.0.1.tgz\",\n 20673        \"integrity\": \"sha512-Si16O0+Hqz1gDHsys6RtFRrW7cCTB6P7p3OJmKp3Y3dxpQE2qwOA7d3xnV+0mBmrPoi0RBnxlCKvqu70te6wjg==\",\n 20674        \"dev\": true,\n .....\n 21444          \"got\": \"^7.1.0\",\n 21445          \"mime-types\": \"^2.1.16\",\n 21446:         \"mkdirp-promise\": \"^5.0.1\",\n 21447          \"mock-fs\": \"^4.1.0\",\n 21448          \"setimmediate\": \"^1.0.5\",\n .....\n 21947        \"dev\": true,\n 21948        \"dependencies\": {\n 21949:         \"any-promise\": \"^1.3.0\",\n 21950          \"parse-json\": \"^2.2.0\",\n 21951          \"strip-bom\": \"^2.0.0\",\n .....\n 22958          \"bn.js\": \"^4.11.6\",\n 22959          \"elliptic\": \"^6.4.0\",\n 22960:         \"xhr-request-promise\": \"^0.1.2\"\n 22961        }\n 22962      },\n .....\n 23059          \"abortcontroller-polyfill\": \"^1.7.3\",\n 23060          \"cross-fetch\": \"^3.1.4\",\n 23061:         \"es6-promise\": \"^4.2.8\",\n 23062          \"web3-core-helpers\": \"1.7.5\"\n 23063        },\n .....\n 23444        }\n 23445      },\n 23446:     \"node_modules/xhr-request-promise\": {\n 23447        \"version\": \"0.1.3\",\n 23448:       \"resolved\": \"https://registry.npmjs.org/xhr-request-promise/-/xhr-request-promise-0.1.3.tgz\",\n 23449        \"integrity\": \"sha512-YUBytBsuwgitWtdRzXDDkWAXzhdGB8bYm0sSzMPZT7Z2MBjMSTHFsyCT1yCRATY+XC69DUrQraRAEgcoCRaIPg==\",\n 23450        \"dependencies\": {\n .....\n 28704        }\n 28705      },\n 28706:     \"any-promise\": {\n 28707        \"version\": \"1.3.0\",\n 28708:       \"resolved\": \"https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz\",\n 28709        \"integrity\": \"sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==\",\n 28710        \"dev\": true\n .....\n 30865        }\n 30866      },\n 30867:     \"es6-promise\": {\n 30868        \"version\": \"4.2.8\",\n 30869:       \"resolved\": \"https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz\",\n 30870        \"integrity\": \"sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w==\"\n 30871      },\n .....\n 31292        }\n 31293      },\n 31294:     \"eslint-plugin-promise\": {\n 31295        \"version\": \"5.2.0\",\n 31296:       \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-5.2.0.tgz\",\n 31297        \"integrity\": \"sha512-SftLb1pUG01QYq2A/hGAWfDRXqYD82zE7j7TopDOyNdU+7SvvoXREls/+PRTY17vUXzXnZA/zfnyKgRH6x4JJw==\",\n 31298        \"dev\": true\n .....\n 31476          \"servify\": \"^0.1.12\",\n 31477          \"ws\": \"^3.0.0\",\n 31478:         \"xhr-request-promise\": \"^0.1.2\"\n 31479        },\n 31480        \"dependencies\": {\n .....\n 36056        \"devOptional\": true\n 36057      },\n 36058:     \"mkdirp-promise\": {\n 36059        \"version\": \"5.0.1\",\n 36060:       \"resolved\": \"https://registry.npmjs.org/mkdirp-promise/-/mkdirp-promise-5.0.1.tgz\",\n 36061        \"integrity\": \"sha512-Hepn5kb1lJPtVW84RFT40YG1OddBNTOVUZR2bzQUHc+Z03en8/3uX0+060JDhcEzyO08HmipsN9DcnFMxhIL9w==\",\n 36062        \"requires\": {\n .....\n 38571          \"eslint-plugin-import\": \"~2.14.0\",\n 38572          \"eslint-plugin-node\": \"~7.0.1\",\n 38573:         \"eslint-plugin-promise\": \"~4.0.0\",\n 38574          \"eslint-plugin-react\": \"~7.11.1\",\n 38575          \"eslint-plugin-standard\": \"~4.0.0\",\n .....\n 38741            }\n 38742          },\n 38743:         \"eslint-plugin-promise\": {\n 38744            \"version\": \"4.0.1\",\n 38745:           \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-4.0.1.tgz\",\n 38746            \"integrity\": \"sha512-Si16O0+Hqz1gDHsys6RtFRrW7cCTB6P7p3OJmKp3Y3dxpQE2qwOA7d3xnV+0mBmrPoi0RBnxlCKvqu70te6wjg==\",\n 38747            \"dev\": true\n .....\n 39353          \"got\": \"^7.1.0\",\n 39354          \"mime-types\": \"^2.1.16\",\n 39355:         \"mkdirp-promise\": \"^5.0.1\",\n 39356          \"mock-fs\": \"^4.1.0\",\n 39357          \"setimmediate\": \"^1.0.5\",\n .....\n 39756        \"dev\": true,\n 39757        \"requires\": {\n 39758:         \"any-promise\": \"^1.3.0\",\n 39759          \"parse-json\": \"^2.2.0\",\n 39760          \"strip-bom\": \"^2.0.0\",\n .....\n 40577              \"bn.js\": \"^4.11.6\",\n 40578              \"elliptic\": \"^6.4.0\",\n 40579:             \"xhr-request-promise\": \"^0.1.2\"\n 40580            }\n 40581          },\n .....\n 40663          \"abortcontroller-polyfill\": \"^1.7.3\",\n 40664          \"cross-fetch\": \"^3.1.4\",\n 40665:         \"es6-promise\": \"^4.2.8\",\n 40666          \"web3-core-helpers\": \"1.7.5\"\n 40667        }\n .....\n 40996        }\n 40997      },\n 40998:     \"xhr-request-promise\": {\n 40999        \"version\": \"0.1.3\",\n 41000:       \"resolved\": \"https://registry.npmjs.org/xhr-request-promise/-/xhr-request-promise-0.1.3.tgz\",\n 41001        \"integrity\": \"sha512-YUBytBsuwgitWtdRzXDDkWAXzhdGB8bYm0sSzMPZT7Z2MBjMSTHFsyCT1yCRATY+XC69DUrQraRAEgcoCRaIPg==\",\n 41002        \"requires\": {\n\n~/Sandbox/hop/packages/sdk/package.json:\n   73      \"eslint-plugin-jest\": \"^24.3.6\",\n   74      \"eslint-plugin-node\": \"^11.1.0\",\n   75:     \"eslint-plugin-promise\": \"^5.1.0\",\n   76      \"eslint-plugin-sort-imports-es6-autofix\": \"^0.6.0\",\n   77      \"eslint-plugin-unused-imports\": \"^1.1.2\",\n\n~/Sandbox/hop/packages/sdk/yarn.lock:\n 2794    integrity sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==\n 2795  \n 2796: any-promise@^1.3.0:\n 2797    version \"1.3.0\"\n 2798:   resolved \"https://registry.yarnpkg.com/any-promise/-/any-promise-1.3.0.tgz#abc6afeedcea52e809cdc0376aed3ce39635d17f\"\n 2799    integrity sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==\n 2800  \n ....\n 4524      es6-symbol \"^3.1.1\"\n 4525  \n 4526: es6-promise@^4.2.8:\n 4527    version \"4.2.8\"\n 4528:   resolved \"https://registry.yarnpkg.com/es6-promise/-/es6-promise-4.2.8.tgz#4eb21594c972bc40553d276e510539143db53e0a\"\n 4529    integrity sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w==\n 4530  \n ....\n 4689      semver \"^5.5.0\"\n 4690  \n 4691: eslint-plugin-promise@^5.1.0:\n 4692    version \"5.2.0\"\n 4693:   resolved \"https://registry.yarnpkg.com/eslint-plugin-promise/-/eslint-plugin-promise-5.2.0.tgz#a596acc32981627eb36d9d75f9666ac1a4564971\"\n 4694    integrity sha512-SftLb1pUG01QYq2A/hGAWfDRXqYD82zE7j7TopDOyNdU+7SvvoXREls/+PRTY17vUXzXnZA/zfnyKgRH6x4JJw==\n 4695  \n 4696: eslint-plugin-promise@~4.0.0:\n 4697    version \"4.0.1\"\n 4698:   resolved \"https://registry.yarnpkg.com/eslint-plugin-promise/-/eslint-plugin-promise-4.0.1.tgz#2d074b653f35a23d1ba89d8e976a985117d1c6a2\"\n 4699    integrity sha512-Si16O0+Hqz1gDHsys6RtFRrW7cCTB6P7p3OJmKp3Y3dxpQE2qwOA7d3xnV+0mBmrPoi0RBnxlCKvqu70te6wjg==\n 4700  \n ....\n 4946      bn.js \"^4.11.6\"\n 4947      elliptic \"^6.4.0\"\n 4948:     xhr-request-promise \"^0.1.2\"\n 4949  \n 4950  eth-lib@^0.1.26:\n ....\n 4958      servify \"^0.1.12\"\n 4959      ws \"^3.0.0\"\n 4960:     xhr-request-promise \"^0.1.2\"\n 4961  \n 4962  ethereum-block-by-date@^1.4.6:\n ....\n 7665    integrity sha512-gKLcREMhtuZRwRAfqP3RFW+TK4JqApVBtOIftVgjuABpAtpxhPGaDcfvbhNvD0B8iD1oUr/txX35NjcaY6Ns/A==\n 7666  \n 7667: mkdirp-promise@^5.0.1:\n 7668    version \"5.0.1\"\n 7669:   resolved \"https://registry.yarnpkg.com/mkdirp-promise/-/mkdirp-promise-5.0.1.tgz#e9b8f68e552c68a9c1713b84883f7a1dd039b8a1\"\n 7670    integrity sha512-Hepn5kb1lJPtVW84RFT40YG1OddBNTOVUZR2bzQUHc+Z03en8/3uX0+060JDhcEzyO08HmipsN9DcnFMxhIL9w==\n 7671    dependencies:\n ....\n 9536      eslint-plugin-import \"~2.14.0\"\n 9537      eslint-plugin-node \"~7.0.1\"\n 9538:     eslint-plugin-promise \"~4.0.0\"\n 9539      eslint-plugin-react \"~7.11.1\"\n 9540      eslint-plugin-standard \"~4.0.0\"\n ....\n 9783      got \"^11.8.5\"\n 9784      mime-types \"^2.1.16\"\n 9785:     mkdirp-promise \"^5.0.1\"\n 9786      mock-fs \"^4.1.0\"\n 9787      setimmediate \"^1.0.5\"\n ....\n 10035    integrity sha512-Cq65A3kVp6BbsUgg9DRHafaGmbMb9EhAc7fjWvudNWKjkbWrt43FnrtZt6awshH1R0ocfF2Z0uxock3lVqEgOg==\n 10036    dependencies:\n 10037:     any-promise \"^1.3.0\"\n 10038      parse-json \"^2.2.0\"\n 10039      strip-bom \"^2.0.0\"\n .....\n 10665      abortcontroller-polyfill \"^1.7.3\"\n 10666      cross-fetch \"^3.1.4\"\n 10667:     es6-promise \"^4.2.8\"\n 10668      web3-core-helpers \"1.7.5\"\n 10669  \n .....\n 10896    integrity sha512-F+P9Jil7UiSKSkppIiD94dN07AwvFixvLIj1Og1Rl9GGMuNipJnV9JzjD6XuqmAeiswGvUmNLjr5cFuXwNS77Q==\n 10897  \n 10898: xhr-request-promise@^0.1.2:\n 10899    version \"0.1.3\"\n 10900:   resolved \"https://registry.yarnpkg.com/xhr-request-promise/-/xhr-request-promise-0.1.3.tgz#2d5f4b16d8c6c893be97f1a62b0ed4cf3ca5f96c\"\n 10901    integrity sha512-YUBytBsuwgitWtdRzXDDkWAXzhdGB8bYm0sSzMPZT7Z2MBjMSTHFsyCT1yCRATY+XC69DUrQraRAEgcoCRaIPg==\n 10902    dependencies:\n\n~/Sandbox/hop/packages/sdk/docs/classes/AMM.md:\n  218  ### <a id=\"calculateswap\" name=\"calculateswap\"></a> calculateSwap\n  219  \n  220: • **calculateSwap**: (...`args`: [fromIndex: TokenIndex, toIndex: TokenIndex, amount: BigNumberish]) => `Promise`<`any`\\>\n  221  \n  222  #### Type declaration\n  223  \n  224: ▸ (...`args`): `Promise`<`any`\\>\n  225  \n  226  ##### Parameters\n  ...\n  232  ##### Returns\n  233  \n  234: `Promise`<`any`\\>\n  235  \n  236  ___\n  ...\n  310  ### <a id=\"getcontract\" name=\"getcontract\"></a> getContract\n  311  \n  312: • **getContract**: (`factory`: `Factory`, `address`: `string`, `provider`: [`TProvider`](../modules.md#tprovider)) => `Promise`<`any`\\> = `getContract`\n  313  \n  314  #### Type declaration\n  315  \n  316: ▸ (`factory`, `address`, `provider`): `Promise`<`any`\\>\n  317  \n  318  ##### Parameters\n  ...\n  326  ##### Returns\n  327  \n  328: `Promise`<`any`\\>\n  329  \n  330  #### Inherited from\n  ...\n  436  ### <a id=\"_getbonderaddress\" name=\"_getbonderaddress\"></a> \\_getBonderAddress\n  437  \n  438: ▸ `Protected` **_getBonderAddress**(`token`, `sourceChain`, `destinationChain`): `Promise`<`string`\\>\n  439  \n  440  #### Parameters\n  ...\n  448  #### Returns\n  449  \n  450: `Promise`<`string`\\>\n  451  \n  452  #### Inherited from\n  ...\n  458  ### <a id=\"_getmessengerwrapperaddress\" name=\"_getmessengerwrapperaddress\"></a> \\_getMessengerWrapperAddress\n  459  \n  460: ▸ `Protected` **_getMessengerWrapperAddress**(`token`, `destinationChain`): `Promise`<`string`\\>\n  461  \n  462  #### Parameters\n  ...\n  469  #### Returns\n  470  \n  471: `Promise`<`string`\\>\n  472  \n  473  #### Inherited from\n  ...\n  479  ### <a id=\"addliquidity\" name=\"addliquidity\"></a> addLiquidity\n  480  \n  481: ▸ **addLiquidity**(`amount0Desired`, `amount1Desired`, `minToMint?`, `deadline?`): `Promise`<`TransactionResponse`\\>\n  482  \n  483  **`Desc`**\n  ...\n  506  #### Returns\n  507  \n  508: `Promise`<`TransactionResponse`\\>\n  509  \n  510  Ethers transaction object.\n  ...\n  537  ### <a id=\"calculateaddliquidityminimum\" name=\"calculateaddliquidityminimum\"></a> calculateAddLiquidityMinimum\n  538  \n  539: ▸ **calculateAddLiquidityMinimum**(`amount0`, `amount1`): `Promise`<`BigNumber`\\>\n  540  \n  541  #### Parameters\n  ...\n  548  #### Returns\n  549  \n  550: `Promise`<`BigNumber`\\>\n  551  \n  552  ___\n  ...\n  554  ### <a id=\"calculateamountsforlptoken\" name=\"calculateamountsforlptoken\"></a> calculateAmountsForLpToken\n  555  \n  556: ▸ **calculateAmountsForLpToken**(`lpTokenAmount`): `Promise`<`any`\\>\n  557  \n  558  #### Parameters\n  ...\n  564  #### Returns\n  565  \n  566: `Promise`<`any`\\>\n  567  \n  568  ___\n  ...\n  570  ### <a id=\"calculatefromhtoken\" name=\"calculatefromhtoken\"></a> calculateFromHToken\n  571  \n  572: ▸ **calculateFromHToken**(`amount`): `Promise`<`any`\\>\n  573  \n  574  #### Parameters\n  ...\n  580  #### Returns\n  581  \n  582: `Promise`<`any`\\>\n  583  \n  584  ___\n  ...\n  586  ### <a id=\"calculateremoveliquidityminimum\" name=\"calculateremoveliquidityminimum\"></a> calculateRemoveLiquidityMinimum\n  587  \n  588: ▸ **calculateRemoveLiquidityMinimum**(`lpTokenAmount`): `Promise`<`any`\\>\n  589  \n  590  #### Parameters\n  ...\n  596  #### Returns\n  597  \n  598: `Promise`<`any`\\>\n  599  \n  600  ___\n  ...\n  602  ### <a id=\"calculateremoveliquidityminimumlptokens\" name=\"calculateremoveliquidityminimumlptokens\"></a> calculateRemoveLiquidityMinimumLpTokens\n  603  \n  604: ▸ **calculateRemoveLiquidityMinimumLpTokens**(`amount0`, `amount1`): `Promise`<`any`\\>\n  605  \n  606  #### Parameters\n  ...\n  613  #### Returns\n  614  \n  615: `Promise`<`any`\\>\n  616  \n  617  ___\n  ...\n  619  ### <a id=\"calculateremoveliquidityonetoken\" name=\"calculateremoveliquidityonetoken\"></a> calculateRemoveLiquidityOneToken\n  620  \n  621: ▸ **calculateRemoveLiquidityOneToken**(`tokenAmount`, `tokenIndex`): `Promise`<`any`\\>\n  622  \n  623  #### Parameters\n  ...\n  630  #### Returns\n  631  \n  632: `Promise`<`any`\\>\n  633  \n  634  ___\n  ...\n  636  ### <a id=\"calculatetohtoken\" name=\"calculatetohtoken\"></a> calculateToHToken\n  637  \n  638: ▸ **calculateToHToken**(`amount`): `Promise`<`any`\\>\n  639  \n  640  #### Parameters\n  ...\n  646  #### Returns\n  647  \n  648: `Promise`<`any`\\>\n  649  \n  650  ___\n  ...\n  652  ### <a id=\"calculatetotalamountforlptoken\" name=\"calculatetotalamountforlptoken\"></a> calculateTotalAmountForLpToken\n  653  \n  654: ▸ **calculateTotalAmountForLpToken**(`lpTokenAmount`): `Promise`<`any`\\>\n  655  \n  656  #### Parameters\n  ...\n  662  #### Returns\n  663  \n  664: `Promise`<`any`\\>\n  665  \n  666  ___\n  ...\n  701  ### <a id=\"estimateoptimisml1feefromdata\" name=\"estimateoptimisml1feefromdata\"></a> estimateOptimismL1FeeFromData\n  702  \n  703: ▸ **estimateOptimismL1FeeFromData**(`gasLimit`, `data?`, `to?`): `Promise`<`any`\\>\n  704  \n  705  #### Parameters\n  ...\n  713  #### Returns\n  714  \n  715: `Promise`<`any`\\>\n  716  \n  717  #### Inherited from\n  ...\n  723  ### <a id=\"fetchconfigfroms3\" name=\"fetchconfigfroms3\"></a> fetchConfigFromS3\n  724  \n  725: ▸ **fetchConfigFromS3**(): `Promise`<`any`\\>\n  726  \n  727  #### Returns\n  728  \n  729: `Promise`<`any`\\>\n  730  \n  731  #### Inherited from\n  ...\n  751  ### <a id=\"getapr\" name=\"getapr\"></a> getApr\n  752  \n  753: ▸ **getApr**(`days?`): `Promise`<`number`\\>\n  754  \n  755  #### Parameters\n  ...\n  761  #### Returns\n  762  \n  763: `Promise`<`number`\\>\n  764  \n  765  ___\n  ...\n  767  ### <a id=\"getapy\" name=\"getapy\"></a> getApy\n  768  \n  769: ▸ **getApy**(`days?`): `Promise`<`number`\\>\n  770  \n  771  #### Parameters\n  ...\n  777  #### Returns\n  778  \n  779: `Promise`<`number`\\>\n  780  \n  781  ___\n  ...\n  804  ### <a id=\"getbumpedgasprice\" name=\"getbumpedgasprice\"></a> getBumpedGasPrice\n  805  \n  806: ▸ **getBumpedGasPrice**(`signer`, `percent`): `Promise`<`BigNumber`\\>\n  807  \n  808  **`Desc`**\n  ...\n  829  #### Returns\n  830  \n  831: `Promise`<`BigNumber`\\>\n  832  \n  833  Bumped as price as BigNumber\n  ...\n  841  ### <a id=\"getcanonicaltokenaddress\" name=\"getcanonicaltokenaddress\"></a> getCanonicalTokenAddress\n  842  \n  843: ▸ **getCanonicalTokenAddress**(): `Promise`<`any`\\>\n  844  \n  845  **`Desc`**\n  ...\n  849  #### Returns\n  850  \n  851: `Promise`<`any`\\>\n  852  \n  853  address\n  ...\n  958  ### <a id=\"getdailyvolume\" name=\"getdailyvolume\"></a> getDailyVolume\n  959  \n  960: ▸ **getDailyVolume**(): `Promise`<{ `volume`: `any` ; `volumeFormatted`: `any`  }\\>\n  961  \n  962  #### Returns\n  963  \n  964: `Promise`<{ `volume`: `any` ; `volumeFormatted`: `any`  }\\>\n  965  \n  966  ___\n  ...\n 1056  ### <a id=\"getfeebps\" name=\"getfeebps\"></a> getFeeBps\n 1057  \n 1058: ▸ **getFeeBps**(`token`, `destinationChain`): `Promise`<`number`\\>\n 1059  \n 1060  #### Parameters\n ....\n 1067  #### Returns\n 1068  \n 1069: `Promise`<`number`\\>\n 1070  \n 1071  #### Inherited from\n ....\n 1077  ### <a id=\"gethoptokenaddress\" name=\"gethoptokenaddress\"></a> getHopTokenAddress\n 1078  \n 1079: ▸ **getHopTokenAddress**(): `Promise`<`any`\\>\n 1080  \n 1081  **`Desc`**\n ....\n 1085  #### Returns\n 1086  \n 1087: `Promise`<`any`\\>\n 1088  \n 1089  address\n ....\n 1387  ### <a id=\"getpriceimpact\" name=\"getpriceimpact\"></a> getPriceImpact\n 1388  \n 1389: ▸ **getPriceImpact**(`amount0`, `amount1`): `Promise`<`BigNumber`\\>\n 1390  \n 1391  #### Parameters\n ....\n 1398  #### Returns\n 1399  \n 1400: `Promise`<`BigNumber`\\>\n 1401  \n 1402  ___\n ....\n 1424  ### <a id=\"getrelayerfee\" name=\"getrelayerfee\"></a> getRelayerFee\n 1425  \n 1426: ▸ **getRelayerFee**(`destinationChain`, `tokenSymbol`): `Promise`<`BigNumber`\\>\n 1427  \n 1428  #### Parameters\n ....\n 1435  #### Returns\n 1436  \n 1437: `Promise`<`BigNumber`\\>\n 1438  \n 1439  #### Inherited from\n ....\n 1445  ### <a id=\"getremoveliquiditypriceimpact\" name=\"getremoveliquiditypriceimpact\"></a> getRemoveLiquidityPriceImpact\n 1446  \n 1447: ▸ **getRemoveLiquidityPriceImpact**(`amount0`, `amount1`): `Promise`<`BigNumber`\\>\n 1448  \n 1449  #### Parameters\n ....\n 1456  #### Returns\n 1457  \n 1458: `Promise`<`BigNumber`\\>\n 1459  \n 1460  ___\n ....\n 1462  ### <a id=\"getreserves\" name=\"getreserves\"></a> getReserves\n 1463  \n 1464: ▸ **getReserves**(): `Promise`<[`any`, `any`]\\>\n 1465  \n 1466  #### Returns\n 1467  \n 1468: `Promise`<[`any`, `any`]\\>\n 1469  \n 1470  ___\n ....\n 1472  ### <a id=\"getreservestotal\" name=\"getreservestotal\"></a> getReservesTotal\n 1473  \n 1474: ▸ **getReservesTotal**(): `Promise`<`any`\\>\n 1475  \n 1476  #### Returns\n 1477  \n 1478: `Promise`<`any`\\>\n 1479  \n 1480  ___\n ....\n 1482  ### <a id=\"gets3configdata\" name=\"gets3configdata\"></a> getS3ConfigData\n 1483  \n 1484: ▸ **getS3ConfigData**(): `Promise`<`any`\\>\n 1485  \n 1486  #### Returns\n 1487  \n 1488: `Promise`<`any`\\>\n 1489  \n 1490  #### Inherited from\n ....\n 1496  ### <a id=\"getsaddleswap\" name=\"getsaddleswap\"></a> getSaddleSwap\n 1497  \n 1498: ▸ **getSaddleSwap**(): `Promise`<`any`\\>\n 1499  \n 1500  **`Desc`**\n ....\n 1504  #### Returns\n 1505  \n 1506: `Promise`<`any`\\>\n 1507  \n 1508  Ethers contract instance.\n ....\n 1512  ### <a id=\"getsigneraddress\" name=\"getsigneraddress\"></a> getSignerAddress\n 1513  \n 1514: ▸ **getSignerAddress**(): `Promise`<`string`\\>\n 1515  \n 1516  **`Desc`**\n ....\n 1530  #### Returns\n 1531  \n 1532: `Promise`<`string`\\>\n 1533  \n 1534  Ethers signer address.\n ....\n 1542  ### <a id=\"getsignerorprovider\" name=\"getsignerorprovider\"></a> getSignerOrProvider\n 1543  \n 1544: ▸ **getSignerOrProvider**(`chain`, `signer?`): `Promise`<`Provider` \\| `Signer`\\>\n 1545  \n 1546  **`Desc`**\n ....\n 1558  #### Returns\n 1559  \n 1560: `Promise`<`Provider` \\| `Signer`\\>\n 1561  \n 1562  Ethers signer or provider\n ....\n 1632  ### <a id=\"getswapfee\" name=\"getswapfee\"></a> getSwapFee\n 1633  \n 1634: ▸ **getSwapFee**(): `Promise`<`number`\\>\n 1635  \n 1636  #### Returns\n 1637  \n 1638: `Promise`<`number`\\>\n 1639  \n 1640  ___\n ....\n 1642  ### <a id=\"gettransferstatus\" name=\"gettransferstatus\"></a> getTransferStatus\n 1643  \n 1644: ▸ **getTransferStatus**(`transferIdOrTxHash`): `Promise`<`any`\\>\n 1645  \n 1646  #### Parameters\n ....\n 1652  #### Returns\n 1653  \n 1654: `Promise`<`any`\\>\n 1655  \n 1656  #### Inherited from\n ....\n 1662  ### <a id=\"getvirtualprice\" name=\"getvirtualprice\"></a> getVirtualPrice\n 1663  \n 1664: ▸ **getVirtualPrice**(): `Promise`<`any`\\>\n 1665  \n 1666  #### Returns\n 1667  \n 1668: `Promise`<`any`\\>\n 1669  \n 1670  ___\n ....\n 1692  ### <a id=\"getyielddata\" name=\"getyielddata\"></a> getYieldData\n 1693  \n 1694: ▸ **getYieldData**(`days?`): `Promise`<{ `apr`: `number` ; `apy`: `number` ; `volume`: `any` = totalVolume; `volumeFormatted`: `any` = totalVolumeFormatted }\\>\n 1695  \n 1696  #### Parameters\n ....\n 1702  #### Returns\n 1703  \n 1704: `Promise`<{ `apr`: `number` ; `apy`: `number` ; `volume`: `any` = totalVolume; `volumeFormatted`: `any` = totalVolumeFormatted }\\>\n 1705  \n 1706  ___\n ....\n 1708  ### <a id=\"getyieldstatsforday\" name=\"getyieldstatsforday\"></a> getYieldStatsForDay\n 1709  \n 1710: ▸ **getYieldStatsForDay**(`unixTimestamp`, `days?`): `Promise`<`any`\\>\n 1711  \n 1712  #### Parameters\n ....\n 1719  #### Returns\n 1720  \n 1721: `Promise`<`any`\\>\n 1722  \n 1723  ___\n ....\n 1725  ### <a id=\"init\" name=\"init\"></a> init\n 1726  \n 1727: ▸ **init**(): `Promise`<`void`\\>\n 1728  \n 1729  #### Returns\n 1730  \n 1731: `Promise`<`void`\\>\n 1732  \n 1733  #### Inherited from\n ....\n 1795  ### <a id=\"populateaddliquiditytx\" name=\"populateaddliquiditytx\"></a> populateAddLiquidityTx\n 1796  \n 1797: ▸ **populateAddLiquidityTx**(`amount0Desired`, `amount1Desired`, `minToMint?`, `deadline?`): `Promise`<`any`\\>\n 1798  \n 1799  #### Parameters\n ....\n 1808  #### Returns\n 1809  \n 1810: `Promise`<`any`\\>\n 1811  \n 1812  ___\n ....\n 1814  ### <a id=\"populateremoveliquiditytx\" name=\"populateremoveliquiditytx\"></a> populateRemoveLiquidityTx\n 1815  \n 1816: ▸ **populateRemoveLiquidityTx**(`liquidityTokenAmount`, `amount0Min?`, `amount1Min?`, `deadline?`): `Promise`<`any`\\>\n 1817  \n 1818  #### Parameters\n ....\n 1827  #### Returns\n 1828  \n 1829: `Promise`<`any`\\>\n 1830  \n 1831  ___\n ....\n 1833  ### <a id=\"removeliquidity\" name=\"removeliquidity\"></a> removeLiquidity\n 1834  \n 1835: ▸ **removeLiquidity**(`liquidityTokenAmount`, `amount0Min?`, `amount1Min?`, `deadline?`): `Promise`<`TransactionResponse`\\>\n 1836  \n 1837  **`Desc`**\n ....\n 1860  #### Returns\n 1861  \n 1862: `Promise`<`TransactionResponse`\\>\n 1863  \n 1864  Ethers transaction object.\n ....\n 1868  ### <a id=\"removeliquidityimbalance\" name=\"removeliquidityimbalance\"></a> removeLiquidityImbalance\n 1869  \n 1870: ▸ **removeLiquidityImbalance**(`amount0`, `amount1`, `maxBurnAmount?`, `deadline?`): `Promise`<`any`\\>\n 1871  \n 1872  #### Parameters\n ....\n 1881  #### Returns\n 1882  \n 1883: `Promise`<`any`\\>\n 1884  \n 1885  ___\n ....\n 1887  ### <a id=\"removeliquidityonetoken\" name=\"removeliquidityonetoken\"></a> removeLiquidityOneToken\n 1888  \n 1889: ▸ **removeLiquidityOneToken**(`lpAmount`, `tokenIndex`, `amountMin?`, `deadline?`): `Promise`<`any`\\>\n 1890  \n 1891  #### Parameters\n ....\n 1900  #### Returns\n 1901  \n 1902: `Promise`<`any`\\>\n 1903  \n 1904  ___\n ....\n 1906  ### <a id=\"sendtransaction\" name=\"sendtransaction\"></a> sendTransaction\n 1907  \n 1908: ▸ **sendTransaction**(`transactionRequest`, `chain`): `Promise`<`TransactionResponse`\\>\n 1909  \n 1910  #### Parameters\n ....\n 1917  #### Returns\n 1918  \n 1919: `Promise`<`TransactionResponse`\\>\n 1920  \n 1921  #### Inherited from\n ....\n 2120  ### <a id=\"txoverrides\" name=\"txoverrides\"></a> txOverrides\n 2121  \n 2122: ▸ **txOverrides**(`chain`): `Promise`<`any`\\>\n 2123  \n 2124  #### Parameters\n ....\n 2130  #### Returns\n 2131  \n 2132: `Promise`<`any`\\>\n 2133  \n 2134  #### Inherited from\n\n~/Sandbox/hop/packages/sdk/docs/classes/Base.md:\n  197  ### <a id=\"getcontract\" name=\"getcontract\"></a> getContract\n  198  \n  199: • **getContract**: (`factory`: `Factory`, `address`: `string`, `provider`: [`TProvider`](../modules.md#tprovider)) => `Promise`<`any`\\> = `getContract`\n  200  \n  201  #### Type declaration\n  202  \n  203: ▸ (`factory`, `address`, `provider`): `Promise`<`any`\\>\n  204  \n  205  ##### Parameters\n  ...\n  213  ##### Returns\n  214  \n  215: `Promise`<`any`\\>\n  216  \n  217  ___\n  ...\n  271  ### <a id=\"_getbonderaddress\" name=\"_getbonderaddress\"></a> \\_getBonderAddress\n  272  \n  273: ▸ `Protected` **_getBonderAddress**(`token`, `sourceChain`, `destinationChain`): `Promise`<`string`\\>\n  274  \n  275  #### Parameters\n  ...\n  283  #### Returns\n  284  \n  285: `Promise`<`string`\\>\n  286  \n  287  ___\n  ...\n  289  ### <a id=\"_getmessengerwrapperaddress\" name=\"_getmessengerwrapperaddress\"></a> \\_getMessengerWrapperAddress\n  290  \n  291: ▸ `Protected` **_getMessengerWrapperAddress**(`token`, `destinationChain`): `Promise`<`string`\\>\n  292  \n  293  #### Parameters\n  ...\n  300  #### Returns\n  301  \n  302: `Promise`<`string`\\>\n  303  \n  304  ___\n  ...\n  306  ### <a id=\"estimateoptimisml1feefromdata\" name=\"estimateoptimisml1feefromdata\"></a> estimateOptimismL1FeeFromData\n  307  \n  308: ▸ **estimateOptimismL1FeeFromData**(`gasLimit`, `data?`, `to?`): `Promise`<`any`\\>\n  309  \n  310  #### Parameters\n  ...\n  318  #### Returns\n  319  \n  320: `Promise`<`any`\\>\n  321  \n  322  ___\n  ...\n  324  ### <a id=\"fetchconfigfroms3\" name=\"fetchconfigfroms3\"></a> fetchConfigFromS3\n  325  \n  326: ▸ **fetchConfigFromS3**(): `Promise`<`any`\\>\n  327  \n  328  #### Returns\n  329  \n  330: `Promise`<`any`\\>\n  331  \n  332  ___\n  ...\n  361  ### <a id=\"getbumpedgasprice\" name=\"getbumpedgasprice\"></a> getBumpedGasPrice\n  362  \n  363: ▸ **getBumpedGasPrice**(`signer`, `percent`): `Promise`<`BigNumber`\\>\n  364  \n  365  **`Desc`**\n  ...\n  386  #### Returns\n  387  \n  388: `Promise`<`BigNumber`\\>\n  389  \n  390  Bumped as price as BigNumber\n  ...\n  543  ### <a id=\"getfeebps\" name=\"getfeebps\"></a> getFeeBps\n  544  \n  545: ▸ **getFeeBps**(`token`, `destinationChain`): `Promise`<`number`\\>\n  546  \n  547  #### Parameters\n  ...\n  554  #### Returns\n  555  \n  556: `Promise`<`number`\\>\n  557  \n  558  ___\n  ...\n  814  ### <a id=\"getrelayerfee\" name=\"getrelayerfee\"></a> getRelayerFee\n  815  \n  816: ▸ **getRelayerFee**(`destinationChain`, `tokenSymbol`): `Promise`<`BigNumber`\\>\n  817  \n  818  #### Parameters\n  ...\n  825  #### Returns\n  826  \n  827: `Promise`<`BigNumber`\\>\n  828  \n  829  ___\n  ...\n  831  ### <a id=\"gets3configdata\" name=\"gets3configdata\"></a> getS3ConfigData\n  832  \n  833: ▸ **getS3ConfigData**(): `Promise`<`any`\\>\n  834  \n  835  #### Returns\n  836  \n  837: `Promise`<`any`\\>\n  838  \n  839  ___\n  ...\n  841  ### <a id=\"getsigneraddress\" name=\"getsigneraddress\"></a> getSignerAddress\n  842  \n  843: ▸ **getSignerAddress**(): `Promise`<`string`\\>\n  844  \n  845  **`Desc`**\n  ...\n  859  #### Returns\n  860  \n  861: `Promise`<`string`\\>\n  862  \n  863  Ethers signer address.\n  ...\n  867  ### <a id=\"getsignerorprovider\" name=\"getsignerorprovider\"></a> getSignerOrProvider\n  868  \n  869: ▸ **getSignerOrProvider**(`chain`, `signer?`): `Promise`<`Provider` \\| `Signer`\\>\n  870  \n  871  **`Desc`**\n  ...\n  883  #### Returns\n  884  \n  885: `Promise`<`Provider` \\| `Signer`\\>\n  886  \n  887  Ethers signer or provider\n  ...\n  937  ### <a id=\"gettransferstatus\" name=\"gettransferstatus\"></a> getTransferStatus\n  938  \n  939: ▸ **getTransferStatus**(`transferIdOrTxHash`): `Promise`<`any`\\>\n  940  \n  941  #### Parameters\n  ...\n  947  #### Returns\n  948  \n  949: `Promise`<`any`\\>\n  950  \n  951  ___\n  ...\n  969  ### <a id=\"init\" name=\"init\"></a> init\n  970  \n  971: ▸ **init**(): `Promise`<`void`\\>\n  972  \n  973  #### Returns\n  974  \n  975: `Promise`<`void`\\>\n  976  \n  977  ___\n  ...\n 1011  ### <a id=\"sendtransaction\" name=\"sendtransaction\"></a> sendTransaction\n 1012  \n 1013: ▸ **sendTransaction**(`transactionRequest`, `chain`): `Promise`<`TransactionResponse`\\>\n 1014  \n 1015  #### Parameters\n ....\n 1022  #### Returns\n 1023  \n 1024: `Promise`<`TransactionResponse`\\>\n 1025  \n 1026  ___\n ....\n 1185  ### <a id=\"txoverrides\" name=\"txoverrides\"></a> txOverrides\n 1186  \n 1187: ▸ **txOverrides**(`chain`): `Promise`<`any`\\>\n 1188  \n 1189  #### Parameters\n ....\n 1195  #### Returns\n 1196  \n 1197: `Promise`<`any`\\>\n 1198  \n\n~/Sandbox/hop/packages/sdk/docs/classes/CanonicalBridge.md:\n  272  ### <a id=\"getcontract\" name=\"getcontract\"></a> getContract\n  273  \n  274: • **getContract**: (`factory`: `Factory`, `address`: `string`, `provider`: [`TProvider`](../modules.md#tprovider)) => `Promise`<`any`\\> = `getContract`\n  275  \n  276  #### Type declaration\n  277  \n  278: ▸ (`factory`, `address`, `provider`): `Promise`<`any`\\>\n  279  \n  280  ##### Parameters\n  ...\n  288  ##### Returns\n  289  \n  290: `Promise`<`any`\\>\n  291  \n  292  #### Inherited from\n  ...\n  398  ### <a id=\"_getbonderaddress\" name=\"_getbonderaddress\"></a> \\_getBonderAddress\n  399  \n  400: ▸ `Protected` **_getBonderAddress**(`token`, `sourceChain`, `destinationChain`): `Promise`<`string`\\>\n  401  \n  402  #### Parameters\n  ...\n  410  #### Returns\n  411  \n  412: `Promise`<`string`\\>\n  413  \n  414  #### Inherited from\n  ...\n  420  ### <a id=\"_getmessengerwrapperaddress\" name=\"_getmessengerwrapperaddress\"></a> \\_getMessengerWrapperAddress\n  421  \n  422: ▸ `Protected` **_getMessengerWrapperAddress**(`token`, `destinationChain`): `Promise`<`string`\\>\n  423  \n  424  #### Parameters\n  ...\n  431  #### Returns\n  432  \n  433: `Promise`<`string`\\>\n  434  \n  435  #### Inherited from\n  ...\n  441  ### <a id=\"approvedeposit\" name=\"approvedeposit\"></a> approveDeposit\n  442  \n  443: ▸ **approveDeposit**(`amount`, `chain?`): `Promise`<`TransactionResponse`\\>\n  444  \n  445  **`Desc`**\n  ...\n  457  #### Returns\n  458  \n  459: `Promise`<`TransactionResponse`\\>\n  460  \n  461  Ethers transaction object.\n  ...\n  465  ### <a id=\"approvewithdraw\" name=\"approvewithdraw\"></a> approveWithdraw\n  466  \n  467: ▸ **approveWithdraw**(`amount`): `Promise`<`TransactionResponse`\\>\n  468  \n  469  **`Desc`**\n  ...\n  480  #### Returns\n  481  \n  482: `Promise`<`TransactionResponse`\\>\n  483  \n  484  Ethers transaction object.\n  ...\n  510  ### <a id=\"deposit\" name=\"deposit\"></a> deposit\n  511  \n  512: ▸ **deposit**(`amount`, `chain?`): `Promise`<`any`\\>\n  513  \n  514  **`Desc`**\n  ...\n  525  #### Returns\n  526  \n  527: `Promise`<`any`\\>\n  528  \n  529  Ethers transaction object.\n  ...\n  533  ### <a id=\"estimateoptimisml1feefromdata\" name=\"estimateoptimisml1feefromdata\"></a> estimateOptimismL1FeeFromData\n  534  \n  535: ▸ **estimateOptimismL1FeeFromData**(`gasLimit`, `data?`, `to?`): `Promise`<`any`\\>\n  536  \n  537  #### Parameters\n  ...\n  545  #### Returns\n  546  \n  547: `Promise`<`any`\\>\n  548  \n  549  #### Inherited from\n  ...\n  555  ### <a id=\"exit\" name=\"exit\"></a> exit\n  556  \n  557: ▸ **exit**(`txHash`, `chain`): `Promise`<`TransactionResponse`\\>\n  558  \n  559  **`Desc`**\n  ...\n  572  #### Returns\n  573  \n  574: `Promise`<`TransactionResponse`\\>\n  575  \n  576  Ethers transaction object.\n  ...\n  580  ### <a id=\"fetchconfigfroms3\" name=\"fetchconfigfroms3\"></a> fetchConfigFromS3\n  581  \n  582: ▸ **fetchConfigFromS3**(): `Promise`<`any`\\>\n  583  \n  584  #### Returns\n  585  \n  586: `Promise`<`any`\\>\n  587  \n  588  #### Inherited from\n  ...\n  608  ### <a id=\"getambbridge\" name=\"getambbridge\"></a> getAmbBridge\n  609  \n  610: ▸ **getAmbBridge**(`chain?`): `Promise`<`any`\\>\n  611  \n  612  #### Parameters\n  ...\n  618  #### Returns\n  619  \n  620: `Promise`<`any`\\>\n  621  \n  622  ___\n  ...\n  645  ### <a id=\"getbumpedgasprice\" name=\"getbumpedgasprice\"></a> getBumpedGasPrice\n  646  \n  647: ▸ **getBumpedGasPrice**(`signer`, `percent`): `Promise`<`BigNumber`\\>\n  648  \n  649  **`Desc`**\n  ...\n  670  #### Returns\n  671  \n  672: `Promise`<`BigNumber`\\>\n  673  \n  674  Bumped as price as BigNumber\n  ...\n  903  ### <a id=\"getfeebps\" name=\"getfeebps\"></a> getFeeBps\n  904  \n  905: ▸ **getFeeBps**(`token`, `destinationChain`): `Promise`<`number`\\>\n  906  \n  907  #### Parameters\n  ...\n  914  #### Returns\n  915  \n  916: `Promise`<`number`\\>\n  917  \n  918  #### Inherited from\n  ...\n  966  ### <a id=\"getl1canonicalbridge\" name=\"getl1canonicalbridge\"></a> getL1CanonicalBridge\n  967  \n  968: ▸ **getL1CanonicalBridge**(): `Promise`<`any`\\>\n  969  \n  970  #### Returns\n  971  \n  972: `Promise`<`any`\\>\n  973  \n  974  ___\n  ...\n 1133  ### <a id=\"getl2canonicalbridge\" name=\"getl2canonicalbridge\"></a> getL2CanonicalBridge\n 1134  \n 1135: ▸ **getL2CanonicalBridge**(): `Promise`<`any`\\>\n 1136  \n 1137  #### Returns\n 1138  \n 1139: `Promise`<`any`\\>\n 1140  \n 1141  ___\n ....\n 1284  ### <a id=\"getrelayerfee\" name=\"getrelayerfee\"></a> getRelayerFee\n 1285  \n 1286: ▸ **getRelayerFee**(`destinationChain`, `tokenSymbol`): `Promise`<`BigNumber`\\>\n 1287  \n 1288  #### Parameters\n ....\n 1295  #### Returns\n 1296  \n 1297: `Promise`<`BigNumber`\\>\n 1298  \n 1299  #### Inherited from\n ....\n 1305  ### <a id=\"gets3configdata\" name=\"gets3configdata\"></a> getS3ConfigData\n 1306  \n 1307: ▸ **getS3ConfigData**(): `Promise`<`any`\\>\n 1308  \n 1309  #### Returns\n 1310  \n 1311: `Promise`<`any`\\>\n 1312  \n 1313  #### Inherited from\n ....\n 1319  ### <a id=\"getsigneraddress\" name=\"getsigneraddress\"></a> getSignerAddress\n 1320  \n 1321: ▸ **getSignerAddress**(): `Promise`<`string`\\>\n 1322  \n 1323  **`Desc`**\n ....\n 1337  #### Returns\n 1338  \n 1339: `Promise`<`string`\\>\n 1340  \n 1341  Ethers signer address.\n ....\n 1349  ### <a id=\"getsignerorprovider\" name=\"getsignerorprovider\"></a> getSignerOrProvider\n 1350  \n 1351: ▸ **getSignerOrProvider**(`chain`, `signer?`): `Promise`<`Provider` \\| `Signer`\\>\n 1352  \n 1353  **`Desc`**\n ....\n 1365  #### Returns\n 1366  \n 1367: `Promise`<`Provider` \\| `Signer`\\>\n 1368  \n 1369  Ethers signer or provider\n ....\n 1439  ### <a id=\"gettransferstatus\" name=\"gettransferstatus\"></a> getTransferStatus\n 1440  \n 1441: ▸ **getTransferStatus**(`transferIdOrTxHash`): `Promise`<`any`\\>\n 1442  \n 1443  #### Parameters\n ....\n 1449  #### Returns\n 1450  \n 1451: `Promise`<`any`\\>\n 1452  \n 1453  #### Inherited from\n ....\n 1495  ### <a id=\"init\" name=\"init\"></a> init\n 1496  \n 1497: ▸ **init**(): `Promise`<`void`\\>\n 1498  \n 1499  #### Returns\n 1500  \n 1501: `Promise`<`void`\\>\n 1502  \n 1503  #### Inherited from\n ....\n 1549  ### <a id=\"sendtransaction\" name=\"sendtransaction\"></a> sendTransaction\n 1550  \n 1551: ▸ **sendTransaction**(`transactionRequest`, `chain`): `Promise`<`TransactionResponse`\\>\n 1552  \n 1553  #### Parameters\n ....\n 1560  #### Returns\n 1561  \n 1562: `Promise`<`TransactionResponse`\\>\n 1563  \n 1564  #### Inherited from\n ....\n 1799  ### <a id=\"txoverrides\" name=\"txoverrides\"></a> txOverrides\n 1800  \n 1801: ▸ **txOverrides**(`chain`): `Promise`<`any`\\>\n 1802  \n 1803  #### Parameters\n ....\n 1809  #### Returns\n 1810  \n 1811: `Promise`<`any`\\>\n 1812  \n 1813  #### Inherited from\n ....\n 1819  ### <a id=\"withdraw\" name=\"withdraw\"></a> withdraw\n 1820  \n 1821: ▸ **withdraw**(`amount`, `chain?`): `Promise`<`any`\\>\n 1822  \n 1823  **`Desc`**\n ....\n 1834  #### Returns\n 1835  \n 1836: `Promise`<`any`\\>\n 1837  \n 1838  Ethers transaction object.\n\n~/Sandbox/hop/packages/sdk/docs/classes/FallbackProvider.md:\n  123  ### <a id=\"call\" name=\"call\"></a> call\n  124  \n  125: ▸ **call**(`transaction`, `blockTag?`): `Promise`<`string`\\>\n  126  \n  127  #### Parameters\n  ...\n  130  | :------ | :------ |\n  131  | `transaction` | `Deferrable`<`TransactionRequest`\\> |\n  132: | `blockTag?` | `BlockTag` \\| `Promise`<`BlockTag`\\> |\n  133  \n  134  #### Returns\n  135  \n  136: `Promise`<`string`\\>\n  137  \n  138  #### Implementation of\n  ...\n  144  ### <a id=\"detectnetwork\" name=\"detectnetwork\"></a> detectNetwork\n  145  \n  146: ▸ **detectNetwork**(): `Promise`<`Network`\\>\n  147  \n  148  #### Returns\n  149  \n  150: `Promise`<`Network`\\>\n  151  \n  152  ___\n  ...\n  175  ### <a id=\"estimategas\" name=\"estimategas\"></a> estimateGas\n  176  \n  177: ▸ **estimateGas**(`transaction`): `Promise`<`BigNumber`\\>\n  178  \n  179  #### Parameters\n  ...\n  185  #### Returns\n  186  \n  187: `Promise`<`BigNumber`\\>\n  188  \n  189  #### Implementation of\n  ...\n  195  ### <a id=\"getavatar\" name=\"getavatar\"></a> getAvatar\n  196  \n  197: ▸ **getAvatar**(`address`): `Promise`<`string`\\>\n  198  \n  199  #### Parameters\n  ...\n  205  #### Returns\n  206  \n  207: `Promise`<`string`\\>\n  208  \n  209  ___\n  ...\n  211  ### <a id=\"getbalance\" name=\"getbalance\"></a> getBalance\n  212  \n  213: ▸ **getBalance**(`addressOrName`, `blockTag?`): `Promise`<`BigNumber`\\>\n  214  \n  215  #### Parameters\n  ...\n  217  | Name | Type |\n  218  | :------ | :------ |\n  219: | `addressOrName` | `string` \\| `Promise`<`string`\\> |\n  220: | `blockTag?` | `BlockTag` \\| `Promise`<`BlockTag`\\> |\n  221  \n  222  #### Returns\n  223  \n  224: `Promise`<`BigNumber`\\>\n  225  \n  226  #### Implementation of\n  ...\n  232  ### <a id=\"getblock\" name=\"getblock\"></a> getBlock\n  233  \n  234: ▸ **getBlock**(`blockHashOrBlockTag`): `Promise`<`Block`\\>\n  235  \n  236  #### Parameters\n  ...\n  238  | Name | Type |\n  239  | :------ | :------ |\n  240: | `blockHashOrBlockTag` | `BlockTag` \\| `Promise`<`BlockTag`\\> |\n  241  \n  242  #### Returns\n  243  \n  244: `Promise`<`Block`\\>\n  245  \n  246  #### Implementation of\n  ...\n  252  ### <a id=\"getblocknumber\" name=\"getblocknumber\"></a> getBlockNumber\n  253  \n  254: ▸ **getBlockNumber**(): `Promise`<`number`\\>\n  255  \n  256  #### Returns\n  257  \n  258: `Promise`<`number`\\>\n  259  \n  260  #### Implementation of\n  ...\n  266  ### <a id=\"getblockwithtransactions\" name=\"getblockwithtransactions\"></a> getBlockWithTransactions\n  267  \n  268: ▸ **getBlockWithTransactions**(`blockHashOrBlockTag`): `Promise`<`BlockWithTransactions`\\>\n  269  \n  270  #### Parameters\n  ...\n  272  | Name | Type |\n  273  | :------ | :------ |\n  274: | `blockHashOrBlockTag` | `BlockTag` \\| `Promise`<`BlockTag`\\> |\n  275  \n  276  #### Returns\n  277  \n  278: `Promise`<`BlockWithTransactions`\\>\n  279  \n  280  #### Implementation of\n  ...\n  286  ### <a id=\"getcode\" name=\"getcode\"></a> getCode\n  287  \n  288: ▸ **getCode**(`addressOrName`, `blockTag?`): `Promise`<`string`\\>\n  289  \n  290  #### Parameters\n  ...\n  292  | Name | Type |\n  293  | :------ | :------ |\n  294: | `addressOrName` | `string` \\| `Promise`<`string`\\> |\n  295: | `blockTag?` | `BlockTag` \\| `Promise`<`BlockTag`\\> |\n  296  \n  297  #### Returns\n  298  \n  299: `Promise`<`string`\\>\n  300  \n  301  #### Implementation of\n  ...\n  307  ### <a id=\"getfeedata\" name=\"getfeedata\"></a> getFeeData\n  308  \n  309: ▸ **getFeeData**(): `Promise`<`any`\\>\n  310  \n  311  #### Returns\n  312  \n  313: `Promise`<`any`\\>\n  314  \n  315  #### Implementation of\n  ...\n  321  ### <a id=\"getgasprice\" name=\"getgasprice\"></a> getGasPrice\n  322  \n  323: ▸ **getGasPrice**(): `Promise`<`BigNumber`\\>\n  324  \n  325  #### Returns\n  326  \n  327: `Promise`<`BigNumber`\\>\n  328  \n  329  #### Implementation of\n  ...\n  335  ### <a id=\"getlogs\" name=\"getlogs\"></a> getLogs\n  336  \n  337: ▸ **getLogs**(`filter`): `Promise`<`Log`[]\\>\n  338  \n  339  #### Parameters\n  ...\n  345  #### Returns\n  346  \n  347: `Promise`<`Log`[]\\>\n  348  \n  349  #### Implementation of\n  ...\n  355  ### <a id=\"getnetwork\" name=\"getnetwork\"></a> getNetwork\n  356  \n  357: ▸ **getNetwork**(): `Promise`<`Network`\\>\n  358  \n  359  #### Returns\n  360  \n  361: `Promise`<`Network`\\>\n  362  \n  363  #### Implementation of\n  ...\n  369  ### <a id=\"getresolver\" name=\"getresolver\"></a> getResolver\n  370  \n  371: ▸ **getResolver**(`address`): `Promise`<`string`\\>\n  372  \n  373  #### Parameters\n  ...\n  379  #### Returns\n  380  \n  381: `Promise`<`string`\\>\n  382  \n  383  ___\n  ...\n  385  ### <a id=\"getstorageat\" name=\"getstorageat\"></a> getStorageAt\n  386  \n  387: ▸ **getStorageAt**(`addressOrName`, `position`, `blockTag?`): `Promise`<`string`\\>\n  388  \n  389  #### Parameters\n  ...\n  391  | Name | Type |\n  392  | :------ | :------ |\n  393: | `addressOrName` | `string` \\| `Promise`<`string`\\> |\n  394: | `position` | `BigNumberish` \\| `Promise`<`BigNumberish`\\> |\n  395: | `blockTag?` | `BlockTag` \\| `Promise`<`BlockTag`\\> |\n  396  \n  397  #### Returns\n  398  \n  399: `Promise`<`string`\\>\n  400  \n  401  #### Implementation of\n  ...\n  407  ### <a id=\"gettransaction\" name=\"gettransaction\"></a> getTransaction\n  408  \n  409: ▸ **getTransaction**(`transactionHash`): `Promise`<`TransactionResponse`\\>\n  410  \n  411  #### Parameters\n  ...\n  417  #### Returns\n  418  \n  419: `Promise`<`TransactionResponse`\\>\n  420  \n  421  #### Implementation of\n  ...\n  427  ### <a id=\"gettransactioncount\" name=\"gettransactioncount\"></a> getTransactionCount\n  428  \n  429: ▸ **getTransactionCount**(`addressOrName`, `blockTag?`): `Promise`<`number`\\>\n  430  \n  431  #### Parameters\n  ...\n  433  | Name | Type |\n  434  | :------ | :------ |\n  435: | `addressOrName` | `string` \\| `Promise`<`string`\\> |\n  436: | `blockTag?` | `BlockTag` \\| `Promise`<`BlockTag`\\> |\n  437  \n  438  #### Returns\n  439  \n  440: `Promise`<`number`\\>\n  441  \n  442  #### Implementation of\n  ...\n  448  ### <a id=\"gettransactionreceipt\" name=\"gettransactionreceipt\"></a> getTransactionReceipt\n  449  \n  450: ▸ **getTransactionReceipt**(`transactionHash`): `Promise`<`TransactionReceipt`\\>\n  451  \n  452  #### Parameters\n  ...\n  458  #### Returns\n  459  \n  460: `Promise`<`TransactionReceipt`\\>\n  461  \n  462  #### Implementation of\n  ...\n  508  ### <a id=\"lookupaddress\" name=\"lookupaddress\"></a> lookupAddress\n  509  \n  510: ▸ **lookupAddress**(`address`): `Promise`<`string`\\>\n  511  \n  512  #### Parameters\n  ...\n  514  | Name | Type |\n  515  | :------ | :------ |\n  516: | `address` | `string` \\| `Promise`<`string`\\> |\n  517  \n  518  #### Returns\n  519  \n  520: `Promise`<`string`\\>\n  521  \n  522  #### Implementation of\n  ...\n  632  ### <a id=\"resolvename\" name=\"resolvename\"></a> resolveName\n  633  \n  634: ▸ **resolveName**(`name`): `Promise`<`string`\\>\n  635  \n  636  #### Parameters\n  ...\n  638  | Name | Type |\n  639  | :------ | :------ |\n  640: | `name` | `string` \\| `Promise`<`string`\\> |\n  641  \n  642  #### Returns\n  643  \n  644: `Promise`<`string`\\>\n  645  \n  646  #### Implementation of\n  ...\n  652  ### <a id=\"sendtransaction\" name=\"sendtransaction\"></a> sendTransaction\n  653  \n  654: ▸ **sendTransaction**(`signedTransaction`): `Promise`<`TransactionResponse`\\>\n  655  \n  656  #### Parameters\n  ...\n  658  | Name | Type |\n  659  | :------ | :------ |\n  660: | `signedTransaction` | `string` \\| `Promise`<`string`\\> |\n  661  \n  662  #### Returns\n  663  \n  664: `Promise`<`TransactionResponse`\\>\n  665  \n  666  #### Implementation of\n  ...\n  672  ### <a id=\"tryprovider\" name=\"tryprovider\"></a> tryProvider\n  673  \n  674: ▸ **tryProvider**(`fn`): `Promise`<`any`\\>\n  675  \n  676  #### Parameters\n  ...\n  682  #### Returns\n  683  \n  684: `Promise`<`any`\\>\n  685  \n  686  ___\n  ...\n  688  ### <a id=\"waitfortransaction\" name=\"waitfortransaction\"></a> waitForTransaction\n  689  \n  690: ▸ **waitForTransaction**(`transactionHash`, `confirmations?`, `timeout?`): `Promise`<`TransactionReceipt`\\>\n  691  \n  692  #### Parameters\n  ...\n  700  #### Returns\n  701  \n  702: `Promise`<`TransactionReceipt`\\>\n  703  \n  704  #### Implementation of\n\n~/Sandbox/hop/packages/sdk/docs/classes/Hop.md:\n  290  ### <a id=\"getcontract\" name=\"getcontract\"></a> getContract\n  291  \n  292: • **getContract**: (`factory`: `Factory`, `address`: `string`, `provider`: [`TProvider`](../modules.md#tprovider)) => `Promise`<`any`\\> = `getContract`\n  293  \n  294  #### Type declaration\n  295  \n  296: ▸ (`factory`, `address`, `provider`): `Promise`<`any`\\>\n  297  \n  298  ##### Parameters\n  ...\n  306  ##### Returns\n  307  \n  308: `Promise`<`any`\\>\n  309  \n  310  #### Inherited from\n  ...\n  447  ### <a id=\"_getbonderaddress\" name=\"_getbonderaddress\"></a> \\_getBonderAddress\n  448  \n  449: ▸ `Protected` **_getBonderAddress**(`token`, `sourceChain`, `destinationChain`): `Promise`<`string`\\>\n  450  \n  451  #### Parameters\n  ...\n  459  #### Returns\n  460  \n  461: `Promise`<`string`\\>\n  462  \n  463  #### Inherited from\n  ...\n  469  ### <a id=\"_getmessengerwrapperaddress\" name=\"_getmessengerwrapperaddress\"></a> \\_getMessengerWrapperAddress\n  470  \n  471: ▸ `Protected` **_getMessengerWrapperAddress**(`token`, `destinationChain`): `Promise`<`string`\\>\n  472  \n  473  #### Parameters\n  ...\n  480  #### Returns\n  481  \n  482: `Promise`<`string`\\>\n  483  \n  484  #### Inherited from\n  ...\n  587  ### <a id=\"estimateoptimisml1feefromdata\" name=\"estimateoptimisml1feefromdata\"></a> estimateOptimismL1FeeFromData\n  588  \n  589: ▸ **estimateOptimismL1FeeFromData**(`gasLimit`, `data?`, `to?`): `Promise`<`any`\\>\n  590  \n  591  #### Parameters\n  ...\n  599  #### Returns\n  600  \n  601: `Promise`<`any`\\>\n  602  \n  603  #### Inherited from\n  ...\n  609  ### <a id=\"fetchconfigfroms3\" name=\"fetchconfigfroms3\"></a> fetchConfigFromS3\n  610  \n  611: ▸ **fetchConfigFromS3**(): `Promise`<`any`\\>\n  612  \n  613  #### Returns\n  614  \n  615: `Promise`<`any`\\>\n  616  \n  617  #### Inherited from\n  ...\n  658  ### <a id=\"getbumpedgasprice\" name=\"getbumpedgasprice\"></a> getBumpedGasPrice\n  659  \n  660: ▸ **getBumpedGasPrice**(`signer`, `percent`): `Promise`<`BigNumber`\\>\n  661  \n  662  **`Desc`**\n  ...\n  683  #### Returns\n  684  \n  685: `Promise`<`BigNumber`\\>\n  686  \n  687  Bumped as price as BigNumber\n  ...\n  884  ### <a id=\"getfeebps\" name=\"getfeebps\"></a> getFeeBps\n  885  \n  886: ▸ **getFeeBps**(`token`, `destinationChain`): `Promise`<`number`\\>\n  887  \n  888  #### Parameters\n  ...\n  895  #### Returns\n  896  \n  897: `Promise`<`number`\\>\n  898  \n  899  #### Inherited from\n  ...\n 1219  ### <a id=\"getrelayerfee\" name=\"getrelayerfee\"></a> getRelayerFee\n 1220  \n 1221: ▸ **getRelayerFee**(`destinationChain`, `tokenSymbol`): `Promise`<`BigNumber`\\>\n 1222  \n 1223  #### Parameters\n ....\n 1230  #### Returns\n 1231  \n 1232: `Promise`<`BigNumber`\\>\n 1233  \n 1234  #### Inherited from\n ....\n 1240  ### <a id=\"gets3configdata\" name=\"gets3configdata\"></a> getS3ConfigData\n 1241  \n 1242: ▸ **getS3ConfigData**(): `Promise`<`any`\\>\n 1243  \n 1244  #### Returns\n 1245  \n 1246: `Promise`<`any`\\>\n 1247  \n 1248  #### Inherited from\n ....\n 1254  ### <a id=\"getsigneraddress\" name=\"getsigneraddress\"></a> getSignerAddress\n 1255  \n 1256: ▸ **getSignerAddress**(): `Promise`<`string`\\>\n 1257  \n 1258  **`Desc`**\n ....\n 1272  #### Returns\n 1273  \n 1274: `Promise`<`string`\\>\n 1275  \n 1276  Ethers signer address.\n ....\n 1284  ### <a id=\"getsignerorprovider\" name=\"getsignerorprovider\"></a> getSignerOrProvider\n 1285  \n 1286: ▸ **getSignerOrProvider**(`chain`, `signer?`): `Promise`<`Provider` \\| `Signer`\\>\n 1287  \n 1288  **`Desc`**\n ....\n 1300  #### Returns\n 1301  \n 1302: `Promise`<`Provider` \\| `Signer`\\>\n 1303  \n 1304  Ethers signer or provider\n ....\n 1374  ### <a id=\"gettransferstatus\" name=\"gettransferstatus\"></a> getTransferStatus\n 1375  \n 1376: ▸ **getTransferStatus**(`transferIdOrTxHash`): `Promise`<`any`\\>\n 1377  \n 1378  #### Parameters\n ....\n 1384  #### Returns\n 1385  \n 1386: `Promise`<`any`\\>\n 1387  \n 1388  #### Inherited from\n ....\n 1414  ### <a id=\"init\" name=\"init\"></a> init\n 1415  \n 1416: ▸ **init**(): `Promise`<`void`\\>\n 1417  \n 1418  #### Returns\n 1419  \n 1420: `Promise`<`void`\\>\n 1421  \n 1422  #### Inherited from\n ....\n 1468  ### <a id=\"sendtransaction\" name=\"sendtransaction\"></a> sendTransaction\n 1469  \n 1470: ▸ **sendTransaction**(`transactionRequest`, `chain`): `Promise`<`TransactionResponse`\\>\n 1471  \n 1472  #### Parameters\n ....\n 1479  #### Returns\n 1480  \n 1481: `Promise`<`TransactionResponse`\\>\n 1482  \n 1483  #### Inherited from\n ....\n 1698  ### <a id=\"txoverrides\" name=\"txoverrides\"></a> txOverrides\n 1699  \n 1700: ▸ **txOverrides**(`chain`): `Promise`<`any`\\>\n 1701  \n 1702  #### Parameters\n ....\n 1708  #### Returns\n 1709  \n 1710: `Promise`<`any`\\>\n 1711  \n 1712  #### Inherited from\n\n~/Sandbox/hop/packages/sdk/docs/classes/HopBridge.md:\n  356  ### <a id=\"getcontract\" name=\"getcontract\"></a> getContract\n  357  \n  358: • **getContract**: (`factory`: `Factory`, `address`: `string`, `provider`: [`TProvider`](../modules.md#tprovider)) => `Promise`<`any`\\> = `getContract`\n  359  \n  360  #### Type declaration\n  361  \n  362: ▸ (`factory`, `address`, `provider`): `Promise`<`any`\\>\n  363  \n  364  ##### Parameters\n  ...\n  372  ##### Returns\n  373  \n  374: `Promise`<`any`\\>\n  375  \n  376  #### Inherited from\n  ...\n  504  ### <a id=\"_getbonderaddress\" name=\"_getbonderaddress\"></a> \\_getBonderAddress\n  505  \n  506: ▸ `Protected` **_getBonderAddress**(`token`, `sourceChain`, `destinationChain`): `Promise`<`string`\\>\n  507  \n  508  #### Parameters\n  ...\n  516  #### Returns\n  517  \n  518: `Promise`<`string`\\>\n  519  \n  520  #### Inherited from\n  ...\n  526  ### <a id=\"_getmessengerwrapperaddress\" name=\"_getmessengerwrapperaddress\"></a> \\_getMessengerWrapperAddress\n  527  \n  528: ▸ `Protected` **_getMessengerWrapperAddress**(`token`, `destinationChain`): `Promise`<`string`\\>\n  529  \n  530  #### Parameters\n  ...\n  537  #### Returns\n  538  \n  539: `Promise`<`string`\\>\n  540  \n  541  #### Inherited from\n  ...\n  547  ### <a id=\"addliquidity\" name=\"addliquidity\"></a> addLiquidity\n  548  \n  549: ▸ **addLiquidity**(`amount0Desired`, `amount1Desired`, `chain?`, `options?`): `Promise`<`TransactionResponse`\\>\n  550  \n  551  **`Desc`**\n  ...\n  564  #### Returns\n  565  \n  566: `Promise`<`TransactionResponse`\\>\n  567  \n  568  Ethers transaction object.\n  ...\n  589  ### <a id=\"calculatewithdrawonetoken\" name=\"calculatewithdrawonetoken\"></a> calculateWithdrawOneToken\n  590  \n  591: ▸ **calculateWithdrawOneToken**(`tokenAmount`, `tokenIndex`, `chain?`): `Promise`<`any`\\>\n  592  \n  593  #### Parameters\n  ...\n  601  #### Returns\n  602  \n  603: `Promise`<`any`\\>\n  604  \n  605  ___\n  ...\n  607  ### <a id=\"challengeperiod\" name=\"challengeperiod\"></a> challengePeriod\n  608  \n  609: ▸ `Readonly` **challengePeriod**(): `Promise`<`BigNumber`\\>\n  610  \n  611  **`Desc`**\n  ...\n  615  #### Returns\n  616  \n  617: `Promise`<`BigNumber`\\>\n  618  \n  619  The challenge period for the bridge as BigNumber.\n  ...\n  657  ### <a id=\"estimatebondwithdrawalgaslimit\" name=\"estimatebondwithdrawalgaslimit\"></a> estimateBondWithdrawalGasLimit\n  658  \n  659: ▸ **estimateBondWithdrawalGasLimit**(`sourceChain`, `destinationChain`): `Promise`<`any`\\>\n  660  \n  661  #### Parameters\n  ...\n  668  #### Returns\n  669  \n  670: `Promise`<`any`\\>\n  671  \n  672  ___\n  ...\n  674  ### <a id=\"estimateoptimisml1feefromdata\" name=\"estimateoptimisml1feefromdata\"></a> estimateOptimismL1FeeFromData\n  675  \n  676: ▸ **estimateOptimismL1FeeFromData**(`gasLimit`, `data?`, `to?`): `Promise`<`any`\\>\n  677  \n  678  #### Parameters\n  ...\n  686  #### Returns\n  687  \n  688: `Promise`<`any`\\>\n  689  \n  690  #### Inherited from\n  ...\n  696  ### <a id=\"estimatesendgaslimit\" name=\"estimatesendgaslimit\"></a> estimateSendGasLimit\n  697  \n  698: ▸ **estimateSendGasLimit**(`tokenAmount`, `sourceChain`, `destinationChain`, `options?`): `Promise`<`BigNumber`\\>\n  699  \n  700  #### Parameters\n  ...\n  709  #### Returns\n  710  \n  711: `Promise`<`BigNumber`\\>\n  712  \n  713  ___\n  ...\n  715  ### <a id=\"estimatesendhtokensgaslimit\" name=\"estimatesendhtokensgaslimit\"></a> estimateSendHTokensGasLimit\n  716  \n  717: ▸ **estimateSendHTokensGasLimit**(`tokenAmount`, `sourceChain`, `destinationChain`, `options?`): `Promise`<`BigNumber`\\>\n  718  \n  719  #### Parameters\n  ...\n  728  #### Returns\n  729  \n  730: `Promise`<`BigNumber`\\>\n  731  \n  732  ___\n  ...\n  734  ### <a id=\"execsaddleswap\" name=\"execsaddleswap\"></a> execSaddleSwap\n  735  \n  736: ▸ **execSaddleSwap**(`sourceChain`, `toHop`, `amount`, `minAmountOut`, `deadline`): `Promise`<`any`\\>\n  737  \n  738  **`Desc`**\n  ...\n  752  #### Returns\n  753  \n  754: `Promise`<`any`\\>\n  755  \n  756  Ethers transaction object.\n  ...\n  760  ### <a id=\"fetchbonderavailableliquiditydata\" name=\"fetchbonderavailableliquiditydata\"></a> fetchBonderAvailableLiquidityData\n  761  \n  762: ▸ **fetchBonderAvailableLiquidityData**(): `Promise`<`any`\\>\n  763  \n  764  #### Returns\n  765  \n  766: `Promise`<`any`\\>\n  767  \n  768  ___\n  ...\n  770  ### <a id=\"fetchconfigfroms3\" name=\"fetchconfigfroms3\"></a> fetchConfigFromS3\n  771  \n  772: ▸ **fetchConfigFromS3**(): `Promise`<`any`\\>\n  773  \n  774  #### Returns\n  775  \n  776: `Promise`<`any`\\>\n  777  \n  778  #### Inherited from\n  ...\n  815  ### <a id=\"getaccountlpbalance\" name=\"getaccountlpbalance\"></a> getAccountLpBalance\n  816  \n  817: ▸ **getAccountLpBalance**(`chain`, `account?`): `Promise`<`BigNumber`\\>\n  818  \n  819  #### Parameters\n  ...\n  826  #### Returns\n  827  \n  828: `Promise`<`BigNumber`\\>\n  829  \n  830  ___\n  ...\n  832  ### <a id=\"getaccountlpcanonicalbalance\" name=\"getaccountlpcanonicalbalance\"></a> getAccountLpCanonicalBalance\n  833  \n  834: ▸ **getAccountLpCanonicalBalance**(`chain`, `account?`): `Promise`<`BigNumber`\\>\n  835  \n  836  #### Parameters\n  ...\n  843  #### Returns\n  844  \n  845: `Promise`<`BigNumber`\\>\n  846  \n  847  ___\n  ...\n  849  ### <a id=\"getaccountlpcanonicalbalanceusd\" name=\"getaccountlpcanonicalbalanceusd\"></a> getAccountLpCanonicalBalanceUsd\n  850  \n  851: ▸ **getAccountLpCanonicalBalanceUsd**(`chain`, `account?`): `Promise`<`number`\\>\n  852  \n  853  #### Parameters\n  ...\n  860  #### Returns\n  861  \n  862: `Promise`<`number`\\>\n  863  \n  864  ___\n  ...\n  866  ### <a id=\"getambbridge\" name=\"getambbridge\"></a> getAmbBridge\n  867  \n  868: ▸ **getAmbBridge**(`chain`): `Promise`<`any`\\>\n  869  \n  870  #### Parameters\n  ...\n  876  #### Returns\n  877  \n  878: `Promise`<`any`\\>\n  879  \n  880  ___\n  ...\n  898  ### <a id=\"getammdata\" name=\"getammdata\"></a> getAmmData\n  899  \n  900: ▸ **getAmmData**(`chain`, `amountIn`, `isToHToken`, `slippageTolerance`): `Promise`<{ `amountOutMin`: `BigNumber` ; `lpFeeAmount`: `BigNumber` ; `priceImpact`: `number` ; `rate`: `number`  }\\>\n  901  \n  902  #### Parameters\n  ...\n  911  #### Returns\n  912  \n  913: `Promise`<{ `amountOutMin`: `BigNumber` ; `lpFeeAmount`: `BigNumber` ; `priceImpact`: `number` ; `rate`: `number`  }\\>\n  914  \n  915  ___\n  ...\n  917  ### <a id=\"getammwrapper\" name=\"getammwrapper\"></a> getAmmWrapper\n  918  \n  919: ▸ **getAmmWrapper**(`chain`, `signer?`): `Promise`<`any`\\>\n  920  \n  921  **`Desc`**\n  ...\n  932  #### Returns\n  933  \n  934: `Promise`<`any`\\>\n  935  \n  936  Ethers contract instance.\n  ...\n  940  ### <a id=\"getamountout\" name=\"getamountout\"></a> getAmountOut\n  941  \n  942: ▸ **getAmountOut**(`tokenAmountIn`, `sourceChain?`, `destinationChain?`): `Promise`<`BigNumber`\\>\n  943  \n  944  **`Desc`**\n  ...\n  967  #### Returns\n  968  \n  969: `Promise`<`BigNumber`\\>\n  970  \n  971  Amount as BigNumber.\n  ...\n  996  ### <a id=\"getavailableliquidity\" name=\"getavailableliquidity\"></a> getAvailableLiquidity\n  997  \n  998: ▸ **getAvailableLiquidity**(`destinationChain`, `bonder`): `Promise`<`BigNumber`\\>\n  999  \n 1000  #### Parameters\n ....\n 1007  #### Returns\n 1008  \n 1009: `Promise`<`BigNumber`\\>\n 1010  \n 1011  ___\n ....\n 1013  ### <a id=\"getbonderaddress\" name=\"getbonderaddress\"></a> getBonderAddress\n 1014  \n 1015: ▸ **getBonderAddress**(`sourceChain`, `destinationChain`): `Promise`<`string`\\>\n 1016  \n 1017  #### Parameters\n ....\n 1024  #### Returns\n 1025  \n 1026: `Promise`<`string`\\>\n 1027  \n 1028  ___\n ....\n 1030  ### <a id=\"getbonderavailableliquiditydata\" name=\"getbonderavailableliquiditydata\"></a> getBonderAvailableLiquidityData\n 1031  \n 1032: ▸ **getBonderAvailableLiquidityData**(): `Promise`<`any`\\>\n 1033  \n 1034  #### Returns\n 1035  \n 1036: `Promise`<`any`\\>\n 1037  \n 1038  ___\n ....\n 1040  ### <a id=\"getbonderfeeabsolute\" name=\"getbonderfeeabsolute\"></a> getBonderFeeAbsolute\n 1041  \n 1042: ▸ **getBonderFeeAbsolute**(`sourceChain`): `Promise`<`BigNumber`\\>\n 1043  \n 1044  #### Parameters\n ....\n 1050  #### Returns\n 1051  \n 1052: `Promise`<`BigNumber`\\>\n 1053  \n 1054  ___\n ....\n 1056  ### <a id=\"getbridgecontract\" name=\"getbridgecontract\"></a> getBridgeContract\n 1057  \n 1058: ▸ **getBridgeContract**(`chain`): `Promise`<`Contract`\\>\n 1059  \n 1060  **`Desc`**\n ....\n 1070  #### Returns\n 1071  \n 1072: `Promise`<`Contract`\\>\n 1073  \n 1074  Ethers contract instance.\n ....\n 1078  ### <a id=\"getbumpedgasprice\" name=\"getbumpedgasprice\"></a> getBumpedGasPrice\n 1079  \n 1080: ▸ **getBumpedGasPrice**(`signer`, `percent`): `Promise`<`BigNumber`\\>\n 1081  \n 1082  **`Desc`**\n ....\n 1103  #### Returns\n 1104  \n 1105: `Promise`<`BigNumber`\\>\n 1106  \n 1107  Bumped as price as BigNumber\n ....\n 1248  ### <a id=\"getcredit\" name=\"getcredit\"></a> getCredit\n 1249  \n 1250: ▸ **getCredit**(`sourceChain`, `bonder`): `Promise`<`BigNumber`\\>\n 1251  \n 1252  **`Desc`**\n ....\n 1263  #### Returns\n 1264  \n 1265: `Promise`<`BigNumber`\\>\n 1266  \n 1267  Total credit as BigNumber.\n ....\n 1271  ### <a id=\"getdebit\" name=\"getdebit\"></a> getDebit\n 1272  \n 1273: ▸ **getDebit**(`sourceChain`, `bonder`): `Promise`<`BigNumber`\\>\n 1274  \n 1275  **`Desc`**\n ....\n 1286  #### Returns\n 1287  \n 1288: `Promise`<`BigNumber`\\>\n 1289  \n 1290  Total debit as BigNumber.\n ....\n 1308  ### <a id=\"getdestinationtransactionfee\" name=\"getdestinationtransactionfee\"></a> getDestinationTransactionFee\n 1309  \n 1310: ▸ **getDestinationTransactionFee**(`sourceChain`, `destinationChain`): `Promise`<`BigNumber`\\>\n 1311  \n 1312  #### Parameters\n ....\n 1319  #### Returns\n 1320  \n 1321: `Promise`<`BigNumber`\\>\n 1322  \n 1323  ___\n ....\n 1325  ### <a id=\"getdestinationtransactionfeedata\" name=\"getdestinationtransactionfeedata\"></a> getDestinationTransactionFeeData\n 1326  \n 1327: ▸ **getDestinationTransactionFeeData**(`sourceChain`, `destinationChain`): `Promise`<`any`\\>\n 1328  \n 1329  #### Parameters\n ....\n 1336  #### Returns\n 1337  \n 1338: `Promise`<`any`\\>\n 1339  \n 1340  ___\n ....\n 1342  ### <a id=\"getethbalance\" name=\"getethbalance\"></a> getEthBalance\n 1343  \n 1344: ▸ **getEthBalance**(`chain?`, `address?`): `Promise`<`BigNumber`\\>\n 1345  \n 1346  #### Parameters\n ....\n 1353  #### Returns\n 1354  \n 1355: `Promise`<`BigNumber`\\>\n 1356  \n 1357  ___\n ....\n 1433  ### <a id=\"getfeebps\" name=\"getfeebps\"></a> getFeeBps\n 1434  \n 1435: ▸ **getFeeBps**(`token`, `destinationChain`): `Promise`<`number`\\>\n 1436  \n 1437  #### Parameters\n ....\n 1444  #### Returns\n 1445  \n 1446: `Promise`<`number`\\>\n 1447  \n 1448  #### Inherited from\n ....\n 1454  ### <a id=\"getfrontendavailableliquidity\" name=\"getfrontendavailableliquidity\"></a> getFrontendAvailableLiquidity\n 1455  \n 1456: ▸ **getFrontendAvailableLiquidity**(`sourceChain`, `destinationChain`): `Promise`<`BigNumber`\\>\n 1457  \n 1458  **`Desc`**\n ....\n 1469  #### Returns\n 1470  \n 1471: `Promise`<`BigNumber`\\>\n 1472  \n 1473  Available liquidity as BigNumber.\n ....\n 1498  ### <a id=\"getl1bridge\" name=\"getl1bridge\"></a> getL1Bridge\n 1499  \n 1500: ▸ **getL1Bridge**(`signer?`): `Promise`<`any`\\>\n 1501  \n 1502  **`Desc`**\n ....\n 1512  #### Returns\n 1513  \n 1514: `Promise`<`any`\\>\n 1515  \n 1516  Ethers contract instance.\n ....\n 1677  ### <a id=\"getl2bridge\" name=\"getl2bridge\"></a> getL2Bridge\n 1678  \n 1679: ▸ **getL2Bridge**(`chain`, `signer?`): `Promise`<`any`\\>\n 1680  \n 1681  **`Desc`**\n ....\n 1692  #### Returns\n 1693  \n 1694: `Promise`<`any`\\>\n 1695  \n 1696  Ethers contract instance.\n ....\n 1842  ### <a id=\"getlpfees\" name=\"getlpfees\"></a> getLpFees\n 1843  \n 1844: ▸ **getLpFees**(`amountIn`, `sourceChain`, `destinationChain`): `Promise`<`BigNumber`\\>\n 1845  \n 1846  #### Parameters\n ....\n 1854  #### Returns\n 1855  \n 1856: `Promise`<`BigNumber`\\>\n 1857  \n 1858  ___\n ....\n 1860  ### <a id=\"getmessengerwrapperaddress\" name=\"getmessengerwrapperaddress\"></a> getMessengerWrapperAddress\n 1861  \n 1862: ▸ **getMessengerWrapperAddress**(`destinationChain`): `Promise`<`string`\\>\n 1863  \n 1864  #### Parameters\n ....\n 1870  #### Returns\n 1871  \n 1872: `Promise`<`string`\\>\n 1873  \n 1874  ___\n ....\n 1876  ### <a id=\"getoptimisml1fee\" name=\"getoptimisml1fee\"></a> getOptimismL1Fee\n 1877  \n 1878: ▸ **getOptimismL1Fee**(`sourceChain`, `destinationChain`): `Promise`<`any`\\>\n 1879  \n 1880  #### Parameters\n ....\n 1887  #### Returns\n 1888  \n 1889: `Promise`<`any`\\>\n 1890  \n 1891  ___\n ....\n 1913  ### <a id=\"getrelayerfee\" name=\"getrelayerfee\"></a> getRelayerFee\n 1914  \n 1915: ▸ **getRelayerFee**(`destinationChain`, `tokenSymbol`): `Promise`<`BigNumber`\\>\n 1916  \n 1917  #### Parameters\n ....\n 1924  #### Returns\n 1925  \n 1926: `Promise`<`BigNumber`\\>\n 1927  \n 1928  #### Inherited from\n ....\n 1934  ### <a id=\"getrequiredliquidity\" name=\"getrequiredliquidity\"></a> getRequiredLiquidity\n 1935  \n 1936: ▸ **getRequiredLiquidity**(`tokenAmountIn`, `sourceChain`): `Promise`<`BigNumber`\\>\n 1937  \n 1938  **`Desc`**\n ....\n 1960  #### Returns\n 1961  \n 1962: `Promise`<`BigNumber`\\>\n 1963  \n 1964  Amount as BigNumber.\n ....\n 1968  ### <a id=\"getreservestotal\" name=\"getreservestotal\"></a> getReservesTotal\n 1969  \n 1970: ▸ **getReservesTotal**(`chain?`): `Promise`<`any`\\>\n 1971  \n 1972  #### Parameters\n ....\n 1978  #### Returns\n 1979  \n 1980: `Promise`<`any`\\>\n 1981  \n 1982  ___\n ....\n 1984  ### <a id=\"gets3configdata\" name=\"gets3configdata\"></a> getS3ConfigData\n 1985  \n 1986: ▸ **getS3ConfigData**(): `Promise`<`any`\\>\n 1987  \n 1988  #### Returns\n 1989  \n 1990: `Promise`<`any`\\>\n 1991  \n 1992  #### Inherited from\n ....\n 2021  ### <a id=\"getsaddleswapreserves\" name=\"getsaddleswapreserves\"></a> getSaddleSwapReserves\n 2022  \n 2023: ▸ **getSaddleSwapReserves**(`chain?`): `Promise`<[`any`, `any`]\\>\n 2024  \n 2025  **`Desc`**\n ....\n 2035  #### Returns\n 2036  \n 2037: `Promise`<[`any`, `any`]\\>\n 2038  \n 2039  Array containing reserve amounts for canonical token\n ....\n 2061  ### <a id=\"getsenddata\" name=\"getsenddata\"></a> getSendData\n 2062  \n 2063: ▸ **getSendData**(`amountIn`, `sourceChain`, `destinationChain`, `isHTokenSend?`): `Promise`<{ `adjustedBonderFee`: `BigNumber` ; `adjustedDestinationTxFee`: `any` ; `amountOut`: `BigNumber` ; `bonderFeeRelative`: `BigNumber` ; `chainNativeTokenPrice`: `any` = destinationTxFeeData.chainNativeTokenPrice; `destinationChainGasPrice`: `any` = destinationTxFeeData.destinationChainGasPrice; `destinationTxFee`: `any` ; `estimatedReceived`: `BigNumber` ; `feeBps`: `number` ; `lpFeeBps`: `number` = LpFeeBps; `lpFees`: `BigNumber` ; `priceImpact`: `number` ; `rate`: `number` ; `requiredLiquidity`: `BigNumber` = hTokenAmount; `tokenPrice`: `any` = destinationTxFeeData.tokenPrice; `tokenPriceRate`: `any` = destinationTxFeeData.rate; `totalFee`: `BigNumber`  }\\>\n 2064  \n 2065  #### Parameters\n ....\n 2074  #### Returns\n 2075  \n 2076: `Promise`<{ `adjustedBonderFee`: `BigNumber` ; `adjustedDestinationTxFee`: `any` ; `amountOut`: `BigNumber` ; `bonderFeeRelative`: `BigNumber` ; `chainNativeTokenPrice`: `any` = destinationTxFeeData.chainNativeTokenPrice; `destinationChainGasPrice`: `any` = destinationTxFeeData.destinationChainGasPrice; `destinationTxFee`: `any` ; `estimatedReceived`: `BigNumber` ; `feeBps`: `number` ; `lpFeeBps`: `number` = LpFeeBps; `lpFees`: `BigNumber` ; `priceImpact`: `number` ; `rate`: `number` ; `requiredLiquidity`: `BigNumber` = hTokenAmount; `tokenPrice`: `any` = destinationTxFeeData.tokenPrice; `tokenPriceRate`: `any` = destinationTxFeeData.rate; `totalFee`: `BigNumber`  }\\>\n 2077  \n 2078  ___\n ....\n 2080  ### <a id=\"getsendestimatedgascost\" name=\"getsendestimatedgascost\"></a> getSendEstimatedGasCost\n 2081  \n 2082: ▸ **getSendEstimatedGasCost**(`tokenAmount`, `sourceChain`, `destinationChain`, `options?`): `Promise`<`BigNumber`\\>\n 2083  \n 2084  #### Parameters\n ....\n 2093  #### Returns\n 2094  \n 2095: `Promise`<`BigNumber`\\>\n 2096  \n 2097  ___\n ....\n 2099  ### <a id=\"getsigneraddress\" name=\"getsigneraddress\"></a> getSignerAddress\n 2100  \n 2101: ▸ **getSignerAddress**(): `Promise`<`string`\\>\n 2102  \n 2103  **`Desc`**\n ....\n 2117  #### Returns\n 2118  \n 2119: `Promise`<`string`\\>\n 2120  \n 2121  Ethers signer address.\n ....\n 2129  ### <a id=\"getsignerorprovider\" name=\"getsignerorprovider\"></a> getSignerOrProvider\n 2130  \n 2131: ▸ **getSignerOrProvider**(`chain`, `signer?`): `Promise`<`Provider` \\| `Signer`\\>\n 2132  \n 2133  **`Desc`**\n ....\n 2145  #### Returns\n 2146  \n 2147: `Promise`<`Provider` \\| `Signer`\\>\n 2148  \n 2149  Ethers signer or provider\n ....\n 2229  ### <a id=\"gettimeslot\" name=\"gettimeslot\"></a> getTimeSlot\n 2230  \n 2231: ▸ `Readonly` **getTimeSlot**(`time`): `Promise`<`BigNumber`\\>\n 2232  \n 2233  **`Desc`**\n ....\n 2243  #### Returns\n 2244  \n 2245: `Promise`<`BigNumber`\\>\n 2246  \n 2247  Time slot for the given time as BigNumber.\n ....\n 2251  ### <a id=\"gettokenbalance\" name=\"gettokenbalance\"></a> getTokenBalance\n 2252  \n 2253: ▸ **getTokenBalance**(`chain`, `address?`): `Promise`<`BigNumber`\\>\n 2254  \n 2255  #### Parameters\n ....\n 2262  #### Returns\n 2263  \n 2264: `Promise`<`BigNumber`\\>\n 2265  \n 2266  ___\n ....\n 2298  ### <a id=\"gettotaldebit\" name=\"gettotaldebit\"></a> getTotalDebit\n 2299  \n 2300: ▸ **getTotalDebit**(`sourceChain`, `bonder`): `Promise`<`BigNumber`\\>\n 2301  \n 2302  **`Desc`**\n ....\n 2313  #### Returns\n 2314  \n 2315: `Promise`<`BigNumber`\\>\n 2316  \n 2317  Total debit as BigNumber.\n ....\n 2321  ### <a id=\"gettotalfee\" name=\"gettotalfee\"></a> getTotalFee\n 2322  \n 2323: ▸ **getTotalFee**(`amountIn`, `sourceChain`, `destinationChain`): `Promise`<`BigNumber`\\>\n 2324  \n 2325  #### Parameters\n ....\n 2333  #### Returns\n 2334  \n 2335: `Promise`<`BigNumber`\\>\n 2336  \n 2337  ___\n ....\n 2339  ### <a id=\"gettransferstatus\" name=\"gettransferstatus\"></a> getTransferStatus\n 2340  \n 2341: ▸ **getTransferStatus**(`transferIdOrTxHash`): `Promise`<`any`\\>\n 2342  \n 2343  #### Parameters\n ....\n 2349  #### Returns\n 2350  \n 2351: `Promise`<`any`\\>\n 2352  \n 2353  #### Inherited from\n ....\n 2359  ### <a id=\"gettvl\" name=\"gettvl\"></a> getTvl\n 2360  \n 2361: ▸ **getTvl**(`chain?`): `Promise`<`any`\\>\n 2362  \n 2363  #### Parameters\n ....\n 2369  #### Returns\n 2370  \n 2371: `Promise`<`any`\\>\n 2372  \n 2373  ___\n ....\n 2375  ### <a id=\"gettvlusd\" name=\"gettvlusd\"></a> getTvlUsd\n 2376  \n 2377: ▸ **getTvlUsd**(`chain?`): `Promise`<`number`\\>\n 2378  \n 2379  #### Parameters\n ....\n 2385  #### Returns\n 2386  \n 2387: `Promise`<`number`\\>\n 2388  \n 2389  ___\n ....\n 2391  ### <a id=\"getunbondedtransferrootamount\" name=\"getunbondedtransferrootamount\"></a> getUnbondedTransferRootAmount\n 2392  \n 2393: ▸ **getUnbondedTransferRootAmount**(`sourceChain`, `destinationChain`): `Promise`<`BigNumber`\\>\n 2394  \n 2395  #### Parameters\n ....\n 2402  #### Returns\n 2403  \n 2404: `Promise`<`BigNumber`\\>\n 2405  \n 2406  ___\n ....\n 2408  ### <a id=\"getvaultbalance\" name=\"getvaultbalance\"></a> getVaultBalance\n 2409  \n 2410: ▸ **getVaultBalance**(`destinationChain`, `bonder`): `Promise`<`BigNumber`\\>\n 2411  \n 2412  #### Parameters\n ....\n 2419  #### Returns\n 2420  \n 2421: `Promise`<`BigNumber`\\>\n 2422  \n 2423  ___\n ....\n 2445  ### <a id=\"init\" name=\"init\"></a> init\n 2446  \n 2447: ▸ **init**(): `Promise`<`void`\\>\n 2448  \n 2449  #### Returns\n 2450  \n 2451: `Promise`<`void`\\>\n 2452  \n 2453  #### Inherited from\n ....\n 2459  ### <a id=\"isdestinationchainpaused\" name=\"isdestinationchainpaused\"></a> isDestinationChainPaused\n 2460  \n 2461: ▸ **isDestinationChainPaused**(`destinationChain`): `Promise`<`any`\\>\n 2462  \n 2463  #### Parameters\n ....\n 2469  #### Returns\n 2470  \n 2471: `Promise`<`any`\\>\n 2472  \n 2473  ___\n ....\n 2547  ### <a id=\"needsapproval\" name=\"needsapproval\"></a> needsApproval\n 2548  \n 2549: ▸ **needsApproval**(`amount`, `chain`, `address?`): `Promise`<`any`\\>\n 2550  \n 2551  #### Parameters\n ....\n 2559  #### Returns\n 2560  \n 2561: `Promise`<`any`\\>\n 2562  \n 2563  ___\n ....\n 2565  ### <a id=\"needshtokenapproval\" name=\"needshtokenapproval\"></a> needsHTokenApproval\n 2566  \n 2567: ▸ **needsHTokenApproval**(`amount`, `chain`, `address?`): `Promise`<`any`\\>\n 2568  \n 2569  #### Parameters\n ....\n 2577  #### Returns\n 2578  \n 2579: `Promise`<`any`\\>\n 2580  \n 2581  ___\n ....\n 2600  ### <a id=\"populatebondwithdrawaltx\" name=\"populatebondwithdrawaltx\"></a> populateBondWithdrawalTx\n 2601  \n 2602: ▸ **populateBondWithdrawalTx**(`sourceChain`, `destinationChain`, `recipient?`): `Promise`<`any`\\>\n 2603  \n 2604  #### Parameters\n ....\n 2612  #### Returns\n 2613  \n 2614: `Promise`<`any`\\>\n 2615  \n 2616  ___\n ....\n 2618  ### <a id=\"populatesendapprovaltx\" name=\"populatesendapprovaltx\"></a> populateSendApprovalTx\n 2619  \n 2620: ▸ **populateSendApprovalTx**(`tokenAmount`, `sourceChain`, `isHTokenTransfer?`): `Promise`<`any`\\>\n 2621  \n 2622  #### Parameters\n ....\n 2630  #### Returns\n 2631  \n 2632: `Promise`<`any`\\>\n 2633  \n 2634  ___\n ....\n 2636  ### <a id=\"populatesendhtokenstx\" name=\"populatesendhtokenstx\"></a> populateSendHTokensTx\n 2637  \n 2638: ▸ **populateSendHTokensTx**(`tokenAmount`, `sourceChain`, `destinationChain`, `options?`): `Promise`<`any`\\>\n 2639  \n 2640  #### Parameters\n ....\n 2649  #### Returns\n 2650  \n 2651: `Promise`<`any`\\>\n 2652  \n 2653  ___\n ....\n 2655  ### <a id=\"populatesendtx\" name=\"populatesendtx\"></a> populateSendTx\n 2656  \n 2657: ▸ **populateSendTx**(`tokenAmount`, `sourceChain?`, `destinationChain?`, `options?`): `Promise`<`any`\\>\n 2658  \n 2659  #### Parameters\n ....\n 2668  #### Returns\n 2669  \n 2670: `Promise`<`any`\\>\n 2671  \n 2672  ___\n ....\n 2674  ### <a id=\"removeliquidity\" name=\"removeliquidity\"></a> removeLiquidity\n 2675  \n 2676: ▸ **removeLiquidity**(`liquidityTokenAmount`, `chain?`, `options?`): `Promise`<`TransactionResponse`\\>\n 2677  \n 2678  **`Desc`**\n ....\n 2690  #### Returns\n 2691  \n 2692: `Promise`<`TransactionResponse`\\>\n 2693  \n 2694  Ethers transaction object.\n ....\n 2698  ### <a id=\"removeliquidityimbalance\" name=\"removeliquidityimbalance\"></a> removeLiquidityImbalance\n 2699  \n 2700: ▸ **removeLiquidityImbalance**(`token0Amount`, `token1Amount`, `chain?`, `options?`): `Promise`<`any`\\>\n 2701  \n 2702  #### Parameters\n ....\n 2711  #### Returns\n 2712  \n 2713: `Promise`<`any`\\>\n 2714  \n 2715  ___\n ....\n 2717  ### <a id=\"removeliquidityonetoken\" name=\"removeliquidityonetoken\"></a> removeLiquidityOneToken\n 2718  \n 2719: ▸ **removeLiquidityOneToken**(`lpTokenAmount`, `tokenIndex`, `chain?`, `options?`): `Promise`<`any`\\>\n 2720  \n 2721  #### Parameters\n ....\n 2730  #### Returns\n 2731  \n 2732: `Promise`<`any`\\>\n 2733  \n 2734  ___\n ....\n 2736  ### <a id=\"send\" name=\"send\"></a> send\n 2737  \n 2738: ▸ **send**(`tokenAmount`, `sourceChain?`, `destinationChain?`, `options?`): `Promise`<`TransactionResponse`\\>\n 2739  \n 2740  **`Desc`**\n ....\n 2765  #### Returns\n 2766  \n 2767: `Promise`<`TransactionResponse`\\>\n 2768  \n 2769  Ethers Transaction object.\n ....\n 2773  ### <a id=\"sendapproval\" name=\"sendapproval\"></a> sendApproval\n 2774  \n 2775: ▸ **sendApproval**(`tokenAmount`, `sourceChain`, `destinationChain`, `isHTokenTransfer?`): `Promise`<`TransactionResponse`\\>\n 2776  \n 2777  #### Parameters\n ....\n 2786  #### Returns\n 2787  \n 2788: `Promise`<`TransactionResponse`\\>\n 2789  \n 2790  ___\n ....\n 2792  ### <a id=\"sendhtoken\" name=\"sendhtoken\"></a> sendHToken\n 2793  \n 2794: ▸ **sendHToken**(`tokenAmount`, `sourceChain`, `destinationChain`, `options?`): `Promise`<`TransactionResponse`\\>\n 2795  \n 2796  #### Parameters\n ....\n 2805  #### Returns\n 2806  \n 2807: `Promise`<`TransactionResponse`\\>\n 2808  \n 2809  ___\n ....\n 2811  ### <a id=\"sendtransaction\" name=\"sendtransaction\"></a> sendTransaction\n 2812  \n 2813: ▸ **sendTransaction**(`transactionRequest`, `chain`): `Promise`<`TransactionResponse`\\>\n 2814  \n 2815  #### Parameters\n ....\n 2822  #### Returns\n 2823  \n 2824: `Promise`<`TransactionResponse`\\>\n 2825  \n 2826  #### Inherited from\n ....\n 3006  ### <a id=\"timeslotsize\" name=\"timeslotsize\"></a> timeSlotSize\n 3007  \n 3008: ▸ `Readonly` **timeSlotSize**(): `Promise`<`BigNumber`\\>\n 3009  \n 3010  **`Desc`**\n ....\n 3014  #### Returns\n 3015  \n 3016: `Promise`<`BigNumber`\\>\n 3017  \n 3018  The size of the time slots for the bridge as BigNumber.\n ....\n 3022  ### <a id=\"timeslottoamountbonded\" name=\"timeslottoamountbonded\"></a> timeSlotToAmountBonded\n 3023  \n 3024: ▸ `Readonly` **timeSlotToAmountBonded**(`timeSlot`, `bonder`): `Promise`<`BigNumber`\\>\n 3025  \n 3026  **`Desc`**\n ....\n 3037  #### Returns\n 3038  \n 3039: `Promise`<`BigNumber`\\>\n 3040  \n 3041  Amount bonded for the bonder for the given time slot as BigNumber.\n ....\n 3133  ### <a id=\"txoverrides\" name=\"txoverrides\"></a> txOverrides\n 3134  \n 3135: ▸ **txOverrides**(`chain`): `Promise`<`any`\\>\n 3136  \n 3137  #### Parameters\n ....\n 3143  #### Returns\n 3144  \n 3145: `Promise`<`any`\\>\n 3146  \n 3147  #### Inherited from\n ....\n 3153  ### <a id=\"willtransferfail\" name=\"willtransferfail\"></a> willTransferFail\n 3154  \n 3155: ▸ **willTransferFail**(`sourceChain`, `destinationChain`, `recipient`): `Promise`<`any`\\>\n 3156  \n 3157  #### Parameters\n ....\n 3165  #### Returns\n 3166  \n 3167: `Promise`<`any`\\>\n 3168  \n 3169  ___\n ....\n 3171  ### <a id=\"withdraw\" name=\"withdraw\"></a> withdraw\n 3172  \n 3173: ▸ **withdraw**(`chain`, `recipient`, `amount`, `transferNonce`, `bonderFee`, `amountOutMin`, `deadline`, `transferRootHash`, `rootTotalAmount`, `transferIdTreeIndex`, `siblings`, `totalLeaves`): `Promise`<`any`\\>\n 3174  \n 3175  #### Parameters\n ....\n 3192  #### Returns\n 3193  \n 3194: `Promise`<`any`\\>\n 3195  \n\n~/Sandbox/hop/packages/sdk/docs/classes/RelayerFee.md:\n   42  ### <a id=\"getrelaycost\" name=\"getrelaycost\"></a> getRelayCost\n   43  \n   44: ▸ **getRelayCost**(`chainSlug`): `Promise`<`BigNumber`\\>\n   45  \n   46  #### Parameters\n   ..\n   52  #### Returns\n   53  \n   54: `Promise`<`BigNumber`\\>\n   55  \n\n~/Sandbox/hop/packages/sdk/docs/classes/RetryProvider.md:\n   63  ### <a id=\"call\" name=\"call\"></a> call\n   64  \n   65: • **call**: (...`args`: [transaction: Deferrable<TransactionRequest\\>, blockTag?: BlockTag \\| Promise<BlockTag\\>]) => `Promise`<`string`\\>\n   66  \n   67  #### Type declaration\n   68  \n   69: ▸ (...`args`): `Promise`<`string`\\>\n   70  \n   71  ##### Parameters\n   ..\n   73  | Name | Type |\n   74  | :------ | :------ |\n   75: | `...args` | [transaction: Deferrable<TransactionRequest\\>, blockTag?: BlockTag \\| Promise<BlockTag\\>] |\n   76  \n   77  ##### Returns\n   78  \n   79: `Promise`<`string`\\>\n   80  \n   81  #### Implementation of\n   ..\n   91  ### <a id=\"estimategas\" name=\"estimategas\"></a> estimateGas\n   92  \n   93: • **estimateGas**: (...`args`: [transaction: Deferrable<TransactionRequest\\>]) => `Promise`<`BigNumber`\\>\n   94  \n   95  #### Type declaration\n   96  \n   97: ▸ (...`args`): `Promise`<`BigNumber`\\>\n   98  \n   99  ##### Parameters\n  ...\n  105  ##### Returns\n  106  \n  107: `Promise`<`BigNumber`\\>\n  108  \n  109  #### Implementation of\n  ...\n  119  ### <a id=\"getavatar\" name=\"getavatar\"></a> getAvatar\n  120  \n  121: • **getAvatar**: (...`args`: [nameOrAddress: string]) => `Promise`<`string`\\>\n  122  \n  123  #### Type declaration\n  124  \n  125: ▸ (...`args`): `Promise`<`string`\\>\n  126  \n  127  ##### Parameters\n  ...\n  133  ##### Returns\n  134  \n  135: `Promise`<`string`\\>\n  136  \n  137  #### Overrides\n  ...\n  143  ### <a id=\"getbalance\" name=\"getbalance\"></a> getBalance\n  144  \n  145: • **getBalance**: (...`args`: [addressOrName: string \\| Promise<string\\>, blockTag?: BlockTag \\| Promise<BlockTag\\>]) => `Promise`<`BigNumber`\\>\n  146  \n  147  #### Type declaration\n  148  \n  149: ▸ (...`args`): `Promise`<`BigNumber`\\>\n  150  \n  151  ##### Parameters\n  ...\n  153  | Name | Type |\n  154  | :------ | :------ |\n  155: | `...args` | [addressOrName: string \\| Promise<string\\>, blockTag?: BlockTag \\| Promise<BlockTag\\>] |\n  156  \n  157  ##### Returns\n  158  \n  159: `Promise`<`BigNumber`\\>\n  160  \n  161  #### Implementation of\n  ...\n  171  ### <a id=\"getblock\" name=\"getblock\"></a> getBlock\n  172  \n  173: • **getBlock**: (...`args`: [blockHashOrBlockTag: BlockTag \\| Promise<BlockTag\\>]) => `Promise`<`Block`\\>\n  174  \n  175  #### Type declaration\n  176  \n  177: ▸ (...`args`): `Promise`<`Block`\\>\n  178  \n  179  ##### Parameters\n  ...\n  181  | Name | Type |\n  182  | :------ | :------ |\n  183: | `...args` | [blockHashOrBlockTag: BlockTag \\| Promise<BlockTag\\>] |\n  184  \n  185  ##### Returns\n  186  \n  187: `Promise`<`Block`\\>\n  188  \n  189  #### Implementation of\n  ...\n  199  ### <a id=\"getblocknumber\" name=\"getblocknumber\"></a> getBlockNumber\n  200  \n  201: • **getBlockNumber**: (...`args`: []) => `Promise`<`number`\\>\n  202  \n  203  #### Type declaration\n  204  \n  205: ▸ (...`args`): `Promise`<`number`\\>\n  206  \n  207  ##### Parameters\n  ...\n  213  ##### Returns\n  214  \n  215: `Promise`<`number`\\>\n  216  \n  217  #### Implementation of\n  ...\n  227  ### <a id=\"getblockwithtransactions\" name=\"getblockwithtransactions\"></a> getBlockWithTransactions\n  228  \n  229: • **getBlockWithTransactions**: (...`args`: [blockHashOrBlockTag: BlockTag \\| Promise<BlockTag\\>]) => `Promise`<`BlockWithTransactions`\\>\n  230  \n  231  #### Type declaration\n  232  \n  233: ▸ (...`args`): `Promise`<`BlockWithTransactions`\\>\n  234  \n  235  ##### Parameters\n  ...\n  237  | Name | Type |\n  238  | :------ | :------ |\n  239: | `...args` | [blockHashOrBlockTag: BlockTag \\| Promise<BlockTag\\>] |\n  240  \n  241  ##### Returns\n  242  \n  243: `Promise`<`BlockWithTransactions`\\>\n  244  \n  245  #### Implementation of\n  ...\n  255  ### <a id=\"getcode\" name=\"getcode\"></a> getCode\n  256  \n  257: • **getCode**: (...`args`: [addressOrName: string \\| Promise<string\\>, blockTag?: BlockTag \\| Promise<BlockTag\\>]) => `Promise`<`string`\\>\n  258  \n  259  #### Type declaration\n  260  \n  261: ▸ (...`args`): `Promise`<`string`\\>\n  262  \n  263  ##### Parameters\n  ...\n  265  | Name | Type |\n  266  | :------ | :------ |\n  267: | `...args` | [addressOrName: string \\| Promise<string\\>, blockTag?: BlockTag \\| Promise<BlockTag\\>] |\n  268  \n  269  ##### Returns\n  270  \n  271: `Promise`<`string`\\>\n  272  \n  273  #### Implementation of\n  ...\n  283  ### <a id=\"getgasprice\" name=\"getgasprice\"></a> getGasPrice\n  284  \n  285: • **getGasPrice**: (...`args`: []) => `Promise`<`BigNumber`\\>\n  286  \n  287  #### Type declaration\n  288  \n  289: ▸ (...`args`): `Promise`<`BigNumber`\\>\n  290  \n  291  ##### Parameters\n  ...\n  297  ##### Returns\n  298  \n  299: `Promise`<`BigNumber`\\>\n  300  \n  301  #### Implementation of\n  ...\n  311  ### <a id=\"getlogs\" name=\"getlogs\"></a> getLogs\n  312  \n  313: • **getLogs**: (...`args`: [filter: Filter \\| FilterByBlockHash \\| Promise<Filter \\| FilterByBlockHash\\>]) => `Promise`<`Log`[]\\>\n  314  \n  315  #### Type declaration\n  316  \n  317: ▸ (...`args`): `Promise`<`Log`[]\\>\n  318  \n  319  ##### Parameters\n  ...\n  321  | Name | Type |\n  322  | :------ | :------ |\n  323: | `...args` | [filter: Filter \\| FilterByBlockHash \\| Promise<Filter \\| FilterByBlockHash\\>] |\n  324  \n  325  ##### Returns\n  326  \n  327: `Promise`<`Log`[]\\>\n  328  \n  329  #### Implementation of\n  ...\n  339  ### <a id=\"getnetwork\" name=\"getnetwork\"></a> getNetwork\n  340  \n  341: • **getNetwork**: (...`args`: []) => `Promise`<`Network`\\>\n  342  \n  343  #### Type declaration\n  344  \n  345: ▸ (...`args`): `Promise`<`Network`\\>\n  346  \n  347  ##### Parameters\n  ...\n  353  ##### Returns\n  354  \n  355: `Promise`<`Network`\\>\n  356  \n  357  #### Implementation of\n  ...\n  367  ### <a id=\"getstorageat\" name=\"getstorageat\"></a> getStorageAt\n  368  \n  369: • **getStorageAt**: (...`args`: [addressOrName: string \\| Promise<string\\>, position: BigNumberish \\| Promise<BigNumberish\\>, blockTag?: BlockTag \\| Promise<BlockTag\\>]) => `Promise`<`string`\\>\n  370  \n  371  #### Type declaration\n  372  \n  373: ▸ (...`args`): `Promise`<`string`\\>\n  374  \n  375  ##### Parameters\n  ...\n  377  | Name | Type |\n  378  | :------ | :------ |\n  379: | `...args` | [addressOrName: string \\| Promise<string\\>, position: BigNumberish \\| Promise<BigNumberish\\>, blockTag?: BlockTag \\| Promise<BlockTag\\>] |\n  380  \n  381  ##### Returns\n  382  \n  383: `Promise`<`string`\\>\n  384  \n  385  #### Implementation of\n  ...\n  395  ### <a id=\"gettransaction\" name=\"gettransaction\"></a> getTransaction\n  396  \n  397: • **getTransaction**: (...`args`: [transactionHash: string \\| Promise<string\\>]) => `Promise`<`TransactionResponse`\\>\n  398  \n  399  #### Type declaration\n  400  \n  401: ▸ (...`args`): `Promise`<`TransactionResponse`\\>\n  402  \n  403  ##### Parameters\n  ...\n  405  | Name | Type |\n  406  | :------ | :------ |\n  407: | `...args` | [transactionHash: string \\| Promise<string\\>] |\n  408  \n  409  ##### Returns\n  410  \n  411: `Promise`<`TransactionResponse`\\>\n  412  \n  413  #### Implementation of\n  ...\n  423  ### <a id=\"gettransactioncount\" name=\"gettransactioncount\"></a> getTransactionCount\n  424  \n  425: • **getTransactionCount**: (...`args`: [addressOrName: string \\| Promise<string\\>, blockTag?: BlockTag \\| Promise<BlockTag\\>]) => `Promise`<`number`\\>\n  426  \n  427  #### Type declaration\n  428  \n  429: ▸ (...`args`): `Promise`<`number`\\>\n  430  \n  431  ##### Parameters\n  ...\n  433  | Name | Type |\n  434  | :------ | :------ |\n  435: | `...args` | [addressOrName: string \\| Promise<string\\>, blockTag?: BlockTag \\| Promise<BlockTag\\>] |\n  436  \n  437  ##### Returns\n  438  \n  439: `Promise`<`number`\\>\n  440  \n  441  #### Implementation of\n  ...\n  451  ### <a id=\"gettransactionreceipt\" name=\"gettransactionreceipt\"></a> getTransactionReceipt\n  452  \n  453: • **getTransactionReceipt**: (...`args`: [transactionHash: string \\| Promise<string\\>]) => `Promise`<`TransactionReceipt`\\>\n  454  \n  455  #### Type declaration\n  456  \n  457: ▸ (...`args`): `Promise`<`TransactionReceipt`\\>\n  458  \n  459  ##### Parameters\n  ...\n  461  | Name | Type |\n  462  | :------ | :------ |\n  463: | `...args` | [transactionHash: string \\| Promise<string\\>] |\n  464  \n  465  ##### Returns\n  466  \n  467: `Promise`<`TransactionReceipt`\\>\n  468  \n  469  #### Implementation of\n  ...\n  479  ### <a id=\"lookupaddress\" name=\"lookupaddress\"></a> lookupAddress\n  480  \n  481: • **lookupAddress**: (...`args`: [address: string \\| Promise<string\\>]) => `Promise`<`string`\\>\n  482  \n  483  #### Type declaration\n  484  \n  485: ▸ (...`args`): `Promise`<`string`\\>\n  486  \n  487  ##### Parameters\n  ...\n  489  | Name | Type |\n  490  | :------ | :------ |\n  491: | `...args` | [address: string \\| Promise<string\\>] |\n  492  \n  493  ##### Returns\n  494  \n  495: `Promise`<`string`\\>\n  496  \n  497  #### Implementation of\n  ...\n  507  ### <a id=\"resolvename\" name=\"resolvename\"></a> resolveName\n  508  \n  509: • **resolveName**: (...`args`: [name: string \\| Promise<string\\>]) => `Promise`<`string`\\>\n  510  \n  511  #### Type declaration\n  512  \n  513: ▸ (...`args`): `Promise`<`string`\\>\n  514  \n  515  ##### Parameters\n  ...\n  517  | Name | Type |\n  518  | :------ | :------ |\n  519: | `...args` | [name: string \\| Promise<string\\>] |\n  520  \n  521  ##### Returns\n  522  \n  523: `Promise`<`string`\\>\n  524  \n  525  #### Implementation of\n  ...\n  535  ### <a id=\"sendtransaction\" name=\"sendtransaction\"></a> sendTransaction\n  536  \n  537: • **sendTransaction**: (...`args`: [signedTransaction: string \\| Promise<string\\>]) => `Promise`<`TransactionResponse`\\>\n  538  \n  539  #### Type declaration\n  540  \n  541: ▸ (...`args`): `Promise`<`TransactionResponse`\\>\n  542  \n  543  ##### Parameters\n  ...\n  545  | Name | Type |\n  546  | :------ | :------ |\n  547: | `...args` | [signedTransaction: string \\| Promise<string\\>] |\n  548  \n  549  ##### Returns\n  550  \n  551: `Promise`<`TransactionResponse`\\>\n  552  \n  553  #### Implementation of\n  ...\n  563  ### <a id=\"perform\" name=\"perform\"></a> perform\n  564  \n  565: ▸ **perform**(`method`, `params`): `Promise`<`any`\\>\n  566  \n  567  #### Parameters\n  ...\n  574  #### Returns\n  575  \n  576: `Promise`<`any`\\>\n  577  \n  578  #### Overrides\n\n~/Sandbox/hop/packages/sdk/docs/classes/Token.md:\n  302  ### <a id=\"getcontract\" name=\"getcontract\"></a> getContract\n  303  \n  304: • **getContract**: (`factory`: `Factory`, `address`: `string`, `provider`: [`TProvider`](../modules.md#tprovider)) => `Promise`<`any`\\> = `getContract`\n  305  \n  306  #### Type declaration\n  307  \n  308: ▸ (`factory`, `address`, `provider`): `Promise`<`any`\\>\n  309  \n  310  ##### Parameters\n  ...\n  318  ##### Returns\n  319  \n  320: `Promise`<`any`\\>\n  321  \n  322  #### Inherited from\n  ...\n  466  ### <a id=\"_getbonderaddress\" name=\"_getbonderaddress\"></a> \\_getBonderAddress\n  467  \n  468: ▸ `Protected` **_getBonderAddress**(`token`, `sourceChain`, `destinationChain`): `Promise`<`string`\\>\n  469  \n  470  #### Parameters\n  ...\n  478  #### Returns\n  479  \n  480: `Promise`<`string`\\>\n  481  \n  482  #### Inherited from\n  ...\n  488  ### <a id=\"_getmessengerwrapperaddress\" name=\"_getmessengerwrapperaddress\"></a> \\_getMessengerWrapperAddress\n  489  \n  490: ▸ `Protected` **_getMessengerWrapperAddress**(`token`, `destinationChain`): `Promise`<`string`\\>\n  491  \n  492  #### Parameters\n  ...\n  499  #### Returns\n  500  \n  501: `Promise`<`string`\\>\n  502  \n  503  #### Inherited from\n  ...\n  509  ### <a id=\"allowance\" name=\"allowance\"></a> allowance\n  510  \n  511: ▸ **allowance**(`spender`, `address?`): `Promise`<`any`\\>\n  512  \n  513  **`Desc`**\n  ...\n  538  #### Returns\n  539  \n  540: `Promise`<`any`\\>\n  541  \n  542  Ethers Transaction object.\n  ...\n  546  ### <a id=\"approve\" name=\"approve\"></a> approve\n  547  \n  548: ▸ **approve**(`spender`, `amount?`): `Promise`<`TransactionResponse`\\>\n  549  \n  550  **`Desc`**\n  ...\n  572  #### Returns\n  573  \n  574: `Promise`<`TransactionResponse`\\>\n  575  \n  576  Ethers Transaction object.\n  ...\n  580  ### <a id=\"balanceof\" name=\"balanceof\"></a> balanceOf\n  581  \n  582: ▸ **balanceOf**(`address?`): `Promise`<`BigNumber`\\>\n  583  \n  584  **`Desc`**\n  ...\n  604  #### Returns\n  605  \n  606: `Promise`<`BigNumber`\\>\n  607  \n  608  Ethers Transaction object.\n  ...\n  650  ### <a id=\"estimateoptimisml1feefromdata\" name=\"estimateoptimisml1feefromdata\"></a> estimateOptimismL1FeeFromData\n  651  \n  652: ▸ **estimateOptimismL1FeeFromData**(`gasLimit`, `data?`, `to?`): `Promise`<`any`\\>\n  653  \n  654  #### Parameters\n  ...\n  662  #### Returns\n  663  \n  664: `Promise`<`any`\\>\n  665  \n  666  #### Inherited from\n  ...\n  672  ### <a id=\"fetchconfigfroms3\" name=\"fetchconfigfroms3\"></a> fetchConfigFromS3\n  673  \n  674: ▸ **fetchConfigFromS3**(): `Promise`<`any`\\>\n  675  \n  676  #### Returns\n  677  \n  678: `Promise`<`any`\\>\n  679  \n  680  #### Inherited from\n  ...\n  721  ### <a id=\"getbumpedgasprice\" name=\"getbumpedgasprice\"></a> getBumpedGasPrice\n  722  \n  723: ▸ **getBumpedGasPrice**(`signer`, `percent`): `Promise`<`BigNumber`\\>\n  724  \n  725  **`Desc`**\n  ...\n  746  #### Returns\n  747  \n  748: `Promise`<`BigNumber`\\>\n  749  \n  750  Bumped as price as BigNumber\n  ...\n  873  ### <a id=\"geterc20\" name=\"geterc20\"></a> getErc20\n  874  \n  875: ▸ **getErc20**(): `Promise`<`any`\\>\n  876  \n  877  **`Desc`**\n  ...\n  881  #### Returns\n  882  \n  883: `Promise`<`any`\\>\n  884  \n  885  Ethers contract instance.\n  ...\n  963  ### <a id=\"getfeebps\" name=\"getfeebps\"></a> getFeeBps\n  964  \n  965: ▸ **getFeeBps**(`token`, `destinationChain`): `Promise`<`number`\\>\n  966  \n  967  #### Parameters\n  ...\n  974  #### Returns\n  975  \n  976: `Promise`<`number`\\>\n  977  \n  978  #### Inherited from\n  ...\n 1288  ### <a id=\"getnativetokenbalance\" name=\"getnativetokenbalance\"></a> getNativeTokenBalance\n 1289  \n 1290: ▸ **getNativeTokenBalance**(`address?`): `Promise`<`BigNumber`\\>\n 1291  \n 1292  #### Parameters\n ....\n 1298  #### Returns\n 1299  \n 1300: `Promise`<`BigNumber`\\>\n 1301  \n 1302  ___\n ....\n 1324  ### <a id=\"getrelayerfee\" name=\"getrelayerfee\"></a> getRelayerFee\n 1325  \n 1326: ▸ **getRelayerFee**(`destinationChain`, `tokenSymbol`): `Promise`<`BigNumber`\\>\n 1327  \n 1328  #### Parameters\n ....\n 1335  #### Returns\n 1336  \n 1337: `Promise`<`BigNumber`\\>\n 1338  \n 1339  #### Inherited from\n ....\n 1345  ### <a id=\"gets3configdata\" name=\"gets3configdata\"></a> getS3ConfigData\n 1346  \n 1347: ▸ **getS3ConfigData**(): `Promise`<`any`\\>\n 1348  \n 1349  #### Returns\n 1350  \n 1351: `Promise`<`any`\\>\n 1352  \n 1353  #### Inherited from\n ....\n 1359  ### <a id=\"getsigneraddress\" name=\"getsigneraddress\"></a> getSignerAddress\n 1360  \n 1361: ▸ **getSignerAddress**(): `Promise`<`string`\\>\n 1362  \n 1363  **`Desc`**\n ....\n 1377  #### Returns\n 1378  \n 1379: `Promise`<`string`\\>\n 1380  \n 1381  Ethers signer address.\n ....\n 1389  ### <a id=\"getsignerorprovider\" name=\"getsignerorprovider\"></a> getSignerOrProvider\n 1390  \n 1391: ▸ **getSignerOrProvider**(`chain`, `signer?`): `Promise`<`Provider` \\| `Signer`\\>\n 1392  \n 1393  **`Desc`**\n ....\n 1405  #### Returns\n 1406  \n 1407: `Promise`<`Provider` \\| `Signer`\\>\n 1408  \n 1409  Ethers signer or provider\n ....\n 1479  ### <a id=\"gettransferstatus\" name=\"gettransferstatus\"></a> getTransferStatus\n 1480  \n 1481: ▸ **getTransferStatus**(`transferIdOrTxHash`): `Promise`<`any`\\>\n 1482  \n 1483  #### Parameters\n ....\n 1489  #### Returns\n 1490  \n 1491: `Promise`<`any`\\>\n 1492  \n 1493  #### Inherited from\n ....\n 1519  ### <a id=\"getwethcontract\" name=\"getwethcontract\"></a> getWethContract\n 1520  \n 1521: ▸ **getWethContract**(): `Promise`<`any`\\>\n 1522  \n 1523  #### Returns\n 1524  \n 1525: `Promise`<`any`\\>\n 1526  \n 1527  ___\n ....\n 1529  ### <a id=\"getwraptokenestimatedgas\" name=\"getwraptokenestimatedgas\"></a> getWrapTokenEstimatedGas\n 1530  \n 1531: ▸ **getWrapTokenEstimatedGas**(`chain`): `Promise`<`any`\\>\n 1532  \n 1533  #### Parameters\n ....\n 1539  #### Returns\n 1540  \n 1541: `Promise`<`any`\\>\n 1542  \n 1543  ___\n ....\n 1555  ### <a id=\"init\" name=\"init\"></a> init\n 1556  \n 1557: ▸ **init**(): `Promise`<`void`\\>\n 1558  \n 1559  #### Returns\n 1560  \n 1561: `Promise`<`void`\\>\n 1562  \n 1563  #### Inherited from\n ....\n 1609  ### <a id=\"needsapproval\" name=\"needsapproval\"></a> needsApproval\n 1610  \n 1611: ▸ **needsApproval**(`spender`, `amount`, `address?`): `Promise`<`any`\\>\n 1612  \n 1613  #### Parameters\n ....\n 1621  #### Returns\n 1622  \n 1623: `Promise`<`any`\\>\n 1624  \n 1625  ___\n ....\n 1627  ### <a id=\"overrides\" name=\"overrides\"></a> overrides\n 1628  \n 1629: ▸ **overrides**(): `Promise`<`any`\\>\n 1630  \n 1631  #### Returns\n 1632  \n 1633: `Promise`<`any`\\>\n 1634  \n 1635  ___\n ....\n 1637  ### <a id=\"populateapprovetx\" name=\"populateapprovetx\"></a> populateApproveTx\n 1638  \n 1639: ▸ **populateApproveTx**(`spender`, `amount?`): `Promise`<`any`\\>\n 1640  \n 1641  #### Parameters\n ....\n 1648  #### Returns\n 1649  \n 1650: `Promise`<`any`\\>\n 1651  \n 1652  ___\n ....\n 1654  ### <a id=\"populateunwraptokentx\" name=\"populateunwraptokentx\"></a> populateUnwrapTokenTx\n 1655  \n 1656: ▸ **populateUnwrapTokenTx**(`amount`): `Promise`<`any`\\>\n 1657  \n 1658  #### Parameters\n ....\n 1664  #### Returns\n 1665  \n 1666: `Promise`<`any`\\>\n 1667  \n 1668  ___\n ....\n 1670  ### <a id=\"populatewraptokentx\" name=\"populatewraptokentx\"></a> populateWrapTokenTx\n 1671  \n 1672: ▸ **populateWrapTokenTx**(`amount`): `Promise`<`any`\\>\n 1673  \n 1674  #### Parameters\n ....\n 1680  #### Returns\n 1681  \n 1682: `Promise`<`any`\\>\n 1683  \n 1684  ___\n ....\n 1686  ### <a id=\"sendtransaction\" name=\"sendtransaction\"></a> sendTransaction\n 1687  \n 1688: ▸ **sendTransaction**(`transactionRequest`, `chain`): `Promise`<`TransactionResponse`\\>\n 1689  \n 1690  #### Parameters\n ....\n 1697  #### Returns\n 1698  \n 1699: `Promise`<`TransactionResponse`\\>\n 1700  \n 1701  #### Inherited from\n ....\n 1919  ### <a id=\"totalsupply\" name=\"totalsupply\"></a> totalSupply\n 1920  \n 1921: ▸ **totalSupply**(): `Promise`<`BigNumber`\\>\n 1922  \n 1923  #### Returns\n 1924  \n 1925: `Promise`<`BigNumber`\\>\n 1926  \n 1927  ___\n ....\n 1929  ### <a id=\"transfer\" name=\"transfer\"></a> transfer\n 1930  \n 1931: ▸ **transfer**(`recipient`, `amount`): `Promise`<`any`\\>\n 1932  \n 1933  **`Desc`**\n ....\n 1955  #### Returns\n 1956  \n 1957: `Promise`<`any`\\>\n 1958  \n 1959  Ethers Transaction object.\n ....\n 1963  ### <a id=\"txoverrides\" name=\"txoverrides\"></a> txOverrides\n 1964  \n 1965: ▸ **txOverrides**(`chain`): `Promise`<`any`\\>\n 1966  \n 1967  #### Parameters\n ....\n 1973  #### Returns\n 1974  \n 1975: `Promise`<`any`\\>\n 1976  \n 1977  #### Inherited from\n ....\n 1983  ### <a id=\"unwraptoken\" name=\"unwraptoken\"></a> unwrapToken\n 1984  \n 1985: ▸ **unwrapToken**(`amount`): `Promise`<`TransactionResponse`\\>\n 1986  \n 1987  #### Parameters\n ....\n 1993  #### Returns\n 1994  \n 1995: `Promise`<`TransactionResponse`\\>\n 1996  \n 1997  ___\n ....\n 1999  ### <a id=\"wraptoken\" name=\"wraptoken\"></a> wrapToken\n 2000  \n 2001: ▸ **wrapToken**(`amount`, `estimateGasOnly?`): `Promise`<`any`\\>\n 2002  \n 2003  #### Parameters\n ....\n 2010  #### Returns\n 2011  \n 2012: `Promise`<`any`\\>\n 2013  \n 2014  ___\n\n~/Sandbox/hop/packages/sdk/docs/modules/utils.md:\n   10  - [getProviderWithFallbacks](utils.md#getproviderwithfallbacks)\n   11  - [getUrlFromProvider](utils.md#geturlfromprovider)\n   12: - [promiseTimeout](utils.md#promisetimeout)\n   13  - [rateLimitRetry](utils.md#ratelimitretry)\n   14  - [serializeQueryParams](utils.md#serializequeryparams)\n   ..\n   20  ### <a id=\"getblocknumberfromdate\" name=\"getblocknumberfromdate\"></a> getBlockNumberFromDate\n   21  \n   22: ▸ **getBlockNumberFromDate**(`chain`, `timestamp`): `Promise`<`number`\\>\n   23  \n   24  #### Parameters\n   ..\n   31  #### Returns\n   32  \n   33: `Promise`<`number`\\>\n   34  \n   35  ___\n   ..\n   99  ___\n  100  \n  101: ### <a id=\"promisetimeout\" name=\"promisetimeout\"></a> promiseTimeout\n  102  \n  103: ▸ **promiseTimeout**<`T`\\>(`promise`, `timeout`): `Promise`<`T`\\>\n  104  \n  105  #### Type parameters\n  ...\n  113  | Name | Type |\n  114  | :------ | :------ |\n  115: | `promise` | `Promise`<`T`\\> |\n  116  | `timeout` | `number` |\n  117  \n  118  #### Returns\n  119  \n  120: `Promise`<`T`\\>\n  121  \n  122  ___\n  ...\n  124  ### <a id=\"ratelimitretry\" name=\"ratelimitretry\"></a> rateLimitRetry\n  125  \n  126: ▸ **rateLimitRetry**<`FN`\\>(`fn`): (...`args`: `Parameters`<`FN`\\>) => `Promise`<`Awaited`<`ReturnType`<`FN`\\>\\>\\>\n  127  \n  128  #### Type parameters\n  ...\n  130  | Name | Type |\n  131  | :------ | :------ |\n  132: | `FN` | extends (...`args`: `any`[]) => `Promise`<`any`\\> |\n  133  \n  134  #### Parameters\n  ...\n  142  `fn`\n  143  \n  144: ▸ (...`args`): `Promise`<`Awaited`<`ReturnType`<`FN`\\>\\>\\>\n  145  \n  146  ##### Parameters\n  ...\n  152  ##### Returns\n  153  \n  154: `Promise`<`Awaited`<`ReturnType`<`FN`\\>\\>\\>\n  155  \n  156  ___\n  ...\n  192  ### <a id=\"wait\" name=\"wait\"></a> wait\n  193  \n  194: ▸ **wait**(`timeoutMs`): `Promise`<`unknown`\\>\n  195  \n  196  #### Parameters\n  ...\n  202  #### Returns\n  203  \n  204: `Promise`<`unknown`\\>\n  205  \n\n~/Sandbox/hop/packages/sdk/src/AMM.ts:\n  101      minToMint: TAmount = 0,\n  102      deadline: BigNumberish = this.defaultDeadlineSeconds\n  103:   ): Promise<TransactionResponse> {\n  104      const populatedTx = await this.populateAddLiquidityTx(amount0Desired, amount1Desired, minToMint, deadline)\n  105      return this.sendTransaction(populatedTx, this.chain)\n  ...\n  111      minToMint: TAmount = 0,\n  112      deadline: BigNumberish = this.defaultDeadlineSeconds\n  113:   ): Promise<any> {\n  114      deadline = this.normalizeDeadline(deadline)\n  115      const amounts = [amount0Desired, amount1Desired]\n  ...\n  149      amount1Min: TAmount = 0,\n  150      deadline: BigNumberish = this.defaultDeadlineSeconds\n  151:   ): Promise<TransactionResponse> {\n  152      const populatedTx = await this.populateRemoveLiquidityTx(liquidityTokenAmount, amount0Min, amount1Min, deadline)\n  153      return this.sendTransaction(populatedTx, this.chain)\n  ...\n  159      amount1Min: TAmount = 0,\n  160      deadline: BigNumberish = this.defaultDeadlineSeconds\n  161:   ): Promise<any> {\n  162      deadline = this.normalizeDeadline(deadline)\n  163      const saddleSwap = await this.getSaddleSwap()\n  ...\n  251      amount0: TAmount,\n  252      amount1: TAmount\n  253:   ): Promise<BigNumber> {\n  254      const amounts = [amount0, amount1]\n  255      const saddleSwap = await this.getSaddleSwap()\n  ...\n  328     * @returns {Object} Ethers contract instance.\n  329     */\n  330:   public async getSaddleSwap (): Promise<any> {\n  331      const saddleSwapAddress = this.getL2SaddleSwapAddress(\n  332        this.tokenSymbol,\n  ...\n  350    }\n  351  \n  352:   public async getYieldStatsForDay (unixTimestamp: number, days: number = 1): Promise<any> {\n  353      if (this.tokenSymbol === 'HOP') {\n  354        throw new Error('getYieldStatsForDay: Unsupported, there is no AMM for HOP token.')\n  ...\n  365      }\n  366  \n  367:     const [reserve0, reserve1, data] = await Promise.all([\n  368        saddleSwap.getTokenBalance(0, callOverrides),\n  369        saddleSwap.getTokenBalance(1, callOverrides),\n  ...\n  483      const token = this.toTokenModel(this.tokenSymbol)\n  484      const decimals = token.decimals\n  485:     const [virtualPrice, depositLpTokenAmount] = await Promise.all([\n  486        this.getVirtualPrice(),\n  487        this.calculateAddLiquidityMinimum(amount0, amount1)\n  ...\n  508      const token = this.toTokenModel(this.tokenSymbol)\n  509      const decimals = token.decimals\n  510:     const [virtualPrice, withdrawLpTokenAmount] = await Promise.all([\n  511        this.getVirtualPrice(),\n  512        this.calculateRemoveLiquidityMinimumLpTokens(amount0, amount1)\n  ...\n  599    public async getReserves () {\n  600      const saddleSwap = await this.getSaddleSwap()\n  601:     return Promise.all([\n  602        saddleSwap.getTokenBalance(0),\n  603        saddleSwap.getTokenBalance(1)\n\n~/Sandbox/hop/packages/sdk/src/Base.ts:\n   28  import { getUrlFromProvider } from './utils/getUrlFromProvider'\n   29  import { parseEther, serializeTransaction } from 'ethers/lib/utils'\n   30: import { promiseTimeout } from './utils/promiseTimeout'\n   31  \n   32  export type L1Factory = L1_PolygonPosRootChainManager__factory | L1_xDaiForeignOmniBridge__factory | ArbitrumGlobalInbox__factory | L1_OptimismTokenBridge__factory\n   ..\n   85    address: string,\n   86    provider: TProvider\n   87: ): Promise<any> => {\n   88    const p = provider as any\n   89    // memoize function doesn't handle dynamic provider object well, so\n   ..\n   91    const signerAddress = p?.getAddress ? await p?.getAddress() : ''\n   92    const chainId = p?.provider?._network?.chainId ?? ''\n   93:   await p?._networkPromise\n   94    const fallbackProviderChainId = p?._network?.chainId ?? p?.providers?.[0]?._network?.chainId ?? ''\n   95    const rpcUrl = getUrlFromProvider(p)\n   ..\n  460      chain: TChain,\n  461      signer: TProvider = this.signer as Signer\n  462:   ): Promise<Signer | providers.Provider> {\n  463      // console.log('getSignerOrProvider')\n  464      chain = this.toChainModel(chain)\n  ...\n  586    }\n  587  \n  588:   protected async _getBonderAddress (token: TToken, sourceChain: TChain, destinationChain: TChain): Promise<string> {\n  589      await this.fetchConfigFromS3()\n  590      token = this.toTokenModel(token)\n  ...\n  600    }\n  601  \n  602:   protected async _getMessengerWrapperAddress (token: TToken, destinationChain: TChain): Promise<string> {\n  603      await this.fetchConfigFromS3()\n  604      token = this.toTokenModel(token)\n  ...\n  640    }\n  641  \n  642:   public async getRelayerFee (destinationChain: TChain, tokenSymbol: string): Promise<BigNumber> {\n  643      await this.fetchConfigFromS3()\n  644      destinationChain = this.toChainModel(destinationChain)\n  ...\n  837    }\n  838  \n  839:   async getTransferStatus (transferIdOrTxHash: String):Promise<any> {\n  840      const baseApiUrl = this.network === 'goerli' ? 'https://goerli-explorer-api.hop.exchange' : 'https://explorer-api.hop.exchange'\n  841      const url = `${baseApiUrl}/v1/transfers?transferId=${transferIdOrTxHash}`\n  ...\n  848    }\n  849  \n  850:   async resolveDnslink (dnslinkDomain: string): Promise<string|null> {\n  851      let dns : any\n  852  \n  ...\n  859      try {\n  860        const timeoutMs = 5 * 10000\n  861:       const ipfsHash = await promiseTimeout(new Promise((resolve, reject) => {\n  862          dns.resolveTxt(dnslinkDomain, (err: any, records: any) => {\n  863            if (err) {\n\n~/Sandbox/hop/packages/sdk/src/HopBridge.ts:\n  328      }\n  329  \n  330:     const [availableLiquidity, requiredLiquidity] = await Promise.all([\n  331        this.getFrontendAvailableLiquidity(\n  332          sourceChain,\n  ...\n  357      destinationChain?: TChain,\n  358      options: Partial<SendOptions> = {}\n  359:   ):Promise<any> {\n  360      tokenAmount = BigNumber.from(tokenAmount.toString())\n  361      if (!sourceChain) {\n  ...\n  480      sourceChain = this.toChainModel(sourceChain)\n  481      const populatedTx = await this.populateSendTx(tokenAmount, sourceChain, destinationChain, options)\n  482:     const [estimatedGasLimit, gasPrice] = await Promise.all([\n  483        this.getEstimatedGasLimit(sourceChain, destinationChain, populatedTx),\n  484        sourceChain.provider.getGasPrice()\n  ...\n  520      sourceChain: TChain,\n  521      isHTokenTransfer: boolean = false\n  522:   ):Promise<any> {\n  523      sourceChain = this.toChainModel(sourceChain)\n  524      const spender = await this.getSendApprovalAddress(sourceChain, isHTokenTransfer)\n  ...\n  581      destinationChain: TChain,\n  582      options: Partial<SendOptions> = {}\n  583:   ):Promise<any> {\n  584      if (!sourceChain) {\n  585        throw new Error('source chain is required')\n  ...\n  742    }\n  743  \n  744:   async getTokenBalance (chain: TChain, address?: string):Promise<BigNumber> {\n  745      const token = this.getCanonicalToken(chain)\n  746      return token.balanceOf(address)\n  ...\n  758      destinationChain = this.toChainModel(destinationChain)\n  759  \n  760:     const [hTokenAmount, lpFees, feeBps] = await Promise.all([\n  761        this.calcToHTokenAmount(amountIn, sourceChain),\n  762        this.getLpFees(amountIn, sourceChain, destinationChain),\n  ...\n  764      ])\n  765  \n  766:     const calcFromHTokenPromise = this.calcFromHTokenAmount(\n  767        hTokenAmount,\n  768        destinationChain\n  769      )\n  770  \n  771:     const amountOutWithoutFeePromise = calcFromHTokenPromise\n  772  \n  773      const amountInNoSlippage = BigNumber.from(1000)\n  774:     const amountOutNoSlippagePromise = this.getAmountOut(\n  775        amountInNoSlippage,\n  776        sourceChain,\n  ...\n  778      )\n  779  \n  780:     const bonderFeeRelativePromise = this.getBonderFeeRelative(\n  781        amountIn,\n  782        sourceChain,\n  ...\n  784      )\n  785  \n  786:     const destinationTxFeeDataPromise = this.getDestinationTransactionFeeData(\n  787        sourceChain,\n  788        destinationChain\n  ...\n  795        destinationTxFeeData,\n  796        amountOut\n  797:     ] = await Promise.all([\n  798:       amountOutWithoutFeePromise,\n  799:       amountOutNoSlippagePromise,\n  800:       bonderFeeRelativePromise,\n  801:       destinationTxFeeDataPromise,\n  802:       calcFromHTokenPromise\n  803      ])\n  804  \n  ...\n  823        } else {\n  824          // adjusted fee is the fee in the canonical token after adjusting for the hToken price\n  825:         ;([adjustedBonderFee, adjustedDestinationTxFee] = await Promise.all([\n  826            this.calcFromHTokenAmount(\n  827              bonderFeeRelative,\n  ...\n  913      let amountOutNoSlippage : BigNumber\n  914      if (isToHToken) {\n  915:       ;([amountOut, amountOutNoSlippage] = await Promise.all([\n  916          this.calcToHTokenAmount(amountIn, chain),\n  917          this.calcToHTokenAmount(\n  ...\n  921        ]))\n  922      } else {\n  923:       ;([amountOut, amountOutNoSlippage] = await Promise.all([\n  924          this.calcFromHTokenAmount(amountIn, chain),\n  925          this.calcFromHTokenAmount(\n  ...\n  963      sourceChain: TChain,\n  964      destinationChain: TChain\n  965:   ): Promise<BigNumber> {\n  966      const { totalFee } = await this.getSendData(\n  967        amountIn,\n  ...\n  977      sourceChain: TChain,\n  978      destinationChain: TChain\n  979:   ): Promise<BigNumber> {\n  980      sourceChain = this.toChainModel(sourceChain)\n  981      destinationChain = this.toChainModel(destinationChain)\n  ...\n  998      sourceChain: TChain,\n  999      destinationChain: TChain\n 1000:   ): Promise<BigNumber> {\n 1001      sourceChain = this.toChainModel(sourceChain)\n 1002      destinationChain = this.toChainModel(destinationChain)\n ....\n 1009      sourceChain: TChain,\n 1010      destinationChain: TChain\n 1011:   ): Promise<any> {\n 1012      sourceChain = this.toChainModel(sourceChain)\n 1013      destinationChain = this.toChainModel(destinationChain)\n ....\n 1025      const canonicalToken = this.getCanonicalToken(sourceChain)\n 1026      const chainNativeToken = this.getChainNativeToken(destinationChain)\n 1027:     const [chainNativeTokenPrice, tokenPrice, destinationChainGasPrice, bondTransferGasLimit, l1FeeInWei] = await Promise.all([\n 1028        this.priceFeed.getPriceByTokenSymbol(\n 1029          chainNativeToken.symbol\n ....\n 1037          destinationChain\n 1038        ),\n 1039:       destinationChain.equals(Chain.Optimism) ? this.getOptimismL1Fee(sourceChain, destinationChain) : Promise.resolve(BigNumber.from(0))\n 1040      ])\n 1041  \n ....\n 1091    ) {\n 1092      try {\n 1093:       const [gasLimit, { data, to }] = await Promise.all([\n 1094          this.estimateBondWithdrawalGasLimit(sourceChain, destinationChain),\n 1095          this.populateBondWithdrawalTx(sourceChain, destinationChain)\n ....\n 1107      destinationChain: TChain,\n 1108      recipient: string\n 1109:   ): Promise<any> {\n 1110      sourceChain = this.toChainModel(sourceChain)\n 1111      destinationChain = this.toChainModel(destinationChain)\n ....\n 1148      sourceChain: TChain,\n 1149      destinationChain: TChain\n 1150:   ): Promise<any> {\n 1151      destinationChain = this.toChainModel(destinationChain)\n 1152      try {\n ....\n 1174      destinationChain: TChain,\n 1175      recipient?: string\n 1176:   ): Promise<any> {\n 1177      destinationChain = this.toChainModel(destinationChain)\n 1178      let destinationBridge\n ....\n 1280      tokenAmountIn: TAmount,\n 1281      sourceChain: TChain\n 1282:   ): Promise<BigNumber> {\n 1283      tokenAmountIn = BigNumber.from(tokenAmountIn.toString())\n 1284      sourceChain = this.toChainModel(sourceChain)\n ....\n 1299      destinationChain: TChain,\n 1300      bonder: string\n 1301:   ): Promise<BigNumber> {\n 1302:     const [credit, debit] = await Promise.all([\n 1303        this.getCredit(destinationChain, bonder),\n 1304        this.getTotalDebit(destinationChain, bonder)\n ....\n 1318      sourceChain: TChain,\n 1319      destinationChain: TChain\n 1320:   ): Promise<BigNumber> {\n 1321      if (!(this.isSupportedAsset(sourceChain) && this.isSupportedAsset(destinationChain))) {\n 1322        return BigNumber.from(0)\n ....\n 1327      const token = this.toTokenModel(this.tokenSymbol)\n 1328      const bonder = await this.getBonderAddress(sourceChain, destinationChain)\n 1329:     let [availableLiquidity, unbondedTransferRootAmount, tokenPrice] = await Promise.all([\n 1330        this.getBaseAvailableCreditIncludingVault(\n 1331          sourceChain,\n ....\n 1346      if (destinationChain.isL1) {\n 1347        let pendingAmounts = BigNumber.from(0)\n 1348:       await Promise.all(bondableChains.map(async (bondableChain: string) => {\n 1349          let validChain = false\n 1350          try {\n ....\n 1443      destinationChain: TChain,\n 1444      bonder: string\n 1445:   ): Promise<BigNumber> {\n 1446      destinationChain = this.toChainModel(destinationChain)\n 1447      try {\n ....\n 1484      sourceChain: TChain,\n 1485      bonder: string\n 1486:   ): Promise<BigNumber> {\n 1487      const bridge = await this.getBridgeContract(sourceChain)\n 1488      return bridge.getCredit(bonder)\n ....\n 1497      sourceChain: TChain,\n 1498      bonder: string\n 1499:   ): Promise<BigNumber> {\n 1500      const bridge = await this.getBridgeContract(sourceChain)\n 1501      return bridge.getDebitAndAdditionalDebit(bonder)\n ....\n 1510      sourceChain: TChain,\n 1511      bonder: string\n 1512:   ): Promise<BigNumber> {\n 1513      const bridge = await this.getBridgeContract(sourceChain)\n 1514      return bridge.getRawDebit(bonder)\n ....\n 1581     * @returns {Object} Ethers contract instance.\n 1582     */\n 1583:   public async getL1Bridge (signer: TProvider = this.signer): Promise<any> {\n 1584      const bridgeAddress = this.getL1BridgeAddress(\n 1585        this.tokenSymbol,\n ....\n 1599     * @returns {Object} Ethers contract instance.\n 1600     */\n 1601:   public async getL2Bridge (chain: TChain, signer: TProvider = this.signer): Promise<any> {\n 1602      chain = this.toChainModel(chain)\n 1603      const bridgeAddress = this.getL2BridgeAddress(this.tokenSymbol, chain)\n ....\n 1627     * @returns {Object} Ethers contract instance.\n 1628     */\n 1629:   public async getAmmWrapper (chain: TChain, signer: TProvider = this.signer): Promise<any> {\n 1630      chain = this.toChainModel(chain)\n 1631      const ammWrapperAddress = this.getL2AmmWrapperAddress(\n ....\n 1651      const amm = this.getAmm(chain)\n 1652      const saddleSwap = await amm.getSaddleSwap()\n 1653:     return Promise.all([\n 1654        saddleSwap.getTokenBalance(0),\n 1655        saddleSwap.getTokenBalance(1)\n ....\n 1666    }\n 1667  \n 1668:   public async getTvlUsd (chain: TChain = this.sourceChain): Promise<number> {\n 1669      const token = this.toTokenModel(this.tokenSymbol)\n 1670:     const [tvl, tokenPrice] = await Promise.all([\n 1671        this.getTvl(chain),\n 1672        this.priceFeed.getPriceByTokenSymbol(token.canonicalSymbol)\n ....\n 1873     * @returns {Object} Time slot for the given time as BigNumber.\n 1874     */\n 1875:   public async getTimeSlot (time: TTime): Promise<BigNumber> {\n 1876      const bridge = await this.getL1Bridge()\n 1877      time = BigNumber.from(time.toString())\n ....\n 1885     * @returns {Object} The challenge period for the bridge as BigNumber.\n 1886     */\n 1887:   public async challengePeriod (): Promise<BigNumber> {\n 1888      const bridge = await this.getL1Bridge()\n 1889  \n ....\n 1896     * @returns {Object} The size of the time slots for the bridge as BigNumber.\n 1897     */\n 1898:   public async timeSlotSize (): Promise<BigNumber> {\n 1899      const bridge = await this.getL1Bridge()\n 1900  \n ....\n 1913      timeSlot: TTimeSlot,\n 1914      bonder: string\n 1915:   ): Promise<BigNumber> {\n 1916      const bridge = await this.getL1Bridge()\n 1917      timeSlot = BigNumber.from(timeSlot.toString())\n ....\n 2204      amount: TAmount,\n 2205      chain: Chain\n 2206:   ): Promise<BigNumber> {\n 2207      if (!this.doesUseAmm) {\n 2208        return BigNumber.from(amount)\n ....\n 2230      amount: TAmount,\n 2231      chain: Chain\n 2232:   ): Promise<BigNumber> {\n 2233      if (!this.doesUseAmm) {\n 2234        return BigNumber.from(amount)\n ....\n 2276    }\n 2277  \n 2278:   public async getBonderFeeAbsolute (sourceChain: TChain): Promise<BigNumber> {\n 2279      sourceChain = this.toChainModel(sourceChain)\n 2280      const token = this.toTokenModel(this.tokenSymbol)\n 2281  \n 2282:     let onChainBonderFeeAbsolutePromise : any\n 2283      if (token.canonicalSymbol === TokenModel.ETH) {\n 2284        if (Chain.Gnosis.equals(sourceChain) || Chain.Polygon.equals(sourceChain)) {\n 2285          const l2Bridge = await this.getL2Bridge(sourceChain)\n 2286:         onChainBonderFeeAbsolutePromise = l2Bridge.minBonderFeeAbsolute()\n 2287        }\n 2288      }\n 2289  \n 2290:     const [tokenPrice, onChainBonderFeeAbsolute] = await Promise.all([\n 2291        this.priceFeed.getPriceByTokenSymbol(token.canonicalSymbol),\n 2292:       onChainBonderFeeAbsolutePromise ?? Promise.resolve(BigNumber.from(0))\n 2293      ])\n 2294      const minBonderFeeUsd = 0.25\n ....\n 2335  \n 2336    // Gnosis AMB bridge\n 2337:   async getAmbBridge (chain: TChain): Promise<any> {\n 2338      chain = this.toChainModel(chain)\n 2339      if (chain.equals(Chain.Ethereum)) {\n ....\n 2379    }\n 2380  \n 2381:   async getBonderAddress (sourceChain: TChain, destinationChain: TChain): Promise<string> {\n 2382      return await this._getBonderAddress(this.tokenSymbol, sourceChain, destinationChain)\n 2383    }\n 2384  \n 2385:   async getMessengerWrapperAddress (destinationChain: TChain): Promise<string> {\n 2386      return await this._getMessengerWrapperAddress(this.tokenSymbol, destinationChain)\n 2387    }\n ....\n 2530    async getAccountLpCanonicalBalanceUsd (chain: TChain, account?: string) {\n 2531      const token = this.toTokenModel(this.tokenSymbol)\n 2532:     const [balance, tokenPrice] = await Promise.all([\n 2533        this.getAccountLpCanonicalBalance(chain, account),\n 2534        this.priceFeed.getPriceByTokenSymbol(token.canonicalSymbol)\n ....\n 2545    }\n 2546  \n 2547:   private async getRelayFeeEth (sourceChain: Chain, destinationChain: Chain): Promise<BigNumber> {\n 2548      if (this.network === NetworkSlug.Goerli) {\n 2549        if (sourceChain.isL1) {\n ....\n 2559    }\n 2560  \n 2561:   private async getConsenSysZkRelayFee (sourceChain: Chain, destinationChain: Chain): Promise<BigNumber> {\n 2562      if (this.network === NetworkSlug.Goerli) {\n 2563        if (sourceChain.isL1) {\n ....\n 2574    }\n 2575  \n 2576:   private async getScrollZkRelayFee (sourceChain: Chain, destinationChain: Chain): Promise<BigNumber> {\n 2577      if (this.network === NetworkSlug.Goerli) {\n 2578        if (sourceChain.isL1) {\n\n~/Sandbox/hop/packages/sdk/src/Token.ts:\n  131     *```\n  132     */\n  133:   public async balanceOf (address?: string): Promise<BigNumber> {\n  134      if (this.isNativeToken) {\n  135        return this.getNativeTokenBalance(address)\n  ...\n  189      amount: TAmount = ethers.constants.MaxUint256\n  190    ) {\n  191:     const [populatedTx, allowance] = await Promise.all([\n  192        this.populateApproveTx(spender, amount),\n  193        this.allowance(spender)\n  ...\n  201      spender: string,\n  202      amount: TAmount = ethers.constants.MaxUint256\n  203:   ):Promise<any> {\n  204      if (this.isNativeToken) {\n  205        return\n  ...\n  214     * @returns {Object} Ethers contract instance.\n  215     */\n  216:   public async getErc20 (): Promise<any> {\n  217      if (this.isNativeToken) {\n  218        return this.getWethContract()\n  ...\n  264    }\n  265  \n  266:   public async getNativeTokenBalance (address?: string): Promise<BigNumber> {\n  267      address = address ?? await this.getSignerAddress()\n  268      if (!address) {\n  ...\n  272    }\n  273  \n  274:   async getWethContract (): Promise<any> {\n  275      const provider = await this.getSignerOrProvider(this.chain)\n  276      return WETH9__factory.connect(this.address, provider)\n  ...\n  335      // a `from` address is required if using only provider (not signer)\n  336      const from = await this.getGasEstimateFromAddress()\n  337:     const [gasLimit, tx] = await Promise.all([\n  338        contract.connect(this.chain.provider).estimateGas.deposit({\n  339          value: amount,\n  ...\n  360    }\n  361  \n  362:   public async totalSupply (): Promise<BigNumber> {\n  363      if (this.isNativeToken) {\n  364        return BigNumber.from(0)\n\n~/Sandbox/hop/packages/sdk/src/priceFeed/Coinbase.ts:\n    4    private readonly _baseUrl: string = 'https://api.pro.coinbase.com'\n    5  \n    6:   public getPriceByTokenSymbol = async (symbol: string, base: string = 'USD'): Promise<number> => {\n    7      // pair \"USDC-USD\" doesn't exist so just return $1\n    8      if (symbol === 'USDC') {\n\n~/Sandbox/hop/packages/sdk/src/priceFeed/PriceFeed.ts:\n    3  \n    4  const cache: {\n    5:   [tokenSymbol: string]: Promise<any>\n    6  } = {}\n    7  \n    .\n   15  \n   16  interface Service {\n   17:   getPriceByTokenSymbol(symbol: string): Promise<number>\n   18  }\n   19  \n   ..\n   56        }\n   57      }\n   58:     const promise = this._getPriceByTokenSymbol(tokenSymbol)\n   59:     cache[tokenSymbol] = promise\n   60      cacheTimestamps[tokenSymbol] = Date.now()\n   61:     return promise\n   62    }\n   63  \n\n~/Sandbox/hop/packages/sdk/src/provider/IProvider.ts:\n    3  \n    4  export interface IProvider extends providers.Provider {\n    5:   getAvatar?: (nameOrAddress: string) => Promise<string>\n    6:   getResolver?: (nameOrAddress: string) => Promise<string>\n    7:   detectNetwork?: () => Promise<Network>\n    8    connection?: any\n    9  }\n\n~/Sandbox/hop/packages/sdk/src/provider/Provider.ts:\n   10  \n   11  export class RetryProvider extends providers.StaticJsonRpcProvider implements providers.Provider {\n   12:   async perform (method: string, params: any): Promise<any> {\n   13      return await super.perform(method, params)\n   14    }\n   15  \n   16    // Network\n   17:   getNetwork = rateLimitRetry(async (): Promise<Network> => {\n   18      return super.getNetwork()\n   19    })\n   20  \n   21    // Latest State\n   22:   getBlockNumber = rateLimitRetry(async (): Promise<number> => {\n   23      return super.getBlockNumber()\n   24    })\n   25  \n   26:   getGasPrice = rateLimitRetry(async (): Promise<BigNumber> => {\n   27      return super.getGasPrice()\n   28    })\n   29  \n   30    // Account\n   31:   getBalance = rateLimitRetry(async (addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> => {\n   32      return super.getBalance(addressOrName, blockTag)\n   33    })\n   34  \n   35:   getTransactionCount = rateLimitRetry(async (addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> => {\n   36      return super.getTransactionCount(addressOrName, blockTag)\n   37    })\n   38  \n   39:   getCode = rateLimitRetry(async (addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> => {\n   40      return super.getCode(addressOrName, blockTag)\n   41    })\n   42  \n   43:   getStorageAt = rateLimitRetry(async (addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> => {\n   44      return super.getStorageAt(addressOrName, position, blockTag)\n   45    })\n   46  \n   47    // Execution\n   48:   sendTransaction = rateLimitRetry(async (signedTransaction: string | Promise<string>): Promise<TransactionResponse> => {\n   49      return super.sendTransaction(signedTransaction)\n   50    })\n   51  \n   52:   call = rateLimitRetry(async (transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> => {\n   53      return super.call(transaction, blockTag)\n   54    })\n   55  \n   56:   estimateGas = rateLimitRetry(async (transaction: Deferrable<TransactionRequest>): Promise<BigNumber> => {\n   57      return super.estimateGas(transaction)\n   58    })\n   59  \n   60    // Queries\n   61:   getBlock = rateLimitRetry(async (blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> => {\n   62      return super.getBlock(blockHashOrBlockTag)\n   63    })\n   64  \n   65:   getBlockWithTransactions = rateLimitRetry(async (blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> => {\n   66      return super.getBlockWithTransactions(blockHashOrBlockTag)\n   67    })\n   68  \n   69:   getTransaction = rateLimitRetry(async (transactionHash: string | Promise<string>): Promise<TransactionResponse> => {\n   70      return super.getTransaction(transactionHash)\n   71    })\n   72  \n   73:   getTransactionReceipt = rateLimitRetry(async (transactionHash: string | Promise<string>): Promise<TransactionReceipt> => {\n   74      return super.getTransactionReceipt(transactionHash)\n   75    })\n   76  \n   77    // Bloom-filter Queries\n   78:   getLogs = rateLimitRetry(async (filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Log[]> => {\n   79      return super.getLogs(filter)\n   80    })\n   81  \n   82    // ENS\n   83:   resolveName = rateLimitRetry(async (name: string | Promise<string>): Promise<null | string> => {\n   84      return super.resolveName(name)\n   85    })\n   86  \n   87:   lookupAddress = rateLimitRetry(async (address: string | Promise<string>): Promise<null | string> => {\n   88      return super.lookupAddress(address)\n   89    })\n   90  \n   91:   getAvatar = rateLimitRetry(async (nameOrAddress: string): Promise<string> => {\n   92      return super.getAvatar(nameOrAddress)\n   93    })\n   ..\n  147  \n  148    // Network\n  149:   getNetwork = async (): Promise<Network> => {\n  150      return this.tryProvider(() => this.getActiveProvider().getNetwork())\n  151    }\n  152  \n  153    // Latest State\n  154:   getBlockNumber = async (): Promise<number> => {\n  155      return this.tryProvider(() => this.getActiveProvider().getBlockNumber())\n  156    }\n  157  \n  158:   getGasPrice = async (): Promise<BigNumber> => {\n  159      return this.tryProvider(() => this.getActiveProvider().getGasPrice())\n  160    }\n  161  \n  162    // Account\n  163:   getBalance = async (addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> => {\n  164      return this.tryProvider(() => this.getActiveProvider().getBalance(addressOrName, blockTag))\n  165    }\n  166  \n  167:   getTransactionCount = async (addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> => {\n  168      return this.tryProvider(() => this.getActiveProvider().getTransactionCount(addressOrName, blockTag))\n  169    }\n  170  \n  171:   getCode = async (addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> => {\n  172      return this.tryProvider(() => this.getActiveProvider().getCode(addressOrName, blockTag))\n  173    }\n  174  \n  175:   getStorageAt = async (addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> => {\n  176      return this.tryProvider(() => this.getActiveProvider().getStorageAt(addressOrName, position, blockTag))\n  177    }\n  178  \n  179    // Execution\n  180:   sendTransaction = async (signedTransaction: string | Promise<string>): Promise<TransactionResponse> => {\n  181      return this.tryProvider(() => this.getActiveProvider().sendTransaction(signedTransaction))\n  182    }\n  183  \n  184:   call = async (transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> => {\n  185      return this.tryProvider(() => this.getActiveProvider().call(transaction, blockTag))\n  186    }\n  187  \n  188:   estimateGas = async (transaction: Deferrable<TransactionRequest>): Promise<BigNumber> => {\n  189      return this.tryProvider(() => this.getActiveProvider().estimateGas(transaction))\n  190    }\n  191  \n  192    // Queries\n  193:   getBlock = async (blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> => {\n  194      return this.tryProvider(() => this.getActiveProvider().getBlock(blockHashOrBlockTag))\n  195    }\n  196  \n  197:   getBlockWithTransactions = async (blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> => {\n  198      return this.tryProvider(() => this.getActiveProvider().getBlockWithTransactions(blockHashOrBlockTag))\n  199    }\n  200  \n  201:   getTransaction = async (transactionHash: string): Promise<TransactionResponse> => {\n  202      return this.tryProvider(() => this.getActiveProvider().getTransaction(transactionHash))\n  203    }\n  204  \n  205:   getTransactionReceipt = async (transactionHash: string): Promise<TransactionReceipt> => {\n  206      return this.tryProvider(() => this.getActiveProvider().getTransactionReceipt(transactionHash))\n  207    }\n  208  \n  209    // Bloom-filter Queries\n  210:   getLogs = async (filter: Filter | FilterByBlockHash): Promise<Log[]> => {\n  211      return this.tryProvider(() => this.getActiveProvider().getLogs(filter))\n  212    }\n  213  \n  214    // ENS\n  215:   resolveName = async (name: string | Promise<string>): Promise<null | string> => {\n  216      return this.tryProvider(() => this.getActiveProvider().resolveName(name))\n  217    }\n  218  \n  219:   lookupAddress = async (address: string | Promise<string>): Promise<null | string> => {\n  220      return this.tryProvider(() => this.getActiveProvider().lookupAddress(address))\n  221    }\n  222  \n  223:   getFeeData (): Promise<any> {\n  224      return this.tryProvider(() => this.getActiveProvider().getFeeData())\n  225    }\n  226  \n  227:   waitForTransaction (transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n  228      return this.getActiveProvider().waitForTransaction(transactionHash, confirmations, timeout)\n  229    }\n  ...\n  271    }\n  272  \n  273:   getAvatar (address: string): Promise<string> {\n  274      return this.tryProvider(() => (this.getActiveProvider() as any).getAvatar(address))\n  275    }\n  276  \n  277:   async detectNetwork (): Promise<Network> {\n  278      return this.tryProvider(() => (this.getActiveProvider() as any).detectNetwork())\n  279    }\n  280  \n  281:   getResolver (address: string): Promise<string> {\n  282      return this.tryProvider(() => (this.getActiveProvider() as any).getResolver(address))\n  283    }\n\n~/Sandbox/hop/packages/sdk/src/relayerFee/ArbitrumRelayerFee.ts:\n   17    }\n   18  \n   19:   async getRelayCost (): Promise<BigNumber> {\n   20      const arbitrumRpcUrl = config.chains[this.network][this.chain].rpcUrl\n   21      const provider = getProviderFromUrl(arbitrumRpcUrl)\n   ..\n   64    }\n   65  \n   66:   private async _getEncodedGasInfo (): Promise<string> {\n   67      const abi = ['function getPricesInWei()']\n   68      const ethersInterface = new ethersUtils.Interface(abi)\n   ..\n   74    }\n   75  \n   76:   private async _getEncodedDistributeData (): Promise<string> {\n   77      // Do not use the zero address since some ERC20 tokens throw when sending to the zero address\n   78      const recipient = '0x0000000000000000000000000000000000000001'\n   ..\n   99    }\n  100  \n  101:   private async _getEncodedEstimateRetryableTicketData (encodedDistributeData: string): Promise<string> {\n  102      // The alias address on Arbitrum needs to have enough funds to cover the tx in order for this to work\n  103      const messengerWrapperAddress = this._getMessengerWrapperAddress()\n\n~/Sandbox/hop/packages/sdk/src/relayerFee/IRelayerFee.ts:\n    2  \n    3  export interface IRelayerFee {\n    4:   getRelayCost(chain: string): Promise<BigNumber>\n    5  }\n    6  \n\n~/Sandbox/hop/packages/sdk/src/relayerFee/RelayerFee.ts:\n   13    }\n   14  \n   15:   async getRelayCost (chainSlug: string): Promise<BigNumber> {\n   16      return this.relayerFee[chainSlug].getRelayCost()\n   17    }\n\n~/Sandbox/hop/packages/sdk/src/utils/fetchJsonOrThrow.ts:\n    1  import fetch from 'isomorphic-fetch'\n    2  import { isValidUrl } from './isValidUrl'\n    3: import { promiseTimeout } from './promiseTimeout'\n    4  \n    5  export async function fetchJsonOrThrow (url: string, timeoutMs: number = 5 * 1000) {\n    .\n   13      signal = controller.signal\n   14    }\n   15:   const res = await (signal ? fetch(url, { signal }) : promiseTimeout(fetch(url), timeoutMs))\n   16    const json = await res.json()\n   17    if (!json || !(json instanceof Object)) {\n\n~/Sandbox/hop/packages/sdk/src/utils/getBlockNumberFromDate.ts:\n    5  import { fetchJsonOrThrow } from './fetchJsonOrThrow'\n    6  \n    7: export async function getBlockNumberFromDate (chain: Chain, timestamp: number): Promise<number> {\n    8    const chainSlug = chain.slug\n    9    const chainProvider = chain.provider\n   ..\n   16  }\n   17  \n   18: async function getBlockNumberFromDateUsingEtherscan (chain: string, timestamp: number): Promise<number> {\n   19    const apiKey = etherscanApiKeys[chain]\n   20    if (!apiKey) {\n   ..\n   33  }\n   34  \n   35: async function getBlockNumberFromDateUsingLib (provider: any, timestamp: number): Promise<number> {\n   36    const blockDater = new BlockDater(provider)\n   37    const date = DateTime.fromSeconds(timestamp).toJSDate()\n\n~/Sandbox/hop/packages/sdk/src/utils/index.ts:\n    3  export * from './getProviderFromUrl'\n    4  export * from './getUrlFromProvider'\n    5: export * from './promiseTimeout'\n    6  export * from './rateLimitRetry'\n    7  export * from './serializeQueryParams'\n\n~/Sandbox/hop/packages/sdk/src/utils/promiseTimeout.ts:\n    1  class TimeoutError extends Error {}\n    2  \n    3: export async function promiseTimeout<T> (promise: Promise<T>, timeout: number): Promise<T> {\n    4:   return await new Promise(async (resolve, reject) => {\n    5      let timedout = false\n    6      const t = setTimeout(() => {\n    .\n    9      }, timeout)\n   10  \n   11:     // make it a promise if it's not one\n   12:     Promise.resolve(promise)\n   13        .then((result: any) => {\n   14          clearTimeout(t)\n\n~/Sandbox/hop/packages/sdk/src/utils/rateLimitRetry.ts:\n    1  import wait from './wait'\n    2: import { promiseTimeout } from './promiseTimeout'\n    3  import { rateLimitMaxRetries, rpcTimeoutSeconds } from '../config'\n    4  \n    5: export function rateLimitRetry<FN extends (...args: any[]) => Promise<any>> (fn: FN): (...args: Parameters<FN>) => Promise<Awaited<ReturnType<FN>>> {\n    6    const id = `${Date.now()}`\n    7    const logPrefix = `ratelimitRetry-${id}`\n    8:   return async (...args: Parameters<FN>): Promise<Awaited<ReturnType<FN>>> => {\n    9      let retries = 0\n   10:     const retry = () => promiseTimeout(fn(...args), rpcTimeoutSeconds * 1000) // eslint-disable-line\n   11      while (true) {\n   12        try {\n\n~/Sandbox/hop/packages/sdk/src/utils/wait.ts:\n    1  // wait util will wait specified amount of time in milliseconds\n    2  export const wait = async (timeoutMs: number) => {\n    3:   return new Promise(resolve => setTimeout(() => resolve(null), timeoutMs))\n    4  }\n    5  \n\n~/Sandbox/hop/packages/sdk/src/watchers/CanonicalL1ToL2Watcher.ts:\n   16    }\n   17  \n   18:   public async pollFn (): Promise<any> {\n   19      if (this.destinationChain.equals(Chain.Gnosis)) {\n   20        return this.gnosisWatcher()\n\n~/Sandbox/hop/packages/sdk/src/watchers/CanonicalL2ToL1Watcher.ts:\n   17    }\n   18  \n   19:   public async pollFn (): Promise<any> {\n   20      if (this.sourceChain.equals(Chain.Gnosis)) {\n   21        return this.gnosisWatcher()\n\n~/Sandbox/hop/packages/sdk/src/watchers/L1ToL2Watcher.ts:\n   20    }\n   21  \n   22:   public async pollFn (): Promise<any> {\n   23      const destWrapper = await this.bridge.getAmmWrapper(this.destinationChain)\n   24      const l1Bridge = await this.bridge.getL1Bridge()\n\n~/Sandbox/hop/packages/sdk/src/watchers/L2ToL1Watcher.ts:\n   14    }\n   15  \n   16:   public async pollFn (): Promise<any> {\n   17      const l1Bridge = await this.bridge.getL1Bridge()\n   18      let transferHash: string = ''\n\n~/Sandbox/hop/packages/sdk/src/watchers/L2ToL2Watcher.ts:\n   15    }\n   16  \n   17:   public async pollFn (): Promise<any> {\n   18      const destBridge = await this.bridge.getL2Bridge(this.destinationChain)\n   19      let transferHash: string = ''\n\n~/Sandbox/hop/packages/sdk/test/sdk.test.ts:\n   82        console.log('tx hash:', txHash)\n   83  \n   84:       const res = await new Promise(resolve => {\n   85          let sourceReceipt: any = null\n   86          let destinationReceipt: any = null\n   ..\n  121        console.log('waiting for receipts')\n  122  \n  123:       const res = await new Promise(resolve => {\n  124          let sourceReceipt: any = null\n  125          let destinationReceipt: any = null\n  ...\n  157        console.log('tx hash:', txHash)\n  158  \n  159:       const res = await new Promise(resolve => {\n  160          let sourceReceipt: any = null\n  161          let destinationReceipt: any = null\n  ...\n  201        console.log('tx hash:', txHash)\n  202  \n  203:       const res = await new Promise(resolve => {\n  204          let sourceReceipt: any = null\n  205          let destinationReceipt: any = null\n  ...\n  245          '0x152348cfaf5344668191859ab95d858d31fd347f807c615e26e027b61fd976f3'\n  246  \n  247:       const res = await new Promise(resolve => {\n  248          let sourceReceipt: any = null\n  249          let destinationReceipt: any = null\n  ...\n  295        console.log('tx hash:', txHash)\n  296  \n  297:       const res = await new Promise(resolve => {\n  298          let sourceReceipt: any = null\n  299          let destinationReceipt: any = null\n\n~/Sandbox/hop/packages/sdk-api-example/package-lock.json:\n 2953        }\n 2954      },\n 2955:     \"node_modules/es6-promise\": {\n 2956        \"version\": \"4.2.8\",\n 2957:       \"resolved\": \"https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz\",\n 2958        \"integrity\": \"sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w==\"\n 2959      },\n ....\n 3063          \"eslint-plugin-import\": \"^2.25.2\",\n 3064          \"eslint-plugin-n\": \"^15.0.0\",\n 3065:         \"eslint-plugin-promise\": \"^6.0.0\"\n 3066        }\n 3067      },\n ....\n 3254        }\n 3255      },\n 3256:     \"node_modules/eslint-plugin-promise\": {\n 3257        \"version\": \"6.0.1\",\n 3258:       \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-6.0.1.tgz\",\n 3259        \"integrity\": \"sha512-uM4Tgo5u3UWQiroOyDEsYcVMOo7re3zmno0IZmB5auxoaQNIceAbXEkSt8RNrKtaYehARHG06pYK6K1JhtP0Zw==\",\n 3260        \"dev\": true,\n ....\n 3528          \"servify\": \"^0.1.12\",\n 3529          \"ws\": \"^3.0.0\",\n 3530:         \"xhr-request-promise\": \"^0.1.2\"\n 3531        }\n 3532      },\n ....\n 5947        \"optional\": true\n 5948      },\n 5949:     \"node_modules/mkdirp-promise\": {\n 5950        \"version\": \"5.0.1\",\n 5951:       \"resolved\": \"https://registry.npmjs.org/mkdirp-promise/-/mkdirp-promise-5.0.1.tgz\",\n 5952        \"integrity\": \"sha512-Hepn5kb1lJPtVW84RFT40YG1OddBNTOVUZR2bzQUHc+Z03en8/3uX0+060JDhcEzyO08HmipsN9DcnFMxhIL9w==\",\n 5953:       \"deprecated\": \"This package is broken and no longer maintained. 'mkdirp' itself supports promises now, please switch to that.\",\n 5954        \"dependencies\": {\n 5955          \"mkdirp\": \"*\"\n ....\n 7352          \"eslint-plugin-import\": \"^2.26.0\",\n 7353          \"eslint-plugin-n\": \"^15.1.0\",\n 7354:         \"eslint-plugin-promise\": \"^6.0.0\",\n 7355          \"eslint-plugin-react\": \"^7.28.0\",\n 7356          \"standard-engine\": \"^15.0.0\"\n ....\n 7552          \"got\": \"^7.1.0\",\n 7553          \"mime-types\": \"^2.1.16\",\n 7554:         \"mkdirp-promise\": \"^5.0.1\",\n 7555          \"mock-fs\": \"^4.1.0\",\n 7556          \"setimmediate\": \"^1.0.5\",\n ....\n 8199          \"bn.js\": \"^4.11.6\",\n 8200          \"elliptic\": \"^6.4.0\",\n 8201:         \"xhr-request-promise\": \"^0.1.2\"\n 8202        }\n 8203      },\n ....\n 8300          \"abortcontroller-polyfill\": \"^1.7.3\",\n 8301          \"cross-fetch\": \"^3.1.4\",\n 8302:         \"es6-promise\": \"^4.2.8\",\n 8303          \"web3-core-helpers\": \"1.7.5\"\n 8304        },\n ....\n 8539        }\n 8540      },\n 8541:     \"node_modules/xhr-request-promise\": {\n 8542        \"version\": \"0.1.3\",\n 8543:       \"resolved\": \"https://registry.npmjs.org/xhr-request-promise/-/xhr-request-promise-0.1.3.tgz\",\n 8544        \"integrity\": \"sha512-YUBytBsuwgitWtdRzXDDkWAXzhdGB8bYm0sSzMPZT7Z2MBjMSTHFsyCT1yCRATY+XC69DUrQraRAEgcoCRaIPg==\",\n 8545        \"dependencies\": {\n ....\n 10803        }\n 10804      },\n 10805:     \"es6-promise\": {\n 10806        \"version\": \"4.2.8\",\n 10807:       \"resolved\": \"https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz\",\n 10808        \"integrity\": \"sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w==\"\n 10809      },\n .....\n 11053        }\n 11054      },\n 11055:     \"eslint-plugin-promise\": {\n 11056        \"version\": \"6.0.1\",\n 11057:       \"resolved\": \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-6.0.1.tgz\",\n 11058        \"integrity\": \"sha512-uM4Tgo5u3UWQiroOyDEsYcVMOo7re3zmno0IZmB5auxoaQNIceAbXEkSt8RNrKtaYehARHG06pYK6K1JhtP0Zw==\",\n 11059        \"dev\": true\n .....\n 11214          \"servify\": \"^0.1.12\",\n 11215          \"ws\": \"^3.0.0\",\n 11216:         \"xhr-request-promise\": \"^0.1.2\"\n 11217        },\n 11218        \"dependencies\": {\n .....\n 12987        \"optional\": true\n 12988      },\n 12989:     \"mkdirp-promise\": {\n 12990        \"version\": \"5.0.1\",\n 12991:       \"resolved\": \"https://registry.npmjs.org/mkdirp-promise/-/mkdirp-promise-5.0.1.tgz\",\n 12992        \"integrity\": \"sha512-Hepn5kb1lJPtVW84RFT40YG1OddBNTOVUZR2bzQUHc+Z03en8/3uX0+060JDhcEzyO08HmipsN9DcnFMxhIL9w==\",\n 12993        \"requires\": {\n .....\n 14020          \"eslint-plugin-import\": \"^2.26.0\",\n 14021          \"eslint-plugin-n\": \"^15.1.0\",\n 14022:         \"eslint-plugin-promise\": \"^6.0.0\",\n 14023          \"eslint-plugin-react\": \"^7.28.0\",\n 14024          \"standard-engine\": \"^15.0.0\"\n .....\n 14157          \"got\": \"^7.1.0\",\n 14158          \"mime-types\": \"^2.1.16\",\n 14159:         \"mkdirp-promise\": \"^5.0.1\",\n 14160          \"mock-fs\": \"^4.1.0\",\n 14161          \"setimmediate\": \"^1.0.5\",\n .....\n 14690              \"bn.js\": \"^4.11.6\",\n 14691              \"elliptic\": \"^6.4.0\",\n 14692:             \"xhr-request-promise\": \"^0.1.2\"\n 14693            }\n 14694          },\n .....\n 14776          \"abortcontroller-polyfill\": \"^1.7.3\",\n 14777          \"cross-fetch\": \"^3.1.4\",\n 14778:         \"es6-promise\": \"^4.2.8\",\n 14779          \"web3-core-helpers\": \"1.7.5\"\n 14780        }\n .....\n 14984        }\n 14985      },\n 14986:     \"xhr-request-promise\": {\n 14987        \"version\": \"0.1.3\",\n 14988:       \"resolved\": \"https://registry.npmjs.org/xhr-request-promise/-/xhr-request-promise-0.1.3.tgz\",\n 14989        \"integrity\": \"sha512-YUBytBsuwgitWtdRzXDDkWAXzhdGB8bYm0sSzMPZT7Z2MBjMSTHFsyCT1yCRATY+XC69DUrQraRAEgcoCRaIPg==\",\n 14990        \"requires\": {\n\n~/Sandbox/hop/packages/sdk-api-example/yarn.lock:\n  578      semver \"^7.3.8\"\n  579  \n  580: eslint-plugin-promise@^6.0.0:\n  581    version \"6.1.1\"\n  582:   resolved \"https://registry.yarnpkg.com/eslint-plugin-promise/-/eslint-plugin-promise-6.1.1.tgz#269a3e2772f62875661220631bd4dafcb4083816\"\n  583    integrity sha512-tjqWDwVZQo7UIPMeDReOpUgHCmCiH+ePnVT+5zVapL0uuHnegBUs2smM13CzOs2Xb5+MHMRFTs9v24yjba4Oig==\n  584  \n  ...\n 1751      eslint-plugin-import \"^2.26.0\"\n 1752      eslint-plugin-n \"^15.1.0\"\n 1753:     eslint-plugin-promise \"^6.0.0\"\n 1754      eslint-plugin-react \"^7.28.0\"\n 1755      standard-engine \"^15.0.0\"\n\n~/Sandbox/hop/packages/sdk-demo/package.json:\n   68      \"eslint-plugin-import\": \"^2.26.0\",\n   69      \"eslint-plugin-n\": \"^15.2.1\",\n   70:     \"eslint-plugin-promise\": \"^6.0.0\",\n   71      \"eslint-plugin-react\": \"^7.30.0\",\n   72      \"eslint-plugin-react-hooks\": \"^4.5.0\",\n\n~/Sandbox/hop/packages/sdk-demo/yarn.lock:\n 4827      semver \"^7.3.7\"\n 4828  \n 4829: eslint-plugin-promise@^6.0.0:\n 4830    version \"6.0.0\"\n 4831:   resolved \"https://registry.npmjs.org/eslint-plugin-promise/-/eslint-plugin-promise-6.0.0.tgz\"\n 4832    integrity sha512-7GPezalm5Bfi/E22PnQxDWH2iW9GTvAlUNTztemeHb6c1BniSyoeTrM87JkC0wYdi6aQrZX9p2qEiAno8aTcbw==\n 4833  \n ....\n 8249    integrity sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==\n 8250  \n 8251: promise@^8.1.0:\n 8252    version \"8.1.0\"\n 8253:   resolved \"https://registry.npmjs.org/promise/-/promise-8.1.0.tgz\"\n 8254    integrity sha512-W04AqnILOL/sPRXziNicCjSNRruLAuIHEOVBazepu0545DDNGYHz7ar9ZgZ1fMU8/MA4mVxp5rkBWRi6OXIy3Q==\n 8255    dependencies:\n ....\n 8391      core-js \"^3.19.2\"\n 8392      object-assign \"^4.1.1\"\n 8393:     promise \"^8.1.0\"\n 8394      raf \"^3.4.1\"\n 8395      regenerator-runtime \"^0.13.9\"\n\n~/Sandbox/hop/packages/stats-worker/package-lock.json:\n 6779          \"mkdirp\": \"^1.0.3\",\n 6780          \"p-map\": \"^4.0.0\",\n 6781:         \"promise-inflight\": \"^1.0.1\",\n 6782          \"rimraf\": \"^3.0.2\",\n 6783          \"ssri\": \"^8.0.1\",\n ....\n 8361        }\n 8362      },\n 8363:     \"node_modules/es6-promise\": {\n 8364        \"version\": \"4.2.8\",\n 8365:       \"resolved\": \"https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz\",\n 8366        \"integrity\": \"sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w==\"\n 8367      },\n ....\n 8908          \"servify\": \"^0.1.12\",\n 8909          \"ws\": \"^3.0.0\",\n 8910:         \"xhr-request-promise\": \"^0.1.2\"\n 8911        }\n 8912      },\n ....\n 11369        \"dev\": true\n 11370      },\n 11371:     \"node_modules/is-promise\": {\n 11372        \"version\": \"2.2.2\",\n 11373:       \"resolved\": \"https://registry.npmjs.org/is-promise/-/is-promise-2.2.2.tgz\",\n 11374        \"integrity\": \"sha512-+lP4/6lKUBfQjZ2pdxThZvLUAafmZb8OAxFb8XXtiQmS35INgr85hdOGoEs124ez1FCnZJt6jau/T+alh58QFQ==\",\n 11375        \"dev\": true\n .....\n 12843          \"@samverschueren/stream-to-observable\": \"^0.3.0\",\n 12844          \"is-observable\": \"^1.1.0\",\n 12845:         \"is-promise\": \"^2.1.0\",\n 12846          \"is-stream\": \"^1.1.0\",\n 12847          \"listr-silent-renderer\": \"^1.1.1\",\n .....\n 13406          \"minipass-pipeline\": \"^1.2.4\",\n 13407          \"negotiator\": \"^0.6.2\",\n 13408:         \"promise-retry\": \"^2.0.1\",\n 13409          \"socks-proxy-agent\": \"^6.0.0\",\n 13410          \"ssri\": \"^8.0.0\"\n .....\n 13471          \"map-age-cleaner\": \"^0.1.3\",\n 13472          \"mimic-fn\": \"^2.1.0\",\n 13473:         \"p-is-promise\": \"^2.1.0\"\n 13474        },\n 13475        \"engines\": {\n .....\n 13787        \"optional\": true\n 13788      },\n 13789:     \"node_modules/mkdirp-promise\": {\n 13790        \"version\": \"5.0.1\",\n 13791:       \"resolved\": \"https://registry.npmjs.org/mkdirp-promise/-/mkdirp-promise-5.0.1.tgz\",\n 13792        \"integrity\": \"sha512-Hepn5kb1lJPtVW84RFT40YG1OddBNTOVUZR2bzQUHc+Z03en8/3uX0+060JDhcEzyO08HmipsN9DcnFMxhIL9w==\",\n 13793:       \"deprecated\": \"This package is broken and no longer maintained. 'mkdirp' itself supports promises now, please switch to that.\",\n 13794        \"dependencies\": {\n 13795          \"mkdirp\": \"*\"\n .....\n 14579        }\n 14580      },\n 14581:     \"node_modules/p-is-promise\": {\n 14582        \"version\": \"2.1.0\",\n 14583:       \"resolved\": \"https://registry.npmjs.org/p-is-promise/-/p-is-promise-2.1.0.tgz\",\n 14584        \"integrity\": \"sha512-Y3W0wlRPK8ZMRbNq97l4M5otioeA5lm1z7bkNkxCka8HSPjR0xRWmpCmc9utiaLP9Jb1eD8BgeIxTW4AIF45Pg==\",\n 14585        \"dev\": true,\n .....\n 14846        }\n 14847      },\n 14848:     \"node_modules/pinkie-promise\": {\n 14849        \"version\": \"2.0.1\",\n 14850:       \"resolved\": \"https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.1.tgz\",\n 14851        \"integrity\": \"sha512-0Gni6D4UcLTbv9c57DfxDGdr41XfgUjqWZu492f0cIGr16zDU06BWP/RAEvOuo7CQ0CNjHaLlM59YJJFm3NWlw==\",\n 14852        \"dev\": true,\n .....\n 15236          \"object-assign\": \"^4.0.1\",\n 15237          \"pify\": \"^2.0.0\",\n 15238:         \"pinkie-promise\": \"^2.0.0\"\n 15239        },\n 15240        \"engines\": {\n .....\n 15457          \"object-assign\": \"^4.0.1\",\n 15458          \"pify\": \"^2.0.0\",\n 15459:         \"pinkie-promise\": \"^2.0.0\"\n 15460        },\n 15461        \"engines\": {\n .....\n 15600        }\n 15601      },\n 15602:     \"node_modules/promise-inflight\": {\n 15603        \"version\": \"1.0.1\",\n 15604:       \"resolved\": \"https://registry.npmjs.org/promise-inflight/-/promise-inflight-1.0.1.tgz\",\n 15605        \"integrity\": \"sha512-6zWPyEOFaQBJYcGMHBKTKJ3u6TBsnMFOIZSa6ce1e/ZrrsOlnHRHbabMjLiBYKp+n44X9eUI6VUPaukCXHuG4g==\",\n 15606        \"optional\": true\n 15607      },\n 15608:     \"node_modules/promise-retry\": {\n 15609        \"version\": \"2.0.1\",\n 15610:       \"resolved\": \"https://registry.npmjs.org/promise-retry/-/promise-retry-2.0.1.tgz\",\n 15611        \"integrity\": \"sha512-y+WKFlBR8BGXnsNlIHFGPZmyDf3DFMoLhaflAnyZgV6rG6xu+JwesTo2Q9R6XwYmtmwAFCkAk3e35jEdoeh/3g==\",\n 15612        \"optional\": true,\n .....\n 16922          \"got\": \"^7.1.0\",\n 16923          \"mime-types\": \"^2.1.16\",\n 16924:         \"mkdirp-promise\": \"^5.0.1\",\n 16925          \"mock-fs\": \"^4.1.0\",\n 16926          \"setimmediate\": \"^1.0.5\",\n .....\n 18369          \"bn.js\": \"^4.11.6\",\n 18370          \"elliptic\": \"^6.4.0\",\n 18371:         \"xhr-request-promise\": \"^0.1.2\"\n 18372        }\n 18373      },\n .....\n 18470          \"abortcontroller-polyfill\": \"^1.7.3\",\n 18471          \"cross-fetch\": \"^3.1.4\",\n 18472:         \"es6-promise\": \"^4.2.8\",\n 18473          \"web3-core-helpers\": \"1.7.5\"\n 18474        },\n .....\n 18822        }\n 18823      },\n 18824:     \"node_modules/xhr-request-promise\": {\n 18825        \"version\": \"0.1.3\",\n 18826:       \"resolved\": \"https://registry.npmjs.org/xhr-request-promise/-/xhr-request-promise-0.1.3.tgz\",\n 18827        \"integrity\": \"sha512-YUBytBsuwgitWtdRzXDDkWAXzhdGB8bYm0sSzMPZT7Z2MBjMSTHFsyCT1yCRATY+XC69DUrQraRAEgcoCRaIPg==\",\n 18828        \"dependencies\": {\n .....\n 23715          \"mkdirp\": \"^1.0.3\",\n 23716          \"p-map\": \"^4.0.0\",\n 23717:         \"promise-inflight\": \"^1.0.1\",\n 23718          \"rimraf\": \"^3.0.2\",\n 23719          \"ssri\": \"^8.0.1\",\n .....\n 24979        }\n 24980      },\n 24981:     \"es6-promise\": {\n 24982        \"version\": \"4.2.8\",\n 24983:       \"resolved\": \"https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz\",\n 24984        \"integrity\": \"sha512-HJDGx5daxeIvxdBxvG2cb9g4tEvwIk3i8+nhX0yGrYmZUzbkdg8QbDevheDB8gd0//uPj4c1EQua8Q+MViT0/w==\"\n 24985      },\n .....\n 25385          \"servify\": \"^0.1.12\",\n 25386          \"ws\": \"^3.0.0\",\n 25387:         \"xhr-request-promise\": \"^0.1.2\"\n 25388        },\n 25389        \"dependencies\": {\n .....\n 27145        \"dev\": true\n 27146      },\n 27147:     \"is-promise\": {\n 27148        \"version\": \"2.2.2\",\n 27149:       \"resolved\": \"https://registry.npmjs.org/is-promise/-/is-promise-2.2.2.tgz\",\n 27150        \"integrity\": \"sha512-+lP4/6lKUBfQjZ2pdxThZvLUAafmZb8OAxFb8XXtiQmS35INgr85hdOGoEs124ez1FCnZJt6jau/T+alh58QFQ==\",\n 27151        \"dev\": true\n .....\n 28302          \"@samverschueren/stream-to-observable\": \"^0.3.0\",\n 28303          \"is-observable\": \"^1.1.0\",\n 28304:         \"is-promise\": \"^2.1.0\",\n 28305          \"is-stream\": \"^1.1.0\",\n 28306          \"listr-silent-renderer\": \"^1.1.1\",\n .....\n 28748          \"minipass-pipeline\": \"^1.2.4\",\n 28749          \"negotiator\": \"^0.6.2\",\n 28750:         \"promise-retry\": \"^2.0.1\",\n 28751          \"socks-proxy-agent\": \"^6.0.0\",\n 28752          \"ssri\": \"^8.0.0\"\n .....\n 28800          \"map-age-cleaner\": \"^0.1.3\",\n 28801          \"mimic-fn\": \"^2.1.0\",\n 28802:         \"p-is-promise\": \"^2.1.0\"\n 28803        }\n 28804      },\n .....\n 29048        \"optional\": true\n 29049      },\n 29050:     \"mkdirp-promise\": {\n 29051        \"version\": \"5.0.1\",\n 29052:       \"resolved\": \"https://registry.npmjs.org/mkdirp-promise/-/mkdirp-promise-5.0.1.tgz\",\n 29053        \"integrity\": \"sha512-Hepn5kb1lJPtVW84RFT40YG1OddBNTOVUZR2bzQUHc+Z03en8/3uX0+060JDhcEzyO08HmipsN9DcnFMxhIL9w==\",\n 29054        \"requires\": {\n .....\n 29661        \"dev\": true\n 29662      },\n 29663:     \"p-is-promise\": {\n 29664        \"version\": \"2.1.0\",\n 29665:       \"resolved\": \"https://registry.npmjs.org/p-is-promise/-/p-is-promise-2.1.0.tgz\",\n 29666        \"integrity\": \"sha512-Y3W0wlRPK8ZMRbNq97l4M5otioeA5lm1z7bkNkxCka8HSPjR0xRWmpCmc9utiaLP9Jb1eD8BgeIxTW4AIF45Pg==\",\n 29667        \"dev\": true\n .....\n 29864        \"dev\": true\n 29865      },\n 29866:     \"pinkie-promise\": {\n 29867        \"version\": \"2.0.1\",\n 29868:       \"resolved\": \"https://registry.npmjs.org/pinkie-promise/-/pinkie-promise-2.0.1.tgz\",\n 29869        \"integrity\": \"sha512-0Gni6D4UcLTbv9c57DfxDGdr41XfgUjqWZu492f0cIGr16zDU06BWP/RAEvOuo7CQ0CNjHaLlM59YJJFm3NWlw==\",\n 29870        \"dev\": true,\n .....\n 30172              \"object-assign\": \"^4.0.1\",\n 30173              \"pify\": \"^2.0.0\",\n 30174:             \"pinkie-promise\": \"^2.0.0\"\n 30175            }\n 30176          },\n .....\n 30346              \"object-assign\": \"^4.0.1\",\n 30347              \"pify\": \"^2.0.0\",\n 30348:             \"pinkie-promise\": \"^2.0.0\"\n 30349            }\n 30350          },\n .....\n 30454        \"dev\": true\n 30455      },\n 30456:     \"promise-inflight\": {\n 30457        \"version\": \"1.0.1\",\n 30458:       \"resolved\": \"https://registry.npmjs.org/promise-inflight/-/promise-inflight-1.0.1.tgz\",\n 30459        \"integrity\": \"sha512-6zWPyEOFaQBJYcGMHBKTKJ3u6TBsnMFOIZSa6ce1e/ZrrsOlnHRHbabMjLiBYKp+n44X9eUI6VUPaukCXHuG4g==\",\n 30460        \"optional\": true\n 30461      },\n 30462:     \"promise-retry\": {\n 30463        \"version\": \"2.0.1\",\n 30464:       \"resolved\": \"https://registry.npmjs.org/promise-retry/-/promise-retry-2.0.1.tgz\",\n 30465        \"integrity\": \"sha512-y+WKFlBR8BGXnsNlIHFGPZmyDf3DFMoLhaflAnyZgV6rG6xu+JwesTo2Q9R6XwYmtmwAFCkAk3e35jEdoeh/3g==\",\n 30466        \"optional\": true,\n .....\n 31462          \"got\": \"^7.1.0\",\n 31463          \"mime-types\": \"^2.1.16\",\n 31464:         \"mkdirp-promise\": \"^5.0.1\",\n 31465          \"mock-fs\": \"^4.1.0\",\n 31466          \"setimmediate\": \"^1.0.5\",\n .....\n 32596              \"bn.js\": \"^4.11.6\",\n 32597              \"elliptic\": \"^6.4.0\",\n 32598:             \"xhr-request-promise\": \"^0.1.2\"\n 32599            }\n 32600          },\n .....\n 32682          \"abortcontroller-polyfill\": \"^1.7.3\",\n 32683          \"cross-fetch\": \"^3.1.4\",\n 32684:         \"es6-promise\": \"^4.2.8\",\n 32685          \"web3-core-helpers\": \"1.7.5\"\n 32686        }\n .....\n 32986        }\n 32987      },\n 32988:     \"xhr-request-promise\": {\n 32989        \"version\": \"0.1.3\",\n 32990:       \"resolved\": \"https://registry.npmjs.org/xhr-request-promise/-/xhr-request-promise-0.1.3.tgz\",\n 32991        \"integrity\": \"sha512-YUBytBsuwgitWtdRzXDDkWAXzhdGB8bYm0sSzMPZT7Z2MBjMSTHFsyCT1yCRATY+XC69DUrQraRAEgcoCRaIPg==\",\n 32992        \"requires\": {\n\n~/Sandbox/hop/packages/stats-worker/yarn.lock:\n 2604      mkdirp \"^1.0.3\"\n 2605      p-map \"^4.0.0\"\n 2606:     promise-inflight \"^1.0.1\"\n 2607      rimraf \"^3.0.2\"\n 2608      ssri \"^8.0.1\"\n ....\n 3843      object-assign \"^4.0.1\"\n 3844      pify \"^2.0.0\"\n 3845:     pinkie-promise \"^2.0.0\"\n 3846  \n 3847  globby@^10.0.1:\n ....\n 4307    integrity sha512-bCYeRA2rVibKZd+s2625gGnGF/t7DSqDs4dP7CrLA1m7jKWz6pps0LpYLJN8Q64HtmPKJ1hrN3nzPNKFEKOUiQ==\n 4308  \n 4309: is-promise@^2.1.0:\n 4310    version \"2.2.2\"\n 4311:   resolved \"https://registry.yarnpkg.com/is-promise/-/is-promise-2.2.2.tgz#39ab959ccbf9a774cf079f7b40c7a26f763135f1\"\n 4312    integrity sha512-+lP4/6lKUBfQjZ2pdxThZvLUAafmZb8OAxFb8XXtiQmS35INgr85hdOGoEs124ez1FCnZJt6jau/T+alh58QFQ==\n 4313  \n ....\n 5045      \"@samverschueren/stream-to-observable\" \"^0.3.0\"\n 5046      is-observable \"^1.1.0\"\n 5047:     is-promise \"^2.1.0\"\n 5048      is-stream \"^1.1.0\"\n 5049      listr-silent-renderer \"^1.1.1\"\n ....\n 5182      minipass-pipeline \"^1.2.4\"\n 5183      negotiator \"^0.6.2\"\n 5184:     promise-retry \"^2.0.1\"\n 5185      socks-proxy-agent \"^6.0.0\"\n 5186      ssri \"^8.0.0\"\n ....\n 5212      map-age-cleaner \"^0.1.3\"\n 5213      mimic-fn \"^2.1.0\"\n 5214:     p-is-promise \"^2.1.0\"\n 5215  \n 5216  memory-stream@0:\n ....\n 5711    integrity sha512-vpm09aKwq6H9phqRQzecoDpD8TmVyGw70qmWlyq5onxY7tqyTTFVvxMykxQSQKILBSFlbXpypIw2T1Ml7+DDtw==\n 5712  \n 5713: p-is-promise@^2.1.0:\n 5714    version \"2.1.0\"\n 5715:   resolved \"https://registry.yarnpkg.com/p-is-promise/-/p-is-promise-2.1.0.tgz#918cebaea248a62cf7ffab8e3bca8c5f882fc42e\"\n 5716    integrity sha512-Y3W0wlRPK8ZMRbNq97l4M5otioeA5lm1z7bkNkxCka8HSPjR0xRWmpCmc9utiaLP9Jb1eD8BgeIxTW4AIF45Pg==\n 5717  \n ....\n 5851    integrity sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==\n 5852  \n 5853: pinkie-promise@^2.0.0:\n 5854    version \"2.0.1\"\n 5855:   resolved \"https://registry.yarnpkg.com/pinkie-promise/-/pinkie-promise-2.0.1.tgz#2135d6dfa7a358c069ac9b178776288228450ffa\"\n 5856    integrity sha512-0Gni6D4UcLTbv9c57DfxDGdr41XfgUjqWZu492f0cIGr16zDU06BWP/RAEvOuo7CQ0CNjHaLlM59YJJFm3NWlw==\n 5857    dependencies:\n ....\n 6048    integrity sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==\n 6049  \n 6050: promise-inflight@^1.0.1:\n 6051    version \"1.0.1\"\n 6052:   resolved \"https://registry.yarnpkg.com/promise-inflight/-/promise-inflight-1.0.1.tgz#98472870bf228132fcbdd868129bad12c3c029e3\"\n 6053    integrity sha512-6zWPyEOFaQBJYcGMHBKTKJ3u6TBsnMFOIZSa6ce1e/ZrrsOlnHRHbabMjLiBYKp+n44X9eUI6VUPaukCXHuG4g==\n 6054  \n 6055: promise-retry@^2.0.1:\n 6056    version \"2.0.1\"\n 6057:   resolved \"https://registry.yarnpkg.com/promise-retry/-/promise-retry-2.0.1.tgz#ff747a13620ab57ba688f5fc67855410c370da22\"\n 6058    integrity sha512-y+WKFlBR8BGXnsNlIHFGPZmyDf3DFMoLhaflAnyZgV6rG6xu+JwesTo2Q9R6XwYmtmwAFCkAk3e35jEdoeh/3g==\n 6059    dependencies:\n\n~/Sandbox/hop/packages/stats-worker/src/AmmStats.ts:\n  171  \n  172      for (let i = 0; i < this.days; i++) {\n  173:       const promises: any[] = []\n  174        const now = DateTime.utc()\n  175        const startDate = now.minus({ day: i + this.offsetDays }).startOf('day')\n  ...\n  189              continue\n  190            }\n  191:           promises.push(\n  192              (async () => {\n  193                try {\n  ...\n  275          }\n  276        }\n  277:       await Promise.all(promises)\n  278      }\n  279    }\n\n~/Sandbox/hop/packages/stats-worker/src/BonderStats.ts:\n   49  \n   50  const wait = (t: number) =>\n   51:   new Promise(resolve => setTimeout(() => resolve(null), t))\n   52  \n   53  const allProviders: Record<string, any> = {\n   ..\n  169        for (const chunks of allChunks) {\n  170          csv.push(\n  171:           ...(await Promise.all(\n  172              chunks.map(async (day: number) => {\n  173                return this.trackBonderFeeDay(day, token)\n  ...\n  250            await this.trackBonderFee()\n  251          } else {\n  252:           await Promise.all([\n  253              this.trackProfit(),\n  254              this.trackBonderFee(),\n  ...\n  717        for (const chunks of allChunks) {\n  718          csv.push(\n  719:           ...(await Promise.all(\n  720              chunks.map(async (day: number) => {\n  721                return this.trackProfitDay(day, token, prices)\n  ...\n  755          const bonderBalances: any = {}\n  756          const dbData: any = {}\n  757:         const chainPromises: any[] = []\n  758  \n  759          for (const sourceChain in bonderMap) {\n  ...\n  761              const chain = destinationChain\n  762  \n  763:             chainPromises.push(\n  764:               new Promise(async (resolve, reject) => {\n  765                  try {\n  766                    let provider = allProviders[chain]\n  ...\n  808                    )\n  809  \n  810:                   const balancePromises: Promise<any>[] = []\n  811                    if (tokenAddress !== constants.AddressZero) {\n  812:                     balancePromises.push(\n  813                        tokenContract.balanceOf(bonder, {\n  814                          blockTag\n  ...\n  816                      )\n  817                    } else {\n  818:                     balancePromises.push(Promise.resolve(0))\n  819                    }\n  820  \n  821                    if (hTokenContract) {\n  822:                     balancePromises.push(\n  823                        hTokenContract.balanceOf(bonder, {\n  824                          blockTag\n  ...\n  826                      )\n  827                    } else {\n  828:                     balancePromises.push(Promise.resolve(0))\n  829                    }\n  830  \n  831:                   balancePromises.push(\n  832                      archiveProvider.getBalance(bonder, blockTag)\n  833                    )\n  ...\n  845                        aliasAddress = oldArbitrumAliases[token]\n  846                      }\n  847:                     balancePromises.push(\n  848                        archiveProvider.getBalance(aliasAddress, blockTag)\n  849                      )\n  850                    } else {\n  851:                     balancePromises.push(Promise.resolve(0))\n  852                    }\n  853  \n  ...\n  855                      const messengerWrapperAddress = (mainnetAddresses as any)\n  856                        .bridges[token]['arbitrum'].l1MessengerWrapper\n  857:                     balancePromises.push(\n  858                        provider.getBalance(messengerWrapperAddress, blockTag)\n  859                      )\n  860                    } else {\n  861:                     balancePromises.push(Promise.resolve(0))\n  862                    }\n  863  \n  ...\n  868                      aliasBalance,\n  869                      messengerWrapperBalance\n  870:                   ] = await Promise.all(balancePromises)\n  871  \n  872                    bonderBalances[chain].canonical = balance\n  ...\n  995          }\n  996  \n  997:         await Promise.all(chainPromises)\n  998  \n  999          console.log('done fetching timestamp balances')\n\n~/Sandbox/hop/packages/stats-worker/src/Db.ts:\n  270  \n  271    async getPrices () {\n  272:     return new Promise((resolve, reject) => {\n  273        this.db.all(\n  274          'SELECT id, token, price, timestamp FROM token_prices;',\n  ...\n  346  \n  347    async getVolumeStats () {\n  348:     return new Promise((resolve, reject) => {\n  349        this.db.all(\n  350          'SELECT id, chain, token, amount, amount_usd, timestamp FROM volume_stats;',\n  ...\n  361  \n  362    async getTvlPoolStats () {\n  363:     return new Promise((resolve, reject) => {\n  364        this.db.all(\n  365          'SELECT id, chain, token, amount, amount_usd, timestamp FROM tvl_pool_stats;',\n\n~/Sandbox/hop/packages/stats-worker/src/PriceFeed.ts:\n    1  const cache: {\n    2:   [tokenSymbol: string]: Promise<any>\n    3  } = {}\n    4  \n    .\n   35        }\n   36      }\n   37:     const promise = this._getPriceHistory(tokenSymbol, days)\n   38:     cache[cacheKey] = promise\n   39      cacheTimestamps[cacheKey] = Date.now()\n   40:     return promise\n   41    }\n   42  \n\n~/Sandbox/hop/packages/stats-worker/src/TvlStats.ts:\n  177  \n  178      const cachedData: any = await this.db.getTvlPoolStats()\n  179:     const promises: Promise<any>[] = []\n  180      for (let token of tokens) {\n  181:       promises.push(\n  182:         new Promise(async (resolve, reject) => {\n  183:           await Promise.all(\n  184              chains.map(async (chain: string) => {\n  185                try {\n\n~/Sandbox/hop/packages/stats-worker/src/VolumeStats.ts:\n  136      const now = Math.floor(DateTime.utc().toSeconds())\n  137  \n  138:     await Promise.all(\n  139        chains.map(async (chain: string) => {\n  140          const startDate = now - (daysN - 1) * 24 * 60 * 60\n\n~/Sandbox/hop/packages/stats-worker/src/worker.ts:\n  108      console.log('worker started')\n  109      console.log(`polling every ${this.pollIntervalMs}ms`)\n  110:     const promises: Promise<any>[] = []\n  111      if (this.yields) {\n  112:       promises.push(this.yieldStatsPoll())\n  113      }\n  114      if (this.tvl) {\n  115:       promises.push(this.tvlStatsPoll())\n  116      }\n  117      if (this.amm) {\n  118:       promises.push(this.ammStatsPoll())\n  119      }\n  120      if (this.volume) {\n  121:       promises.push(this.volumeStatsPoll())\n  122      }\n  123      if (this.bonder) {\n  124:       promises.push(this.bonderStatsPoll())\n  125      }\n  126:     if (!promises.length) {\n  127        throw new Error('at least one option is required')\n  128      }\n  129:     await Promise.all(promises)\n  130    }\n  131  \n\n~/Sandbox/hop/packages/stats-worker/src/YieldStats.ts:\n  145      let yieldData: YieldData = this.initializeYieldData(this.bridges)\n  146      for (let token in this.bridges) {\n  147:       const promises: Promise<any>[] = []\n  148        for (let chain in this.bridges[token]) {\n  149          const shouldSkip = this.shouldSkipYields(this.bridges, chain, token)\n  ...\n  152          }\n  153  \n  154:         promises.push(\n  155            this.getYieldData(token, chain)\n  156              .then(res => {\n  ...\n  168              })\n  169          )\n  170:         promises.push(\n  171            this.getStakingYieldData(token, chain)\n  172              .then(res => {\n  ...\n  193        // RPC endpoints cannot handle too many chain/token combinations at once. To avoid this,\n  194        // get all chains for a given token before proceeding to the next token\n  195:       await Promise.all(promises)\n  196      }\n  197  \n  ...\n  282    }\n  283  \n  284:   async addCachedDataToYieldData (yieldData: YieldData): Promise<YieldData> {\n  285      const url = `https://assets.hop.exchange/v1.1-pool-stats.json`\n  286      const cachedRes: any = await fetch(url)\n  ...\n  458    }\n  459  \n  460:   async getYieldData (token: string, chain: string): Promise<YieldDataRes> {\n  461      const bridge = this.sdk.bridge(token)\n  462      const amm = bridge.getAmm(chain)\n  ...\n  474      token: string,\n  475      chain: string\n  476:   ): Promise<StakingYieldDataRes[]> {\n  477      const bridge = this.sdk.bridge(token)\n  478      const canonToken = bridge.getCanonicalToken(chain)\n\n~/Sandbox/hop/packages/stats-worker/src/utils/getBlockNumberFromDate.ts:\n    8    provider: any,\n    9    timestamp: number\n   10: ): Promise<number> {\n   11    try {\n   12      const useEtherscan = etherscanApiKeys[chain]\n   ..\n   25    chain: string,\n   26    timestamp: number\n   27: ): Promise<number> {\n   28    const apiKey = etherscanApiKeys[chain]\n   29    if (!apiKey) {\n   ..\n   52    provider: any,\n   53    timestamp: number\n   54: ): Promise<number> {\n   55    if (!provider) {\n   56      throw new Error('provider is required')\n\n~/Sandbox/hop/packages/frontend/src/pages/Pools/PoolsContext.tsx:\n  424        const bridge = sdk.bridge(canonicalToken.symbol)\n  425        const lpToken = bridge.getSaddleLpToken(selectedNetwork.slug)\n  426:       const [reserves, lpTokenTotalSupply] = await Promise.all([\n  427          bridge.getSaddleSwapReserves(selectedNetwork.slug),\n  428          lpToken.totalSupply(),\n  ...\n  484        const lpToken = bridge.getSaddleLpToken(selectedNetwork.slug)\n  485  \n  486:       const [_totalSupplyBn, balance, reserves] = await Promise.all([\n  487          (await lpToken.getErc20()).totalSupply(),\n  488          lpToken.balanceOf(),\n\n~/Sandbox/hop/packages/frontend/src/pages/Pools/useStakingAll.tsx:\n   24          return\n   25        }\n   26:       const promises : any[] = []\n   27        const contracts = hopStakingRewardsContracts?.[reactAppNetwork]\n   28        let _totalEarnedBn = BigNumber.from(0)\n   ..\n   30        for (const chainSlug in contracts) {\n   31          for (const tokenSymbol in contracts[chainSlug]) {\n   32:           promises.push(async () => {\n   33              try {\n   34                const address = contracts[chainSlug][tokenSymbol]\n   ..\n   61          }\n   62        }\n   63:       await Promise.all(promises.map(fn => fn()))\n   64        setTotalEarnedBn(_totalEarnedBn)\n   65        setTxList(_txList)\n\n~/Sandbox/hop/packages/frontend/src/pages/Pools/PoolsOverview/usePools.tsx:\n  128          return cache.base\n  129        }\n  130:       const _pools = await Promise.all(basePools.map(async (_pool: any) => {\n  131          const pool = Object.assign({}, _pool)\n  132          const tokenSymbol = pool.token.symbol\n  ...\n  184              const lpToken = bridge.getSaddleLpToken(pool.chain.slug)\n  185              const tokenDecimals = bridge.getTokenDecimals()\n  186:             const [poolReserves, lpTokenTotalSupplyBn, lpBalance] = await Promise.all([\n  187                bridge.getSaddleSwapReserves(pool.chain.slug),\n  188                lpToken.totalSupply(),\n  ...\n  217                  const _provider = sdk.getChainProvider(pool.chain.slug)\n  218                  const contract = StakingRewards__factory.connect(address, _provider)\n  219:                 const [stakedBalance, earned] = await Promise.all([\n  220                    contract?.balanceOf(accountAddress),\n  221                    contract?.earned(accountAddress)\n  ...\n  242                  const _provider = sdk.getChainProvider(chainSlug)\n  243                  const contract = StakingRewards__factory.connect(hopStakingContractAddress, _provider)\n  244:                 const [stakedBalance, earned] = await Promise.all([\n  245                    contract?.balanceOf(accountAddress),\n  246                    contract?.earned(accountAddress)\n\n2259 matches across 180 files\n\n\nSearching 1579 files for \"Promise\" (case sensitive)\n\n~/Sandbox/hop/packages/frontend/src/abis/types/common.ts:\n   30  \n   31  export type MinEthersFactory<C, ARGS> = {\n   32:   deploy(...a: ARGS[]): Promise<C>;\n   33  };\n   34  \n\n~/Sandbox/hop/packages/frontend/src/abis/types/ENSToken.d.ts:\n  325    connect(signerOrProvider: Signer | Provider | string): this;\n  326    attach(addressOrName: string): this;\n  327:   deployed(): Promise<this>;\n  328  \n  329    listeners<EventArgsArray extends Array<any>, EventArgsObject>(\n  ...\n  361      fromBlockOrBlockhash?: string | number | undefined,\n  362      toBlock?: string | number | undefined\n  363:   ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;\n  364  \n  365    interface: ENSTokenInterface;\n  366  \n  367    functions: {\n  368:     DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;\n  369  \n  370      allowance(\n  ...\n  372        spender: string,\n  373        overrides?: CallOverrides\n  374:     ): Promise<[BigNumber]>;\n  375  \n  376      approve(\n  377        spender: string,\n  378        amount: BigNumberish,\n  379:       overrides?: Overrides & { from?: string | Promise<string> }\n  380:     ): Promise<ContractTransaction>;\n  381  \n  382:     balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;\n  383  \n  384      checkpoints(\n  ...\n  386        pos: BigNumberish,\n  387        overrides?: CallOverrides\n  388:     ): Promise<[[number, BigNumber] & { fromBlock: number; votes: BigNumber }]>;\n  389  \n  390:     claimPeriodEnds(overrides?: CallOverrides): Promise<[BigNumber]>;\n  391  \n  392      claimTokens(\n  ...\n  394        delegate: string,\n  395        merkleProof: BytesLike[],\n  396:       overrides?: Overrides & { from?: string | Promise<string> }\n  397:     ): Promise<ContractTransaction>;\n  398  \n  399:     decimals(overrides?: CallOverrides): Promise<[number]>;\n  400  \n  401      decreaseAllowance(\n  402        spender: string,\n  403        subtractedValue: BigNumberish,\n  404:       overrides?: Overrides & { from?: string | Promise<string> }\n  405:     ): Promise<ContractTransaction>;\n  406  \n  407      delegate(\n  408        delegatee: string,\n  409:       overrides?: Overrides & { from?: string | Promise<string> }\n  410:     ): Promise<ContractTransaction>;\n  411  \n  412      delegateBySig(\n  ...\n  417        r: BytesLike,\n  418        s: BytesLike,\n  419:       overrides?: Overrides & { from?: string | Promise<string> }\n  420:     ): Promise<ContractTransaction>;\n  421  \n  422:     delegates(account: string, overrides?: CallOverrides): Promise<[string]>;\n  423  \n  424      getPastTotalSupply(\n  425        blockNumber: BigNumberish,\n  426        overrides?: CallOverrides\n  427:     ): Promise<[BigNumber]>;\n  428  \n  429      getPastVotes(\n  ...\n  431        blockNumber: BigNumberish,\n  432        overrides?: CallOverrides\n  433:     ): Promise<[BigNumber]>;\n  434  \n  435:     getVotes(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;\n  436  \n  437      increaseAllowance(\n  438        spender: string,\n  439        addedValue: BigNumberish,\n  440:       overrides?: Overrides & { from?: string | Promise<string> }\n  441:     ): Promise<ContractTransaction>;\n  442  \n  443      isClaimed(\n  444        index: BigNumberish,\n  445        overrides?: CallOverrides\n  446:     ): Promise<[boolean]>;\n  447  \n  448:     merkleRoot(overrides?: CallOverrides): Promise<[string]>;\n  449  \n  450:     minimumMintInterval(overrides?: CallOverrides): Promise<[BigNumber]>;\n  451  \n  452      mint(\n  453        dest: string,\n  454        amount: BigNumberish,\n  455:       overrides?: Overrides & { from?: string | Promise<string> }\n  456:     ): Promise<ContractTransaction>;\n  457  \n  458:     mintCap(overrides?: CallOverrides): Promise<[BigNumber]>;\n  459  \n  460:     name(overrides?: CallOverrides): Promise<[string]>;\n  461  \n  462:     nextMint(overrides?: CallOverrides): Promise<[BigNumber]>;\n  463  \n  464:     nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;\n  465  \n  466      numCheckpoints(\n  467        account: string,\n  468        overrides?: CallOverrides\n  469:     ): Promise<[number]>;\n  470  \n  471:     owner(overrides?: CallOverrides): Promise<[string]>;\n  472  \n  473      permit(\n  ...\n  479        r: BytesLike,\n  480        s: BytesLike,\n  481:       overrides?: Overrides & { from?: string | Promise<string> }\n  482:     ): Promise<ContractTransaction>;\n  483  \n  484      renounceOwnership(\n  485:       overrides?: Overrides & { from?: string | Promise<string> }\n  486:     ): Promise<ContractTransaction>;\n  487  \n  488      setMerkleRoot(\n  489        _merkleRoot: BytesLike,\n  490:       overrides?: Overrides & { from?: string | Promise<string> }\n  491:     ): Promise<ContractTransaction>;\n  492  \n  493      sweep(\n  494        dest: string,\n  495:       overrides?: Overrides & { from?: string | Promise<string> }\n  496:     ): Promise<ContractTransaction>;\n  497  \n  498:     symbol(overrides?: CallOverrides): Promise<[string]>;\n  499  \n  500:     totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;\n  501  \n  502      transfer(\n  503        recipient: string,\n  504        amount: BigNumberish,\n  505:       overrides?: Overrides & { from?: string | Promise<string> }\n  506:     ): Promise<ContractTransaction>;\n  507  \n  508      transferFrom(\n  ...\n  510        recipient: string,\n  511        amount: BigNumberish,\n  512:       overrides?: Overrides & { from?: string | Promise<string> }\n  513:     ): Promise<ContractTransaction>;\n  514  \n  515      transferOwnership(\n  516        newOwner: string,\n  517:       overrides?: Overrides & { from?: string | Promise<string> }\n  518:     ): Promise<ContractTransaction>;\n  519    };\n  520  \n  521:   DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;\n  522  \n  523    allowance(\n  ...\n  525      spender: string,\n  526      overrides?: CallOverrides\n  527:   ): Promise<BigNumber>;\n  528  \n  529    approve(\n  530      spender: string,\n  531      amount: BigNumberish,\n  532:     overrides?: Overrides & { from?: string | Promise<string> }\n  533:   ): Promise<ContractTransaction>;\n  534  \n  535:   balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n  536  \n  537    checkpoints(\n  ...\n  539      pos: BigNumberish,\n  540      overrides?: CallOverrides\n  541:   ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;\n  542  \n  543:   claimPeriodEnds(overrides?: CallOverrides): Promise<BigNumber>;\n  544  \n  545    claimTokens(\n  ...\n  547      delegate: string,\n  548      merkleProof: BytesLike[],\n  549:     overrides?: Overrides & { from?: string | Promise<string> }\n  550:   ): Promise<ContractTransaction>;\n  551  \n  552:   decimals(overrides?: CallOverrides): Promise<number>;\n  553  \n  554    decreaseAllowance(\n  555      spender: string,\n  556      subtractedValue: BigNumberish,\n  557:     overrides?: Overrides & { from?: string | Promise<string> }\n  558:   ): Promise<ContractTransaction>;\n  559  \n  560    delegate(\n  561      delegatee: string,\n  562:     overrides?: Overrides & { from?: string | Promise<string> }\n  563:   ): Promise<ContractTransaction>;\n  564  \n  565    delegateBySig(\n  ...\n  570      r: BytesLike,\n  571      s: BytesLike,\n  572:     overrides?: Overrides & { from?: string | Promise<string> }\n  573:   ): Promise<ContractTransaction>;\n  574  \n  575:   delegates(account: string, overrides?: CallOverrides): Promise<string>;\n  576  \n  577    getPastTotalSupply(\n  578      blockNumber: BigNumberish,\n  579      overrides?: CallOverrides\n  580:   ): Promise<BigNumber>;\n  581  \n  582    getPastVotes(\n  ...\n  584      blockNumber: BigNumberish,\n  585      overrides?: CallOverrides\n  586:   ): Promise<BigNumber>;\n  587  \n  588:   getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n  589  \n  590    increaseAllowance(\n  591      spender: string,\n  592      addedValue: BigNumberish,\n  593:     overrides?: Overrides & { from?: string | Promise<string> }\n  594:   ): Promise<ContractTransaction>;\n  595  \n  596:   isClaimed(index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;\n  597  \n  598:   merkleRoot(overrides?: CallOverrides): Promise<string>;\n  599  \n  600:   minimumMintInterval(overrides?: CallOverrides): Promise<BigNumber>;\n  601  \n  602    mint(\n  603      dest: string,\n  604      amount: BigNumberish,\n  605:     overrides?: Overrides & { from?: string | Promise<string> }\n  606:   ): Promise<ContractTransaction>;\n  607  \n  608:   mintCap(overrides?: CallOverrides): Promise<BigNumber>;\n  609  \n  610:   name(overrides?: CallOverrides): Promise<string>;\n  611  \n  612:   nextMint(overrides?: CallOverrides): Promise<BigNumber>;\n  613  \n  614:   nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;\n  615  \n  616:   numCheckpoints(account: string, overrides?: CallOverrides): Promise<number>;\n  617  \n  618:   owner(overrides?: CallOverrides): Promise<string>;\n  619  \n  620    permit(\n  ...\n  626      r: BytesLike,\n  627      s: BytesLike,\n  628:     overrides?: Overrides & { from?: string | Promise<string> }\n  629:   ): Promise<ContractTransaction>;\n  630  \n  631    renounceOwnership(\n  632:     overrides?: Overrides & { from?: string | Promise<string> }\n  633:   ): Promise<ContractTransaction>;\n  634  \n  635    setMerkleRoot(\n  636      _merkleRoot: BytesLike,\n  637:     overrides?: Overrides & { from?: string | Promise<string> }\n  638:   ): Promise<ContractTransaction>;\n  639  \n  640    sweep(\n  641      dest: string,\n  642:     overrides?: Overrides & { from?: string | Promise<string> }\n  643:   ): Promise<ContractTransaction>;\n  644  \n  645:   symbol(overrides?: CallOverrides): Promise<string>;\n  646  \n  647:   totalSupply(overrides?: CallOverrides): Promise<BigNumber>;\n  648  \n  649    transfer(\n  650      recipient: string,\n  651      amount: BigNumberish,\n  652:     overrides?: Overrides & { from?: string | Promise<string> }\n  653:   ): Promise<ContractTransaction>;\n  654  \n  655    transferFrom(\n  ...\n  657      recipient: string,\n  658      amount: BigNumberish,\n  659:     overrides?: Overrides & { from?: string | Promise<string> }\n  660:   ): Promise<ContractTransaction>;\n  661  \n  662    transferOwnership(\n  663      newOwner: string,\n  664:     overrides?: Overrides & { from?: string | Promise<string> }\n  665:   ): Promise<ContractTransaction>;\n  666  \n  667    callStatic: {\n  668:     DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;\n  669  \n  670      allowance(\n  ...\n  672        spender: string,\n  673        overrides?: CallOverrides\n  674:     ): Promise<BigNumber>;\n  675  \n  676      approve(\n  ...\n  678        amount: BigNumberish,\n  679        overrides?: CallOverrides\n  680:     ): Promise<boolean>;\n  681  \n  682:     balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n  683  \n  684      checkpoints(\n  ...\n  686        pos: BigNumberish,\n  687        overrides?: CallOverrides\n  688:     ): Promise<[number, BigNumber] & { fromBlock: number; votes: BigNumber }>;\n  689  \n  690:     claimPeriodEnds(overrides?: CallOverrides): Promise<BigNumber>;\n  691  \n  692      claimTokens(\n  ...\n  695        merkleProof: BytesLike[],\n  696        overrides?: CallOverrides\n  697:     ): Promise<void>;\n  698  \n  699:     decimals(overrides?: CallOverrides): Promise<number>;\n  700  \n  701      decreaseAllowance(\n  ...\n  703        subtractedValue: BigNumberish,\n  704        overrides?: CallOverrides\n  705:     ): Promise<boolean>;\n  706  \n  707:     delegate(delegatee: string, overrides?: CallOverrides): Promise<void>;\n  708  \n  709      delegateBySig(\n  ...\n  715        s: BytesLike,\n  716        overrides?: CallOverrides\n  717:     ): Promise<void>;\n  718  \n  719:     delegates(account: string, overrides?: CallOverrides): Promise<string>;\n  720  \n  721      getPastTotalSupply(\n  722        blockNumber: BigNumberish,\n  723        overrides?: CallOverrides\n  724:     ): Promise<BigNumber>;\n  725  \n  726      getPastVotes(\n  ...\n  728        blockNumber: BigNumberish,\n  729        overrides?: CallOverrides\n  730:     ): Promise<BigNumber>;\n  731  \n  732:     getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n  733  \n  734      increaseAllowance(\n  ...\n  736        addedValue: BigNumberish,\n  737        overrides?: CallOverrides\n  738:     ): Promise<boolean>;\n  739  \n  740:     isClaimed(index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;\n  741  \n  742:     merkleRoot(overrides?: CallOverrides): Promise<string>;\n  743  \n  744:     minimumMintInterval(overrides?: CallOverrides): Promise<BigNumber>;\n  745  \n  746      mint(\n  ...\n  748        amount: BigNumberish,\n  749        overrides?: CallOverrides\n  750:     ): Promise<void>;\n  751  \n  752:     mintCap(overrides?: CallOverrides): Promise<BigNumber>;\n  753  \n  754:     name(overrides?: CallOverrides): Promise<string>;\n  755  \n  756:     nextMint(overrides?: CallOverrides): Promise<BigNumber>;\n  757  \n  758:     nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;\n  759  \n  760:     numCheckpoints(account: string, overrides?: CallOverrides): Promise<number>;\n  761  \n  762:     owner(overrides?: CallOverrides): Promise<string>;\n  763  \n  764      permit(\n  ...\n  771        s: BytesLike,\n  772        overrides?: CallOverrides\n  773:     ): Promise<void>;\n  774  \n  775:     renounceOwnership(overrides?: CallOverrides): Promise<void>;\n  776  \n  777      setMerkleRoot(\n  778        _merkleRoot: BytesLike,\n  779        overrides?: CallOverrides\n  780:     ): Promise<void>;\n  781  \n  782:     sweep(dest: string, overrides?: CallOverrides): Promise<void>;\n  783  \n  784:     symbol(overrides?: CallOverrides): Promise<string>;\n  785  \n  786:     totalSupply(overrides?: CallOverrides): Promise<BigNumber>;\n  787  \n  788      transfer(\n  ...\n  790        amount: BigNumberish,\n  791        overrides?: CallOverrides\n  792:     ): Promise<boolean>;\n  793  \n  794      transferFrom(\n  ...\n  797        amount: BigNumberish,\n  798        overrides?: CallOverrides\n  799:     ): Promise<boolean>;\n  800  \n  801      transferOwnership(\n  802        newOwner: string,\n  803        overrides?: CallOverrides\n  804:     ): Promise<void>;\n  805    };\n  806  \n  ...\n  920  \n  921    estimateGas: {\n  922:     DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;\n  923  \n  924      allowance(\n  ...\n  926        spender: string,\n  927        overrides?: CallOverrides\n  928:     ): Promise<BigNumber>;\n  929  \n  930      approve(\n  931        spender: string,\n  932        amount: BigNumberish,\n  933:       overrides?: Overrides & { from?: string | Promise<string> }\n  934:     ): Promise<BigNumber>;\n  935  \n  936:     balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n  937  \n  938      checkpoints(\n  ...\n  940        pos: BigNumberish,\n  941        overrides?: CallOverrides\n  942:     ): Promise<BigNumber>;\n  943  \n  944:     claimPeriodEnds(overrides?: CallOverrides): Promise<BigNumber>;\n  945  \n  946      claimTokens(\n  ...\n  948        delegate: string,\n  949        merkleProof: BytesLike[],\n  950:       overrides?: Overrides & { from?: string | Promise<string> }\n  951:     ): Promise<BigNumber>;\n  952  \n  953:     decimals(overrides?: CallOverrides): Promise<BigNumber>;\n  954  \n  955      decreaseAllowance(\n  956        spender: string,\n  957        subtractedValue: BigNumberish,\n  958:       overrides?: Overrides & { from?: string | Promise<string> }\n  959:     ): Promise<BigNumber>;\n  960  \n  961      delegate(\n  962        delegatee: string,\n  963:       overrides?: Overrides & { from?: string | Promise<string> }\n  964:     ): Promise<BigNumber>;\n  965  \n  966      delegateBySig(\n  ...\n  971        r: BytesLike,\n  972        s: BytesLike,\n  973:       overrides?: Overrides & { from?: string | Promise<string> }\n  974:     ): Promise<BigNumber>;\n  975  \n  976:     delegates(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n  977  \n  978      getPastTotalSupply(\n  979        blockNumber: BigNumberish,\n  980        overrides?: CallOverrides\n  981:     ): Promise<BigNumber>;\n  982  \n  983      getPastVotes(\n  ...\n  985        blockNumber: BigNumberish,\n  986        overrides?: CallOverrides\n  987:     ): Promise<BigNumber>;\n  988  \n  989:     getVotes(account: string, overrides?: CallOverrides): Promise<BigNumber>;\n  990  \n  991      increaseAllowance(\n  992        spender: string,\n  993        addedValue: BigNumberish,\n  994:       overrides?: Overrides & { from?: string | Promise<string> }\n  995:     ): Promise<BigNumber>;\n  996  \n  997      isClaimed(\n  998        index: BigNumberish,\n  999        overrides?: CallOverrides\n 1000:     ): Promise<BigNumber>;\n 1001  \n 1002:     merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;\n 1003  \n 1004:     minimumMintInterval(overrides?: CallOverrides): Promise<BigNumber>;\n 1005  \n 1006      mint(\n 1007        dest: string,\n 1008        amount: BigNumberish,\n 1009:       overrides?: Overrides & { from?: string | Promise<string> }\n 1010:     ): Promise<BigNumber>;\n 1011  \n 1012:     mintCap(overrides?: CallOverrides): Promise<BigNumber>;\n 1013  \n 1014:     name(overrides?: CallOverrides): Promise<BigNumber>;\n 1015  \n 1016:     nextMint(overrides?: CallOverrides): Promise<BigNumber>;\n 1017  \n 1018:     nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;\n 1019  \n 1020      numCheckpoints(\n 1021        account: string,\n 1022        overrides?: CallOverrides\n 1023:     ): Promise<BigNumber>;\n 1024  \n 1025:     owner(overrides?: CallOverrides): Promise<BigNumber>;\n 1026  \n 1027      permit(\n ....\n 1033        r: BytesLike,\n 1034        s: BytesLike,\n 1035:       overrides?: Overrides & { from?: string | Promise<string> }\n 1036:     ): Promise<BigNumber>;\n 1037  \n 1038      renounceOwnership(\n 1039:       overrides?: Overrides & { from?: string | Promise<string> }\n 1040:     ): Promise<BigNumber>;\n 1041  \n 1042      setMerkleRoot(\n 1043        _merkleRoot: BytesLike,\n 1044:       overrides?: Overrides & { from?: string | Promise<string> }\n 1045:     ): Promise<BigNumber>;\n 1046  \n 1047      sweep(\n 1048        dest: string,\n 1049:       overrides?: Overrides & { from?: string | Promise<string> }\n 1050:     ): Promise<BigNumber>;\n 1051  \n 1052:     symbol(overrides?: CallOverrides): Promise<BigNumber>;\n 1053  \n 1054:     totalSupply(overrides?: CallOverrides): Promise<BigNumber>;\n 1055  \n 1056      transfer(\n 1057        recipient: string,\n 1058        amount: BigNumberish,\n 1059:       overrides?: Overrides & { from?: string | Promise<string> }\n 1060:     ): Promise<BigNumber>;\n 1061  \n 1062      transferFrom(\n ....\n 1064        recipient: string,\n 1065        amount: BigNumberish,\n 1066:       overrides?: Overrides & { from?: string | Promise<string> }\n 1067:     ): Promise<BigNumber>;\n 1068  \n 1069      transferOwnership(\n 1070        newOwner: string,\n 1071:       overrides?: Overrides & { from?: string | Promise<string> }\n 1072:     ): Promise<BigNumber>;\n 1073    };\n 1074  \n 1075    populateTransaction: {\n 1076:     DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n 1077  \n 1078      allowance(\n ....\n 1080        spender: string,\n 1081        overrides?: CallOverrides\n 1082:     ): Promise<PopulatedTransaction>;\n 1083  \n 1084      approve(\n 1085        spender: string,\n 1086        amount: BigNumberish,\n 1087:       overrides?: Overrides & { from?: string | Promise<string> }\n 1088:     ): Promise<PopulatedTransaction>;\n 1089  \n 1090      balanceOf(\n 1091        account: string,\n 1092        overrides?: CallOverrides\n 1093:     ): Promise<PopulatedTransaction>;\n 1094  \n 1095      checkpoints(\n ....\n 1097        pos: BigNumberish,\n 1098        overrides?: CallOverrides\n 1099:     ): Promise<PopulatedTransaction>;\n 1100  \n 1101:     claimPeriodEnds(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n 1102  \n 1103      claimTokens(\n ....\n 1105        delegate: string,\n 1106        merkleProof: BytesLike[],\n 1107:       overrides?: Overrides & { from?: string | Promise<string> }\n 1108:     ): Promise<PopulatedTransaction>;\n 1109  \n 1110:     decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n 1111  \n 1112      decreaseAllowance(\n 1113        spender: string,\n 1114        subtractedValue: BigNumberish,\n 1115:       overrides?: Overrides & { from?: string | Promise<string> }\n 1116:     ): Promise<PopulatedTransaction>;\n 1117  \n 1118      delegate(\n 1119        delegatee: string,\n 1120:       overrides?: Overrides & { from?: string | Promise<string> }\n 1121:     ): Promise<PopulatedTransaction>;\n 1122  \n 1123      delegateBySig(\n ....\n 1128        r: BytesLike,\n 1129        s: BytesLike,\n 1130:       overrides?: Overrides & { from?: string | Promise<string> }\n 1131:     ): Promise<PopulatedTransaction>;\n 1132  \n 1133      delegates(\n 1134        account: string,\n 1135        overrides?: CallOverrides\n 1136:     ): Promise<PopulatedTransaction>;\n 1137  \n 1138      getPastTotalSupply(\n 1139        blockNumber: BigNumberish,\n 1140        overrides?: CallOverrides\n 1141:     ): Promise<PopulatedTransaction>;\n 1142  \n 1143      getPastVotes(\n ....\n 1145        blockNumber: BigNumberish,\n 1146        overrides?: CallOverrides\n 1147:     ): Promise<PopulatedTransaction>;\n 1148  \n 1149      getVotes(\n 1150        account: string,\n 1151        overrides?: CallOverrides\n 1152:     ): Promise<PopulatedTransaction>;\n 1153  \n 1154      increaseAllowance(\n 1155        spender: string,\n 1156        addedValue: BigNumberish,\n 1157:       overrides?: Overrides & { from?: string | Promise<string> }\n 1158:     ): Promise<PopulatedTransaction>;\n 1159  \n 1160      isClaimed(\n 1161        index: BigNumberish,\n 1162        overrides?: CallOverrides\n 1163:     ): Promise<PopulatedTransaction>;\n 1164  \n 1165:     merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n 1166  \n 1167      minimumMintInterval(\n 1168        overrides?: CallOverrides\n 1169:     ): Promise<PopulatedTransaction>;\n 1170  \n 1171      mint(\n 1172        dest: string,\n 1173        amount: BigNumberish,\n 1174:       overrides?: Overrides & { from?: string | Promise<string> }\n 1175:     ): Promise<PopulatedTransaction>;\n 1176  \n 1177:     mintCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n 1178  \n 1179:     name(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n 1180  \n 1181:     nextMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n 1182  \n 1183      nonces(\n 1184        owner: string,\n 1185        overrides?: CallOverrides\n 1186:     ): Promise<PopulatedTransaction>;\n 1187  \n 1188      numCheckpoints(\n 1189        account: string,\n 1190        overrides?: CallOverrides\n 1191:     ): Promise<PopulatedTransaction>;\n 1192  \n 1193:     owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n 1194  \n 1195      permit(\n ....\n 1201        r: BytesLike,\n 1202        s: BytesLike,\n 1203:       overrides?: Overrides & { from?: string | Promise<string> }\n 1204:     ): Promise<PopulatedTransaction>;\n 1205  \n 1206      renounceOwnership(\n 1207:       overrides?: Overrides & { from?: string | Promise<string> }\n 1208:     ): Promise<PopulatedTransaction>;\n 1209  \n 1210      setMerkleRoot(\n 1211        _merkleRoot: BytesLike,\n 1212:       overrides?: Overrides & { from?: string | Promise<string> }\n 1213:     ): Promise<PopulatedTransaction>;\n 1214  \n 1215      sweep(\n 1216        dest: string,\n 1217:       overrides?: Overrides & { from?: string | Promise<string> }\n 1218:     ): Promise<PopulatedTransaction>;\n 1219  \n 1220:     symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n 1221  \n 1222:     totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;\n 1223  \n 1224      transfer(\n 1225        recipient: string,\n 1226        amount: BigNumberish,\n 1227:       overrides?: Overrides & { from?: string | Promise<string> }\n 1228:     ): Promise<PopulatedTransaction>;\n 1229  \n 1230      transferFrom(\n ....\n 1232        recipient: string,\n 1233        amount: BigNumberish,\n 1234:       overrides?: Overrides & { from?: string | Promise<string> }\n 1235:     ): Promise<PopulatedTransaction>;\n 1236  \n 1237      transferOwnership(\n 1238        newOwner: string,\n 1239:       overrides?: Overrides & { from?: string | Promise<string> }\n 1240:     ): Promise<PopulatedTransaction>;\n 1241    };\n 1242  }\n\n~/Sandbox/hop/packages/frontend/src/abis/types/factories/ENSToken__factory.ts:\n  873      airdropSupply: BigNumberish,\n  874      _claimPeriodEnds: BigNumberish,\n  875:     overrides?: Overrides & { from?: string | Promise<string> }\n  876:   ): Promise<ENSToken> {\n  877      return super.deploy(\n  878        freeSupply,\n  ...\n  880        _claimPeriodEnds,\n  881        overrides || {}\n  882:     ) as Promise<ENSToken>;\n  883    }\n  884    getDeployTransaction(\n  ...\n  886      airdropSupply: BigNumberish,\n  887      _claimPeriodEnds: BigNumberish,\n  888:     overrides?: Overrides & { from?: string | Promise<string> }\n  889    ): TransactionRequest {\n  890      return super.getDeployTransaction(\n\n~/Sandbox/hop/packages/frontend/src/components/Rebalancer/Modal.tsx:\n  108    }\n  109  \n  110:   async function changeNetwork(newChainId: number): Promise<boolean> {\n  111      try {\n  112        const event = { target: { value: networkIdToSlug(newChainId) } }\n  ...\n  119    }\n  120  \n  121:   async function getTokensAreStaked(stakingContract: Contract): Promise<boolean | undefined> {\n  122      // check if any tokens are staked\n  123      try {\n\n~/Sandbox/hop/packages/frontend/src/components/Rebalancer/Sections/BridgingStatus.tsx:\n   71        }\n   72  \n   73:       await new Promise(resolve => setTimeout(resolve, 1000 * pollingIntervalInSeconds))\n   74      }\n   75      console.log(\"Unable to confirm successful bridge transaction\")\n\n~/Sandbox/hop/packages/frontend/src/components/Rebalancer/Sections/NetworkSelection.tsx:\n   13  \n   14  interface NetworkSelectionSectionProps {\n   15:   checkConnectedNetworkId: (networkId: number) => Promise<boolean>\n   16    networksWithYields: NetworkAPRTupleType[],\n   17    connectedNetworkId: number | undefined,\n\n~/Sandbox/hop/packages/frontend/src/contexts/Web3Context.tsx:\n   32    walletConnected: boolean\n   33    walletName: string\n   34:   checkConnectedNetworkId: (networkId: number) => Promise<boolean>\n   35  }\n   36  \n   ..\n  172    // Displays the wallet select modal:\n  173    // const walletSelected = await onboard.walletSelect()\n  174:   // returns a Promise that:\n  175    // resolves with true if the user selected a wallet\n  176    // resolves with false if the user exited from the wallet select modal\n  ...\n  179    // Once a wallet is selected, you will want to make sure that the user's wallet is prepared and ready to transact by calling the walletCheck function:\n  180    // const readyToTransact = await onboard.walletCheck()\n  181:   // returns a Promise that:\n  182    // resolves with true if user is ready to transact\n  183    // resolves with false if user exited before completing all wallet checks\n  ...\n  324  \n  325    // TODO: cleanup\n  326:   const checkConnectedNetworkId = async (networkId?: number, recheck: boolean = true): Promise<boolean> => {\n  327      if (!(networkId && provider)) return false\n  328  \n\n~/Sandbox/hop/packages/frontend/src/contexts/AppContext/useTxConfirm.ts:\n   11  export interface TxConfirm {\n   12    txConfirmParams: TxConfirmParams\n   13:   show: (params: TxConfirmParams) => Promise<any>\n   14  }\n   15  \n   ..\n   20    const show = (params: TxConfirmParams) => {\n   21      const { kind, inputProps, onConfirm } = params\n   22:     return new Promise((resolve, reject) => {\n   23        setTxConfirm({\n   24          kind,\n\n~/Sandbox/hop/packages/frontend/src/hooks/useDebounceAsync.ts:\n    2  import { wait } from 'src/utils'\n    3  \n    4: const useDebouncePromise = (\n    5    fn: (isCancelled: () => boolean) => void,\n    6    debounceDelay: number,\n    .\n   43  }\n   44  \n   45: export default useDebouncePromise\n   46  \n\n~/Sandbox/hop/packages/frontend/src/hooks/useGnosisSafeTransaction.ts:\n  124  \n  125    const getSafeTx = useCallback(\n  126:     async (tx: Transaction | ContractTransaction): Promise<GnosisSafeTx | undefined> => {\n  127        try {\n  128          console.log(`getting safe tx:`, tx)\n\n~/Sandbox/hop/packages/frontend/src/hooks/usePollValue.tsx:\n    4  \n    5  function usePollValue<T>(\n    6:   factory: () => Promise<T>,\n    7    interval: number,\n    8    deps: DependencyList | undefined\n\n~/Sandbox/hop/packages/frontend/src/models/Transaction.ts:\n  164    }\n  165  \n  166:   async receipt(): Promise<any> {\n  167      // fyi issue: https://github.com/ethers-io/ethers.js/issues/3477\n  168      return this.provider.waitForTransaction(this.hash)\n\n~/Sandbox/hop/packages/frontend/src/pages/Claim/useClaim.ts:\n   95        }\n   96        if (contractBalance.eq(0) || airdropSupply.eq(0)) {\n   97:         const [_contractBalance, _airdropSupply] = await Promise.all([\n   98            getContractBalance(claimProvider),\n   99            getAirdropSupply(claimProvider)\n\n~/Sandbox/hop/packages/frontend/src/pages/Claim/useDelegates.ts:\n   74        }\n   75  \n   76:       const _delegates = await Promise.all((delegates).map(async (delegate: any) => {\n   77          try {\n   78            if (!delegate.address) {\n\n~/Sandbox/hop/packages/frontend/src/pages/Convert/ConvertContext.tsx:\n  321    // Transactions\n  322    // ===============================================================================================\n  323:   const approveTokens = async (): Promise<any> => {\n  324      try {\n  325        const networkId = Number(sourceNetwork?.networkId)\n\n~/Sandbox/hop/packages/frontend/src/pages/Convert/ConvertOption/AmmConvertOption.tsx:\n   25      l1TokenSymbol?: TokenSymbol,\n   26      sourceNetwork?: Network\n   27:   ): Promise<string> {\n   28      if (!l1TokenSymbol) {\n   29        throw new Error('Token is required to get target address')\n   ..\n   47      l1TokenSymbol?: TokenSymbol,\n   48      amountIn?: BigNumberish\n   49:   ): Promise<SendData> {\n   50      if (!l1TokenSymbol || !sourceNetwork) {\n   51        return {\n   ..\n  110      network?: Network,\n  111      bridge?: HopBridge\n  112:   ): Promise<Token | undefined> {\n  113      if (!bridge || !network) return\n  114  \n  ...\n  128      network?: Network,\n  129      bridge?: HopBridge\n  130:   ): Promise<Token | undefined> {\n  131      if (!bridge || !network) return\n  132  \n  ...\n  150      isConvertingToHToken: boolean,\n  151      l1TokenSymbol: TokenSymbol\n  152:   ): Promise<ReactNode> {\n  153      let rateDisplay = '-'\n  154      let slippageToleranceDisplay = '-'\n\n~/Sandbox/hop/packages/frontend/src/pages/Convert/ConvertOption/ConvertOption.tsx:\n   21      sourceNetwork: Network | undefined,\n   22      destNetwork: Network | undefined\n   23:   ): Promise<string>\n   24  \n   25    abstract getSendData(\n   ..\n   30      l1TokenSymbol: string | undefined,\n   31      amountIn: BigNumberish | undefined\n   32:   ): Promise<SendData>\n   33  \n   34    abstract convert(\n   ..\n   43      deadline: number,\n   44      bonderFee?: BigNumberish\n   45:   ): Promise<any>\n   46  \n   47    abstract sourceToken(\n   ..\n   49      network: Network | undefined,\n   50      bridge: HopBridge | undefined\n   51:   ): Promise<Token | undefined>\n   52  \n   53    abstract destToken(\n   ..\n   55      network: Network | undefined,\n   56      bridge: HopBridge | undefined\n   57:   ): Promise<Token | undefined>\n   58  }\n   59  \n\n~/Sandbox/hop/packages/frontend/src/pages/Convert/ConvertOption/HopConvertOption.tsx:\n   81      l1TokenSymbol: TokenSymbol | undefined,\n   82      amountIn: BigNumberish | undefined\n   83:   ): Promise<SendData> {\n   84      if (!l1TokenSymbol || !sourceNetwork || !destNetwork || !amountIn) {\n   85        return {\n   ..\n  154      l1TokenSymbol?: TokenSymbol,\n  155      sourceNetwork?: Network\n  156:   ): Promise<string> {\n  157      if (!l1TokenSymbol) {\n  158        throw new Error('Token symbol is required to get target address')\n  ...\n  177      network?: Network,\n  178      bridge?: HopBridge\n  179:   ): Promise<Token | undefined> {\n  180      if (!bridge || !network) return\n  181  \n  ...\n  191      network?: Network,\n  192      bridge?: HopBridge\n  193:   ): Promise<Token | undefined> {\n  194      if (!bridge || !network) return\n  195  \n\n~/Sandbox/hop/packages/frontend/src/pages/Pools/PoolsContext.tsx:\n  424        const bridge = sdk.bridge(canonicalToken.symbol)\n  425        const lpToken = bridge.getSaddleLpToken(selectedNetwork.slug)\n  426:       const [reserves, lpTokenTotalSupply] = await Promise.all([\n  427          bridge.getSaddleSwapReserves(selectedNetwork.slug),\n  428          lpToken.totalSupply(),\n  ...\n  484        const lpToken = bridge.getSaddleLpToken(selectedNetwork.slug)\n  485  \n  486:       const [_totalSupplyBn, balance, reserves] = await Promise.all([\n  487          (await lpToken.getErc20()).totalSupply(),\n  488          lpToken.balanceOf(),\n\n~/Sandbox/hop/packages/frontend/src/pages/Pools/useStakingAll.tsx:\n   61          }\n   62        }\n   63:       await Promise.all(promises.map(fn => fn()))\n   64        setTotalEarnedBn(_totalEarnedBn)\n   65        setTxList(_txList)\n\n~/Sandbox/hop/packages/frontend/src/pages/Pools/PoolsOverview/usePools.tsx:\n  128          return cache.base\n  129        }\n  130:       const _pools = await Promise.all(basePools.map(async (_pool: any) => {\n  131          const pool = Object.assign({}, _pool)\n  132          const tokenSymbol = pool.token.symbol\n  ...\n  184              const lpToken = bridge.getSaddleLpToken(pool.chain.slug)\n  185              const tokenDecimals = bridge.getTokenDecimals()\n  186:             const [poolReserves, lpTokenTotalSupplyBn, lpBalance] = await Promise.all([\n  187                bridge.getSaddleSwapReserves(pool.chain.slug),\n  188                lpToken.totalSupply(),\n  ...\n  217                  const _provider = sdk.getChainProvider(pool.chain.slug)\n  218                  const contract = StakingRewards__factory.connect(address, _provider)\n  219:                 const [stakedBalance, earned] = await Promise.all([\n  220                    contract?.balanceOf(accountAddress),\n  221                    contract?.earned(accountAddress)\n  ...\n  242                  const _provider = sdk.getChainProvider(chainSlug)\n  243                  const contract = StakingRewards__factory.connect(hopStakingContractAddress, _provider)\n  244:                 const [stakedBalance, earned] = await Promise.all([\n  245                    contract?.balanceOf(accountAddress),\n  246                    contract?.earned(accountAddress)\n\n~/Sandbox/hop/packages/frontend/src/pages/Stats/StatsContext.tsx:\n  195        }\n  196        setFetching(true)\n  197:       const promises: Promise<any>[] = []\n  198        for (const network of filteredNetworks) {\n  199          for (const token of tokens) {\n  ...\n  201          }\n  202        }\n  203:       const results: any[] = await Promise.all(promises)\n  204        setFetching(false)\n  205        setStats(results.filter(x => x))\n  ...\n  213      selectedToken: Token,\n  214      bonder: string\n  215:   ): Promise<BonderStats | undefined> {\n  216      if (!selectedNetwork) {\n  217        return\n  ...\n  230      }\n  231      const [credit, debit, totalDebit, availableLiquidity, nativeBalance, vaultBalance] =\n  232:       await Promise.all([\n  233          bridge.getCredit(selectedNetwork.slug, bonder),\n  234          bridge.getDebit(selectedNetwork.slug, bonder),\n  ...\n  271          return\n  272        }\n  273:       const promises: Promise<any>[] = []\n  274        for (const network of networks) {\n  275          for (const token of tokens) {\n  ...\n  289          }\n  290        }\n  291:       let results: any[] = await Promise.all(promises)\n  292        results = results.filter(x => x)\n  293        setFetchingBonderStats(!results.length)\n  ...\n  344        }\n  345        setFetchingPendingAmounts(true)\n  346:       const promises: Promise<any>[] = []\n  347        for (const sourceNetwork of filteredNetworks) {\n  348          for (const token of tokens) {\n  ...\n  357          }\n  358        }\n  359:       const results: any[] = await Promise.all(promises)\n  360        setFetchingPendingAmounts(false)\n  361        setPendingAmounts(results.filter(x => x))\n  ...\n  370      address: string,\n  371      tokenSymbol: string\n  372:   ): Promise<BalanceStats | undefined> {\n  373      if (!slug) {\n  374        return\n  ...\n  427          addressDatas.push(['ethereum', `${token.symbol} Wrapper (Nova)`, messengerWrapperAddress, token.symbol])\n  428        }\n  429:       const promises: Promise<any>[] = []\n  430        for (const addressData of addressDatas) {\n  431          const slug: string = addressData[0]\n  ...\n  434          promises.push(fetchBalances(slug, name, address, addressData[3]).catch(logger.error))\n  435        }\n  436:       const results: any[] = await Promise.all(promises)\n  437        setFetchingBalances(false)\n  438        setBalances(results.filter(x => !!x))\n  ...\n  445      selectedToken: Token,\n  446      bonder: string\n  447:   ): Promise<DebitWindowStats | undefined> {\n  448      if (!pendingAmounts?.length) {\n  449        return\n  ...\n  487          return\n  488        }\n  489:       const promises: Promise<any>[] = []\n  490        for (const token of tokens) {\n  491          const bonders = new Set<string>()\n  ...\n  506          }\n  507        }\n  508:       let results: any[] = await Promise.all(promises)\n  509        results = results.filter(x => x)\n  510        setFetchingDebitWindowStats(!results.length)\n\n~/Sandbox/hop/packages/frontend/src/pages/Withdraw/Withdraw.tsx:\n   71        setError('')\n   72        let wp: WithdrawalProof\n   73:       await new Promise(async (resolve, reject) => {\n   74          try {\n   75            wp = new WithdrawalProof(transferIdOrTxHash)\n\n~/Sandbox/hop/packages/frontend/src/pages/Withdraw/WithdrawalProof.ts:\n  236        const { transferId, destinationChainId, token } = transfer\n  237        const destinationChain = networkIdToSlug(destinationChainId)\n  238:       const [withdrewEvent, bondedEvent] = await Promise.all([\n  239          this.queryWithdrew(transferId, destinationChain),\n  240          this.queryBondWithdrawal(transferId, destinationChain)\n  ...\n  678      const destinationChain = networkIdToSlug(transferRoot.destinationChainId)\n  679  \n  680:     const [rootSet, transferIds] = await Promise.all([\n  681        this.queryRootSet(destinationChain, token, transferRootHash),\n  682        this.queryTransferIdsForTransferRoot(chain, token, transferRootHash)\n\n~/Sandbox/hop/packages/frontend/src/utils/blocks.ts:\n    4    const blockNumber = await provider.getBlockNumber()\n    5    const nums = [0, 1, 2, 3]\n    6:   const recentBlocks = await Promise.all(\n    7      nums.map(num => provider.getBlockWithTransactions(blockNumber - num))\n    8    )\n\n~/Sandbox/hop/packages/frontend/src/utils/promiseTimeout.ts:\n    1: const promiseTimeout = async (promise: any, timeout: number): Promise<any> => {\n    2:   return new Promise((resolve, reject) => {\n    3      let timedout = false\n    4      const t = setTimeout(() => {\n    .\n    8  \n    9      // make it a promise if it's not one\n   10:     Promise.resolve(promise)\n   11        .then((result: any) => {\n   12          clearTimeout(t)\n\n~/Sandbox/hop/packages/frontend/src/utils/queries.ts:\n  109    recipient: string,\n  110    txHash: string\n  111: ): Promise<L2Transfer[]> {\n  112    recipient = recipient.toLowerCase()\n  113    txHash = txHash.toLowerCase()\n  ...\n  148    amount: BigNumberish,\n  149    deadline: BigNumberish\n  150: ): Promise<L1Transfer[]> {\n  151    recipient = recipient.toLowerCase()\n  152    amount = normalizeBN(amount)\n\n~/Sandbox/hop/packages/frontend/src/utils/transactions.ts:\n   41    const blockTags = getBlockTagChunks(blockNumber)\n   42  \n   43:   const evs = await Promise.all(\n   44      blockTags.map(([fromBlock, toBlock]) => destL2Bridge.queryFilter(filter, fromBlock, toBlock))\n   45    )\n\n~/Sandbox/hop/packages/frontend/src/utils/wait.ts:\n    1  export const wait = async (t: number) => {\n    2:   return new Promise(resolve => setTimeout(() => resolve(null), t))\n    3  }\n    4  \n\n~/Sandbox/hop/packages/hop-node/src/aws/cloudWatch.ts:\n   54    let { logGroup, logStream, filterPattern, startTime, endTime } = config\n   55    const cloudwatch = new AWS.CloudWatchLogs()\n   56:   const getLatestLogStream = async (): Promise<any> => {\n   57      const params = {\n   58        logGroupName: logGroup,\n   ..\n   73    }\n   74  \n   75:   const getLogEvents = async (nextToken?: string): Promise<any> => {\n   76      const params = {\n   77        startTime,\n\n~/Sandbox/hop/packages/hop-node/src/aws/parameterStore.ts:\n    6  })\n    7  \n    8: export async function getParameter (name: string, region?: string): Promise<string> {\n    9    const ssm = new AWS.SSM({\n   10      region\n   ..\n   14      WithDecryption: true\n   15    }\n   16:   return await new Promise((resolve, reject) => {\n   17      ssm.getParameter(params, function (err: Error, data: any) {\n   18        if (err) {\n\n~/Sandbox/hop/packages/hop-node/src/cli/cli.ts:\n   51  })\n   52  \n   53: process.on('unhandledRejection', (reason: Error, p: Promise<any>) => {\n   54    logger.error('unhandled rejection: promise:', p, 'reason:', reason)\n   55  })\n\n~/Sandbox/hop/packages/hop-node/src/cli/dbDump.ts:\n  137          throw new Error('chain flag is required')\n  138        }\n  139:       items = await Promise.all([\n  140          db.gasCost.getNearest(chain, tokenSymbol, GasCostTransactionType.BondWithdrawal, nearest),\n  141          db.gasCost.getNearest(chain, tokenSymbol, GasCostTransactionType.BondWithdrawalAndAttemptSwap, nearest),\n\n~/Sandbox/hop/packages/hop-node/src/cli/hopNode.ts:\n  132    }\n  133  \n  134:   const promises: Array<Promise<void>> = []\n  135:   promises.push(new Promise((resolve) => {\n  136      new OsWatcher({\n  137        heapdump\n  ...\n  160      }\n  161  \n  162:     promises.push(new Promise((resolve) => {\n  163        new HealthCheckWatcher({\n  164          days: healthCheckDays,\n  ...\n  172    }\n  173  \n  174:   await Promise.all([...starts, ...promises])\n  175  }\n  176  \n\n~/Sandbox/hop/packages/hop-node/src/cli/keystores.ts:\n  171  }\n  172  \n  173: async function generatePassphrase (): Promise<string> {\n  174    const passphrase = await promptPassphrase(\n  175      'Enter new keystore encryption passphrase'\n\n~/Sandbox/hop/packages/hop-node/src/cli/stake.ts:\n  136  }\n  137  \n  138: async function getToken (bridge: L2Bridge | L1Bridge): Promise<Token | void> { // eslint-disable-line @typescript-eslint/no-invalid-void-type\n  139    const isEthSend: boolean = bridge.l1CanonicalTokenAddress === constants.AddressZero\n  140    if (isEthSend) {\n  ...\n  154  }\n  155  \n  156: async function getTokenBalance (bridge: L2Bridge | L1Bridge, token: Token | void): Promise<BigNumber> { // eslint-disable-line @typescript-eslint/no-invalid-void-type\n  157    if (!token) {\n  158      return bridge.getEthBalance()\n  ...\n  161  }\n  162  \n  163: async function getBridge (token: string, chain: string): Promise<L2Bridge | L1Bridge> {\n  164    // Arbitrary watcher since only the bridge is needed\n  165    const watcher = await getBondWithdrawalWatcher({ chain, token, dryMode: false })\n\n~/Sandbox/hop/packages/hop-node/src/cli/stakeStatus.ts:\n   33    logger.debug(`bonder address: ${bonderAddress}`)\n   34  \n   35:   const [credit, rawDebit, debit, allowance, eth] = await Promise.all([\n   36      bridge.getCredit(),\n   37      bridge.getRawDebit(),\n   ..\n   54  }\n   55  \n   56: async function getToken (bridge: L2Bridge | L1Bridge): Promise<Token | void> { // eslint-disable-line @typescript-eslint/no-invalid-void-type\n   57    const isEthSend: boolean = bridge.l1CanonicalTokenAddress === constants.AddressZero\n   58    if (isEthSend) {\n\n~/Sandbox/hop/packages/hop-node/src/cli/unconfirmedRoots.ts:\n   59  }\n   60  \n   61: async function getRootsBonded (token: string, endDateSeconds: number): Promise<string[]> {\n   62    const startDate = 0\n   63    const bondedRes = await getTransferRootBonded(Chain.Ethereum, token, startDate, endDateSeconds)\n   ..\n   70  }\n   71  \n   72: async function getRootsConfirmed (token: string): Promise<string[]> {\n   73    const confirmedRes = await getTransferRootConfirmed(Chain.Ethereum, token)\n   74    const rootsConfirmed: string[] = []\n   ..\n   80  }\n   81  \n   82: async function getRootsBondedButNotConfirmed (rootsBonded: string[], rootsConfirmed: string[]): Promise<string[]> {\n   83    const rootsBondedButNotConfirmed: string[] = []\n   84    for (const rootBonded of rootsBonded) {\n   ..\n   90  }\n   91  \n   92: async function getRootsCommitted (token: string): Promise<Record<string, RootsCommitted>> {\n   93    const sourceChains = getSourceChains(token)\n   94    const rpcRootsCommitted: Record<string, RootsCommitted> = {}\n\n~/Sandbox/hop/packages/hop-node/src/cli/unsettledRoots.ts:\n  110  }\n  111  \n  112: async function getSettledRoots (chain: string, token: string): Promise<SettledRootsPerBonder> {\n  113    const multipleWithdrawalsSettledRes = await getMultipleWithdrawalsSettled(chain, token)\n  114    const settledPerBonder: any = {}\n\n~/Sandbox/hop/packages/hop-node/src/cli/unstake.ts:\n   45  ) {\n   46    logger.debug('Unstaking')\n   47:   const [credit, debit] = await Promise.all([\n   48      bridge.getCredit(),\n   49      bridge.getDebit()\n\n~/Sandbox/hop/packages/hop-node/src/db/BaseDb.ts:\n  138    }\n  139  \n  140:   protected async tilReady (): Promise<boolean> {\n  141      if (this.ready) {\n  142        return true\n  ...\n  199    async _updateWithBatch (key: string, data: any) {\n  200      const logger = this.logger.create({ id: key })\n  201:     return new Promise(async (resolve, reject) => {\n  202        const cb = (err: Error, ops: any[]) => {\n  203          if (err) {\n  ...\n  236        })\n  237  \n  238:       return new Promise((resolve, reject) => {\n  239          this.db.batch(groupedOps, (err: Error) => {\n  240            for (const { cb } of putItems) {\n  ...\n  285    }\n  286  \n  287:   async getKeys (filter?: KeyFilter): Promise<string[]> {\n  288      filter = Object.assign({\n  289        keys: true,\n  ...\n  294    }\n  295  \n  296:   async getValues (filter?: KeyFilter): Promise<any[]> {\n  297      filter = Object.assign({\n  298        keys: true,\n  ...\n  303    }\n  304  \n  305:   async getKeyValues (filter: KeyFilter = { keys: true, values: true }): Promise<KV[]> {\n  306:     return await new Promise((resolve, reject) => {\n  307        const kv: KV[] = []\n  308        const s = this.db.createReadStream(filter)\n\n~/Sandbox/hop/packages/hop-node/src/db/GasBoostDb.ts:\n    2  \n    3  class GasBoostDb extends BaseDb {\n    4:   async updateItem (key: string, data: any): Promise<void> {\n    5      await this._update(key, data)\n    6    }\n    7  \n    8:   async getItem (key: string): Promise<any> {\n    9      const item = await this.getById(key)\n   10      return item\n   11    }\n   12  \n   13:   async deleteItem (key: string): Promise<void> {\n   14      await this.deleteById(key)\n   15    }\n\n~/Sandbox/hop/packages/hop-node/src/db/GasCostDb.ts:\n   50    }\n   51  \n   52:   async getItems (filter?: KeyFilter): Promise<GasCost[]> {\n   53      const items: GasCost[] = await this.getValues(filter)\n   54      return items.filter(x => x)\n   55    }\n   56  \n   57:   async getNearest (chain: string, token: string, transactionType: GasCostTransactionType, targetTimestamp: number): Promise<GasCost | null> {\n   58      await this.tilReady()\n   59      const startTimestamp = targetTimestamp - OneHourSeconds\n   ..\n   85    }\n   86  \n   87:   private async getOldEntries (): Promise<GasCost[]> {\n   88      await this.tilReady()\n   89      const oneWeekAgo = Math.floor((Date.now() - OneWeekMs) / 1000)\n   ..\n   98    }\n   99  \n  100:   private async prune (): Promise<void> {\n  101      await this.tilReady()\n  102      const items = await this.getOldEntries()\n\n~/Sandbox/hop/packages/hop-node/src/db/SyncStateDb.ts:\n   28    }\n   29  \n   30:   async getByKey (key: string): Promise<State> {\n   31      const item: State = await this.getById(key)\n   32      return this.normalizeValue(key, item)\n   33    }\n   34  \n   35:   async getItems (): Promise<State[]> {\n   36      const items: State[] = await this.getValues()\n   37      return items.filter(x => x)\n\n~/Sandbox/hop/packages/hop-node/src/db/TransferRootsDb.ts:\n  321    }\n  322  \n  323:   async getEvents (transferRootId: string): Promise<MultipleWithdrawalsSettled[]> {\n  324      const filter: KeyFilter = {\n  325        gte: `${transferRootId}:`,\n  ...\n  387      transferRoot.transferRootId = transferRootId\n  388  \n  389:     await Promise.all([\n  390        this.subDbTimestamps.insertItem(transferRoot as TransferRoot),\n  391        this.subDbRootHashes.insertItem(transferRoot as TransferRoot),\n  ...\n  397    async getByTransferRootId (\n  398      transferRootId: string\n  399:   ): Promise<TransferRoot> {\n  400      await this.tilReady()\n  401      const item: TransferRoot = await this.getById(transferRootId)\n  ...\n  413    async getByTransferRootHash (\n  414      transferRootHash: string\n  415:   ): Promise<TransferRoot | null> {\n  416      await this.tilReady()\n  417      const transferRootId = await this.subDbRootHashes.getByTransferRootHash(transferRootHash)\n  ...\n  423    }\n  424  \n  425:   async getTransferRootIds (dateFilter?: TransferRootsDateFilter): Promise<string[]> {\n  426      await this.tilReady()\n  427      const kv = await this.subDbTimestamps.getFilteredKeyValues(dateFilter)\n  ...\n  429    }\n  430  \n  431:   async getItems (dateFilter?: TransferRootsDateFilter): Promise<TransferRoot[]> {\n  432      await this.tilReady()\n  433      const transferRootIds = await this.getTransferRootIds(dateFilter)\n  ...\n  440    }\n  441  \n  442:   async getTransferRoots (dateFilter?: TransferRootsDateFilter): Promise<TransferRoot[]> {\n  443      await this.tilReady()\n  444      return this.getItems(dateFilter)\n  ...\n  446  \n  447    // gets only transfer roots within range: now - 2 weeks ago\n  448:   async getTransferRootsFromTwoWeeks (): Promise<TransferRoot[]> {\n  449      await this.tilReady()\n  450      const fromUnix = Math.floor((Date.now() - (OneWeekMs * 2)) / 1000)\n  ...\n  454    }\n  455  \n  456:   async getBondedTransferRootsFromTwoWeeks (): Promise<TransferRoot[]> {\n  457      await this.tilReady()\n  458      const fromUnix = Math.floor((Date.now() - (OneWeekMs * 2)) / 1000)\n  ...\n  465    async getUnbondedTransferRoots (\n  466      filter: GetItemsFilter = {}\n  467:   ): Promise<UnbondedTransferRoot[]> {\n  468      await this.tilReady()\n  469      const transferRoots: TransferRoot[] = await this.getTransferRootsFromTwoWeeks()\n  ...\n  511    async getExitableTransferRoots (\n  512      filter: GetItemsFilter = {}\n  513:   ): Promise<ExitableTransferRoot[]> {\n  514      await this.tilReady()\n  515      const transferRoots: TransferRoot[] = await this.getTransferRootsFromTwoWeeks()\n  ...\n  575    async getConfirmableTransferRoots (\n  576      filter: GetItemsFilter = {}\n  577:   ): Promise<ExitableTransferRoot[]> {\n  578      await this.tilReady()\n  579      const transferRoots: TransferRoot[] = await this.getTransferRootsFromTwoWeeks()\n  ...\n  632    async getRelayableTransferRoots (\n  633      filter: GetItemsFilter = {}\n  634:   ): Promise<RelayableTransferRoot[]> {\n  635      await this.tilReady()\n  636      const transferRoots: TransferRoot[] = await this.getTransferRootsFromTwoWeeks()\n  ...\n  685    async getChallengeableTransferRoots (\n  686      filter: GetItemsFilter = {}\n  687:   ): Promise<ChallengeableTransferRoot[]> {\n  688      await this.tilReady()\n  689      const transferRoots: TransferRoot[] = await this.getBondedTransferRootsFromTwoWeeks()\n  ...\n  724    async getUnsettledTransferRoots (\n  725      filter: GetItemsFilter = {}\n  726:   ): Promise<UnsettledTransferRoot[]> {\n  727      await this.tilReady()\n  728      const transferRoots: TransferRoot[] = await this.getTransferRootsFromTwoWeeks()\n\n~/Sandbox/hop/packages/hop-node/src/db/TransfersDb.ts:\n  326      logger.debug('update called')\n  327      transfer.transferId = transferId\n  328:     await Promise.all([\n  329        this.subDbTimestamps.upsertItem(transfer as Transfer),\n  330        this.subDbRootHashes.insertItem(transfer as Transfer),\n  ...\n  333    }\n  334  \n  335:   async getByTransferId (transferId: string): Promise<Transfer> {\n  336      const item: Transfer = await this.getById(transferId)\n  337      return this.normalizeItem(item)\n  338    }\n  339  \n  340:   async getTransferIds (dateFilter?: TransfersDateFilter): Promise<string[]> {\n  341      const kv = await this.subDbTimestamps.getFilteredKeyValues(dateFilter)\n  342      return kv.map(this.filterValueTransferId).filter(this.filterExisty)\n  343    }\n  344  \n  345:   async getItems (dateFilter?: TransfersDateFilter): Promise<Transfer[]> {\n  346      const transferIds = await this.getTransferIds(dateFilter)\n  347      return this.getMultipleTransfersByTransferIds(transferIds)\n  ...\n  357    }\n  358  \n  359:   async getTransfers (dateFilter?: TransfersDateFilter): Promise<Transfer[]> {\n  360      await this.tilReady()\n  361      return await this.getItems(dateFilter)\n  ...\n  382    async getUncommittedTransfers (\n  383      filter: GetItemsFilter = {}\n  384:   ): Promise<UncommittedTransfer[]> {\n  385      const transfers: Transfer[] = await this.getTransfersFromWeek()\n  386      const filtered = transfers.filter(item => {\n  ...\n  402    async getUnbondedSentTransfers (\n  403      filter: GetItemsFilter = {}\n  404:   ): Promise<UnbondedSentTransfer[]> {\n  405      const transfers: Transfer[] = await this.getTransfersFromWeek()\n  406      const isEthToken = this.prefix?.startsWith('ETH')\n  ...\n  450    async getUnrelayedSentTransfers (\n  451      filter: GetItemsFilter = {}\n  452:   ): Promise<UnrelayedSentTransfer[]> {\n  453      const transfers: Transfer[] = await this.getTransfersFromWeek()\n  454      const filtered = transfers.filter(item => {\n\n~/Sandbox/hop/packages/hop-node/src/gasboost/GasBoostSigner.ts:\n   79    }\n   80  \n   81:   protected async tilReady (): Promise<boolean> {\n   82      if (this.ready) {\n   83        return true\n   ..\n   94  \n   95    // this is a required ethers Signer method\n   96:   async sendTransaction (tx: providers.TransactionRequest): Promise<providers.TransactionResponse> {\n   97      await this.tilReady()\n   98      return await this.mutex.runExclusive(async () => {\n   ..\n  106    }\n  107  \n  108:   private async _sendTransaction (tx: providers.TransactionRequest, id: string): Promise<providers.TransactionResponse> {\n  109      const _timeId = `GasBoostTransaction elapsed ${id} `\n  110      console.time(_timeId)\n\n~/Sandbox/hop/packages/hop-node/src/gasboost/GasBoostTransaction.ts:\n  377    }\n  378  \n  379:   async getLatestNonce (): Promise<number> {\n  380      return await this.signer.getTransactionCount('pending')\n  381    }\n  ...\n  385    }\n  386  \n  387:   async getMarketGasPrice (): Promise<BigNumber> {\n  388      return await this.signer.getGasPrice()\n  389    }\n  390  \n  391:   async getMarketMaxFeePerGas (): Promise<BigNumber> {\n  392      const { maxFeePerGas } = await this.getGasFeeData()\n  393      return maxFeePerGas! // eslint-disable-line\n  394    }\n  395  \n  396:   async getMarketMaxPriorityFeePerGas (): Promise<BigNumber> {\n  397      const isMainnet = typeof this._is1559Supported === 'boolean' && this._is1559Supported && this.chainSlug === Chain.Ethereum\n  398      if (isMainnet) {\n  ...\n  431    }\n  432  \n  433:   async getBumpedGasPrice (multiplier: number = this.gasPriceMultiplier): Promise<BigNumber> {\n  434      const marketGasPrice = await this.getMarketGasPrice()\n  435      if (!this.isChainGasFeeBumpable()) {\n  ...\n  444    }\n  445  \n  446:   async getBumpedMaxPriorityFeePerGas (multiplier: number = this.gasPriceMultiplier): Promise<BigNumber> {\n  447      const marketMaxPriorityFeePerGas = await this.getMarketMaxPriorityFeePerGas()\n  448      if (!this.isChainGasFeeBumpable()) {\n  ...\n  460    }\n  461  \n  462:   async getBumpedGasFeeData (multiplier: number = this.gasPriceMultiplier): Promise<Partial<GasFeeData>> {\n  463      const use1559 = await this.is1559Supported() && !this.gasPrice && this.type !== 0\n  464  \n  465      if (use1559) {\n  466:       let [maxFeePerGas, maxPriorityFeePerGas, currentBaseFeePerGas] = await Promise.all([\n  467          this.getMarketMaxFeePerGas(),\n  468          this.getBumpedMaxPriorityFeePerGas(multiplier),\n  ...\n  506    }\n  507  \n  508:   async getCurrentBaseFeePerGas (): Promise<BigNumber | null> {\n  509      const { baseFeePerGas } = await this.signer.provider!.getBlock('latest')\n  510      return baseFeePerGas ?? null\n  ...\n  559    }\n  560  \n  561:   async wait (): Promise<providers.TransactionReceipt> {\n  562      this.logger.debug(`wait() called, tx: ${this.hash}`)\n  563      this.logger.debug(`wait() called, txHash: ${this.txHash}`)\n  ...\n  570          .then(async (receipt: providers.TransactionReceipt) => this.handleConfirmation(hash!, receipt))\n  571      }\n  572:     return await new Promise((resolve, reject) => {\n  573        this\n  574          .on(State.Confirmed, (tx) => {\n  ...\n  732    }\n  733  \n  734:   private async _sendTransaction (gasFeeData: Partial<GasFeeData>): Promise<providers.TransactionResponse> {\n  735      const maxRetries = 10\n  736      let i = 0\n  ...\n  902    }\n  903  \n  904:   async is1559Supported (): Promise<boolean> {\n  905      if (typeof this._is1559Supported === 'boolean') {\n  906        return this._is1559Supported\n\n~/Sandbox/hop/packages/hop-node/src/gasboost/MemoryStore.ts:\n    1  export default class MemoryStore {\n    2    items: any = {}\n    3:   async updateItem (key: string, value: any): Promise<void> {\n    4      this.items[key] = Object.assign({}, this.items[key], value)\n    5    }\n    6  \n    7:   async getItem (key: string): Promise<any> {\n    8      return this.items[key]\n    9    }\n   10  \n   11:   async deleteItem (key: string): Promise<void> {\n   12      delete this.items[key]\n   13    }\n\n~/Sandbox/hop/packages/hop-node/src/gasboost/Store.ts:\n    1  export default interface Store {\n    2:   updateItem: (key: string, value: any) => Promise<void>\n    3:   getItem: (key: string) => Promise<any>\n    4:   deleteItem: (key: string) => Promise<void>\n    5  }\n    6  \n\n~/Sandbox/hop/packages/hop-node/src/keystore/keystore.ts:\n   41    }\n   42  \n   43:   return new Promise(resolve => {\n   44      keythereum.dump(\n   45        passphrase,\n   ..\n   56    keystore: any,\n   57    passphrase: string\n   58: ): Promise<any> {\n   59    if (typeof keystore === 'string') {\n   60      keystore = JSON.parse(keystore.trim())\n\n~/Sandbox/hop/packages/hop-node/src/priceFeed/Coinbase.ts:\n    4    private readonly baseUrl: string = 'https://api.pro.coinbase.com'\n    5  \n    6:   public async getPriceByTokenSymbol (symbol: string, base: string = 'USD'): Promise<number> {\n    7      // pair \"USDC-USD\" doesn't exist so just return $1\n    8      if (symbol === 'USDC') {\n\n~/Sandbox/hop/packages/hop-node/src/provider/provider.ts:\n   29    }\n   30  \n   31:   async perform (method: string, params: any): Promise<any> {\n   32      this._monitorRequest(method, params)\n   33      return super.perform(method, params)\n   ..\n   68  \n   69    // Network\n   70:   getNetwork = rateLimitRetry(async (): Promise<Network> => {\n   71      return super.getNetwork()\n   72    })\n   73  \n   74    // Latest State\n   75:   getBlockNumber = rateLimitRetry(async (): Promise<number> => {\n   76      return super.getBlockNumber()\n   77    })\n   78  \n   79:   getGasPrice = rateLimitRetry(async (): Promise<BigNumber> => {\n   80      return super.getGasPrice()\n   81    })\n   82  \n   83    // Account\n   84:   getBalance = rateLimitRetry(async (addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> => {\n   85      return super.getBalance(addressOrName, blockTag)\n   86    })\n   87  \n   88:   getTransactionCount = rateLimitRetry(async (addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> => {\n   89      return super.getTransactionCount(addressOrName, blockTag)\n   90    })\n   91  \n   92:   getCode = rateLimitRetry(async (addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> => {\n   93      return super.getCode(addressOrName, blockTag)\n   94    })\n   95  \n   96:   getStorageAt = rateLimitRetry(async (addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> => {\n   97      return super.getStorageAt(addressOrName, position, blockTag)\n   98    })\n   99  \n  100    // Execution\n  101:   sendTransaction = rateLimitRetry(async (signedTransaction: string | Promise<string>): Promise<TransactionResponse> => {\n  102      return super.sendTransaction(signedTransaction)\n  103    })\n  104  \n  105:   call = rateLimitRetry(async (transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> => {\n  106      return super.call(transaction, blockTag)\n  107    })\n  108  \n  109:   estimateGas = rateLimitRetry(async (transaction: Deferrable<TransactionRequest>): Promise<BigNumber> => {\n  110      return super.estimateGas(transaction)\n  111    })\n  112  \n  113    // Queries\n  114:   getBlock = rateLimitRetry(async (blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> => {\n  115      return super.getBlock(blockHashOrBlockTag)\n  116    })\n  117  \n  118:   getBlockWithTransactions = rateLimitRetry(async (blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> => {\n  119      return super.getBlockWithTransactions(blockHashOrBlockTag)\n  120    })\n  121  \n  122:   getTransaction = rateLimitRetry(async (transactionHash: string | Promise<string>): Promise<TransactionResponse> => {\n  123      return super.getTransaction(transactionHash)\n  124    })\n  125  \n  126:   getTransactionReceipt = rateLimitRetry(async (transactionHash: string | Promise<string>): Promise<TransactionReceipt> => {\n  127      return super.getTransactionReceipt(transactionHash)\n  128    })\n  129  \n  130    // Bloom-filter Queries\n  131:   getLogs = rateLimitRetry(async (filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Log[]> => {\n  132      // this._trackStackTrace('getLogs', new Error().stack)\n  133      return super.getLogs(filter)\n  ...\n  135  \n  136    // ENS\n  137:   resolveName = rateLimitRetry(async (name: string | Promise<string>): Promise<null | string> => {\n  138      return super.resolveName(name)\n  139    })\n  140  \n  141:   lookupAddress = rateLimitRetry(async (address: string | Promise<string>): Promise<null | string> => {\n  142      return super.lookupAddress(address)\n  143    })\n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getIncompleteSettlements.ts:\n   31  }\n   32  \n   33: export default async function getIncompleteSettlements (token: string, chain: string, destinationChain: string): Promise<any> {\n   34    const destinationChainId: number = chainSlugToId(destinationChain)\n   35  \n   ..\n  155    chain: string,\n  156    destinationChainId: number\n  157: ): Promise<TransferCommitted[]> {\n  158    const query = getTransfersCommittedsQuery(token)\n  159    const transfersCommittedRes = await makeRequest(chain, query, {\n  ...\n  167    destinationChain: string,\n  168    rootHash: string\n  169: ): Promise<MultipleWithdrawalsSettled[]> {\n  170    const query = getMultipleWithdrawalsSettledsQuery()\n  171    const multipleWithdrawalsSettledRes = await makeRequest(destinationChain, query, {\n  ...\n  181    startBlockNumber: string,\n  182    endBlockNumber: string\n  183: ): Promise<TransferSent[]> {\n  184    const query = getTransferSentsQuery(token)\n  185    const transferSentRes = await makeRequest(chain, query, {\n  ...\n  195    destinationChain: string,\n  196    transferId: string\n  197: ): Promise<WithdrawnTransfer[]> {\n  198    const query = getWithdrewsQuery()\n  199    const withdrewsRes = await makeRequest(destinationChain, query, {\n  ...\n  206    destinationChain: string,\n  207    transferId: string\n  208: ): Promise<BondedTransfer[]> {\n  209    const query = getWithdrawalBondedsQuery()\n  210    const withdrawalBondedsRes = await makeRequest(destinationChain, query, {\n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getTransfer.ts:\n    5  import { chainIdToSlug, normalizeEntity } from './shared'\n    6  \n    7: export default async function getTransfer (chain: string, token: string, transferId: string): Promise<any> {\n    8    let query = `\n    9      query TransferId(${token ? '$token: String, ' : ''}$transferId: String) {\n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getTransferIds.ts:\n    9    filters: Partial<Filters> = {},\n   10    lastId: string = '0'\n   11: ): Promise<any[]> {\n   12    if (chain === 'ethereum') {\n   13      return []\n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getTransferIdsForTransferRoot.ts:\n    9    token: string,\n   10    rootHash: string\n   11: ): Promise<string[]> {\n   12    // get commit transfer event of root hash\n   13    let query = `\n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getTransferRoot.ts:\n  104  }\n  105  \n  106: export default async function getTransferRoot (chain: string, token: string, transferRootHash: string): Promise<any> {\n  107    const transferRoot = await queryTransferRoot(chain, token, transferRootHash)\n  108    if (!transferRoot) {\n  ...\n  111    const destinationChain = chainIdToSlug[transferRoot.destinationChainId]\n  112  \n  113:   const [rootSet, rootConfirmed, transferIds] = await Promise.all([\n  114      queryRootSet(destinationChain, token, transferRootHash),\n  115      queryRootConfirmed(Chain.Ethereum, token, transferRootHash),\n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getTransferRootForTransferId.ts:\n    3  import makeRequest from './makeRequest'\n    4  \n    5: export default async function getTransferRootForTransferId (chain: string, token: string, transferId: string): Promise<any> {\n    6    let query = `\n    7      query TransferId($token: String, $transferId: String) {\n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getTransferRoots.ts:\n    6    token: string,\n    7    lastId: string = '0'\n    8: ): Promise<any[]> {\n    9    const query = `\n   10      query TransferRoots($token: String, $lastId: ID) {\n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getTransfers.ts:\n    3  import { Filters } from './shared'\n    4  \n    5: export default async function getTransfers (chain: string, token: string, cb: any, filters: Partial<Filters> = {}): Promise<any[]> {\n    6    const transferIds = await getTransferIds(chain, token, filters)\n    7    console.log(`transfer ids count: ${transferIds.length}`)\n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getTransferSent.ts:\n    2  import { normalizeEntity } from './shared'\n    3  \n    4: export default async function getTransferSent (chain: string, transferId: string): Promise<any> {\n    5    const query = `\n    6      query TransferSents($transferId: String) {\n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getUnbondedTransferRoots.ts:\n    6  import { formatUnits } from 'ethers/lib/utils'\n    7  \n    8: export default async function getUnbondedTransferRoots (chain: string, token: string, destinationChain: string, startTime?: number, endTime?: number): Promise<any> {\n    9    const destinationChainId: number = chainSlugToId(destinationChain)\n   10  \n\n~/Sandbox/hop/packages/hop-node/src/theGraph/getUnbondedTransfers.ts:\n   32      scrollZkTransfers,\n   33      baseTransfers\n   34:   ] = await Promise.all([\n   35:     enabledChains.includes(Chain.Ethereum) ? fetchTransfers(Chain.Ethereum, startTime, endTime) : Promise.resolve([]),\n   36:     enabledChains.includes(Chain.Gnosis) ? fetchTransfers(Chain.Gnosis, startTime, endTime) : Promise.resolve([]),\n   37:     enabledChains.includes(Chain.Polygon) ? fetchTransfers(Chain.Polygon, startTime, endTime) : Promise.resolve([]),\n   38:     enabledChains.includes(Chain.Optimism) ? fetchTransfers(Chain.Optimism, startTime, endTime) : Promise.resolve([]),\n   39:     enabledChains.includes(Chain.Arbitrum) ? fetchTransfers(Chain.Arbitrum, startTime, endTime) : Promise.resolve([]),\n   40:     enabledChains.includes(Chain.Nova) ? fetchTransfers(Chain.Nova, startTime, endTime) : Promise.resolve([]),\n   41:     enabledChains.includes(Chain.ZkSync) ? fetchTransfers(Chain.ZkSync, startTime, endTime) : Promise.resolve([]),\n   42:     enabledChains.includes(Chain.ConsenSysZk) ? fetchTransfers(Chain.ConsenSysZk, startTime, endTime) : Promise.resolve([]),\n   43:     enabledChains.includes(Chain.ScrollZk) ? fetchTransfers(Chain.ScrollZk, startTime, endTime) : Promise.resolve([]),\n   44:     enabledChains.includes(Chain.Base) ? fetchTransfers(Chain.Base, startTime, endTime) : Promise.resolve([])\n   45    ])\n   46  \n   ..\n  221      novaBondedWithdrawals,\n  222      mainnetBondedWithdrawals\n  223:   ] = await Promise.all([\n  224:     enabledChains.includes(Chain.Gnosis) ? fetchBonds(Chain.Gnosis, transferIds) : Promise.resolve([]),\n  225:     enabledChains.includes(Chain.Polygon) ? fetchBonds(Chain.Polygon, transferIds) : Promise.resolve([]),\n  226:     enabledChains.includes(Chain.Optimism) ? fetchBonds(Chain.Optimism, transferIds) : Promise.resolve([]),\n  227:     enabledChains.includes(Chain.Arbitrum) ? fetchBonds(Chain.Arbitrum, transferIds) : Promise.resolve([]),\n  228:     enabledChains.includes(Chain.Nova) ? fetchBonds(Chain.Nova, transferIds) : Promise.resolve([]),\n  229:     enabledChains.includes(Chain.Ethereum) ? fetchBonds(Chain.Ethereum, transferIds) : Promise.resolve([])\n  230    ])\n  231  \n  ...\n  240      novaWithdrews,\n  241      mainnetWithdrews\n  242:   ] = await Promise.all([\n  243:     enabledChains.includes(Chain.Gnosis) ? fetchWithdrews(Chain.Gnosis, transferIds) : Promise.resolve([]),\n  244:     enabledChains.includes(Chain.Polygon) ? fetchWithdrews(Chain.Polygon, transferIds) : Promise.resolve([]),\n  245:     enabledChains.includes(Chain.Optimism) ? fetchWithdrews(Chain.Optimism, transferIds) : Promise.resolve([]),\n  246:     enabledChains.includes(Chain.Arbitrum) ? fetchWithdrews(Chain.Arbitrum, transferIds) : Promise.resolve([]),\n  247:     enabledChains.includes(Chain.Nova) ? fetchWithdrews(Chain.Nova, transferIds) : Promise.resolve([]),\n  248:     enabledChains.includes(Chain.Ethereum) ? fetchWithdrews(Chain.Ethereum, transferIds) : Promise.resolve([])\n  249    ])\n  250  \n  ...\n  258      arbitrumFromL1Completeds,\n  259      novaFromL1Completeds\n  260:   ] = await Promise.all([\n  261:     enabledChains.includes(Chain.Gnosis) ? fetchTransferFromL1Completeds(Chain.Gnosis, startTime, endTime) : Promise.resolve([]),\n  262:     enabledChains.includes(Chain.Polygon) ? fetchTransferFromL1Completeds(Chain.Polygon, startTime, endTime) : Promise.resolve([]),\n  263:     enabledChains.includes(Chain.Optimism) ? fetchTransferFromL1Completeds(Chain.Optimism, startTime, endTime) : Promise.resolve([]),\n  264:     enabledChains.includes(Chain.Arbitrum) ? fetchTransferFromL1Completeds(Chain.Arbitrum, startTime, endTime) : Promise.resolve([]),\n  265:     enabledChains.includes(Chain.Nova) ? fetchTransferFromL1Completeds(Chain.Nova, startTime, endTime) : Promise.resolve([])\n  266    ])\n  267  \n  ...\n  314    console.log('getTransfersData: mapping transfers to bonds')\n  315  \n  316:   await Promise.all(data.map((x: any) => {\n  317      const bonds = bondsMap[chainIdToSlug(x.destinationChain)]\n  318      if (bonds) {\n  ...\n  329    console.log('getTransfersData: mapping events to l1CompletedsMap')\n  330  \n  331:   await Promise.all(data.map((x: any) => {\n  332      const sourceChain = chainIdToSlug(x.sourceChain)\n  333      if (sourceChain !== Chain.Ethereum) {\n\n~/Sandbox/hop/packages/hop-node/src/utils/getBlockNumberFromDate.ts:\n    5  import { etherscanApiKeys, etherscanApiUrls } from 'src/config'\n    6  \n    7: export async function getBlockNumberFromDate (chain: string, timestamp: number): Promise<number> {\n    8    const useEtherscan = etherscanApiKeys[chain]\n    9    if (useEtherscan) {\n   ..\n   14  }\n   15  \n   16: async function getBlockNumberFromDateUsingEtherscan (chain: string, timestamp: number): Promise<number> {\n   17    const apiKey = etherscanApiKeys[chain]\n   18    if (!apiKey) {\n   ..\n   32  }\n   33  \n   34: async function getBlockNumberFromDateUsingLib (chain: string, timestamp: number): Promise<number> {\n   35    const provider = getRpcProvider(chain)\n   36    const blockDater = new BlockDater(provider)\n\n~/Sandbox/hop/packages/hop-node/src/utils/getNameservers.ts:\n    3  dns.setServers(['8.8.8.8'])\n    4  \n    5: export async function getNameservers (domain: string): Promise<string[]> {\n    6:   return new Promise((resolve, reject) => {\n    7      dns.resolveNs(domain, (err: any, res: string[]) => {\n    8        if (err) {\n\n~/Sandbox/hop/packages/hop-node/src/utils/promiseQueue.ts:\n   16    let i = 0\n   17    for (const chunks of allChunks) {\n   18:     await Promise.all(chunks.map(async (item) => {\n   19        i++\n   20        await cb(item, i)\n\n~/Sandbox/hop/packages/hop-node/src/utils/promiseTimeout.ts:\n    1  class TimeoutError extends Error {}\n    2  \n    3: export async function promiseTimeout<T> (promise: Promise<T>, timeout: number): Promise<T> {\n    4:   return await new Promise(async (resolve, reject) => {\n    5      let timedout = false\n    6      const t = setTimeout(() => {\n    .\n   10  \n   11      // make it a promise if it's not one\n   12:     Promise.resolve(promise)\n   13        .then((result: any) => {\n   14          clearTimeout(t)\n\n~/Sandbox/hop/packages/hop-node/src/utils/rateLimitRetry.ts:\n    8  const notifier = new Notifier(`rateLimitRetry, host: ${hostname}`)\n    9  \n   10: export default function rateLimitRetry<FN extends (...args: any[]) => Promise<any>> (fn: FN): (...args: Parameters<FN>) => Promise<Awaited<ReturnType<FN>>> {\n   11    const id = `${process.hrtime.bigint()}`\n   12    const logger = _logger.create({ id })\n   13:   return async (...args: Parameters<FN>): Promise<Awaited<ReturnType<FN>>> => {\n   14      let retries = 0\n   15      const retry = () => promiseTimeout(fn(...args), rpcTimeoutSeconds * 1000) // eslint-disable-line\n\n~/Sandbox/hop/packages/hop-node/src/utils/wait.ts:\n    1  async function wait (t: number) {\n    2:   return await new Promise(resolve => setTimeout(() => resolve(null), t))\n    3  }\n    4  \n\n~/Sandbox/hop/packages/hop-node/src/vault/AaveVault.ts:\n  106    }\n  107  \n  108:   async getBalance (account?: string): Promise<BigNumber> {\n  109      if (!account) {\n  110        account = await this.signer.getAddress()\n\n~/Sandbox/hop/packages/hop-node/src/vault/Vault.ts:\n   31    }\n   32  \n   33:   abstract getBalance (account?: string): Promise<BigNumber>\n   34:   abstract deposit (amount: BigNumber): Promise<any>\n   35:   abstract withdraw (amount: BigNumber): Promise<any>\n   36    abstract formatUnits (amount: BigNumber): number\n   37    abstract parseUnits (amount: string | number): BigNumber\n\n~/Sandbox/hop/packages/hop-node/src/vault/YearnVault.ts:\n   83    }\n   84  \n   85:   async getBalance (account?: string): Promise<BigNumber> {\n   86      if (!account) {\n   87        account = await this.signer.getAddress()\n\n~/Sandbox/hop/packages/hop-node/src/watchers/ArbitrumBridgeWatcher.ts:\n   41    async relayXDomainMessage (\n   42      txHash: string\n   43:   ): Promise<providers.TransactionResponse> {\n   44      const txReceipt = await this.l2Wallet.provider.getTransactionReceipt(txHash)\n   45      const initiatingTxnReceipt = new L2TransactionReceipt(\n   ..\n   89    }\n   90  \n   91:   async redeemArbitrumTransaction (l1TxHash: string, messageIndex: number = 0): Promise<providers.TransactionResponse> {\n   92      const status = await this.getMessageStatus(l1TxHash, messageIndex)\n   93      if (status !== L1ToL2MessageStatus.FUNDS_DEPOSITED_ON_L2) {\n   ..\n  100    }\n  101  \n  102:   async getL1ToL2Message (l1TxHash: string, messageIndex: number = 0, useDefaultProvider: boolean = false): Promise<IL1ToL2MessageWriter> {\n  103      const l1ToL2Messages = await this.getL1ToL2Messages(l1TxHash, useDefaultProvider)\n  104      return l1ToL2Messages[messageIndex]\n  105    }\n  106  \n  107:   async getL1ToL2Messages (l1TxHash: string, useDefaultProvider: boolean = false): Promise<IL1ToL2MessageWriter[]> {\n  108      const l2Wallet = useDefaultProvider ? this.l2Wallet.connect(this.defaultL2Provider) : this.l2Wallet\n  109      const txReceipt = await this.l1Wallet.provider.getTransactionReceipt(l1TxHash)\n  ...\n  112    }\n  113  \n  114:   async isTransactionRedeemed (l1TxHash: string, messageIndex: number = 0): Promise<boolean> {\n  115      const status = await this.getMessageStatus(l1TxHash, messageIndex)\n  116      return status === L1ToL2MessageStatus.REDEEMED\n  117    }\n  118  \n  119:   async getMessageStatus (l1TxHash: string, messageIndex: number = 0): Promise<L1ToL2MessageStatus> {\n  120      // We cannot use our provider here because the SDK will rateLimitRetry and exponentially backoff as it retries an on-chain call\n  121      const useDefaultProvider = true\n\n~/Sandbox/hop/packages/hop-node/src/watchers/AvailableLiquidityWatcher.ts:\n  191    }\n  192  \n  193:   async getBonderAddress (destinationChain: string): Promise<string> {\n  194      const routeBonder = getConfigBonderForRoute(this.tokenSymbol, this.chainSlug, destinationChain)\n  195      return (routeBonder || await this.bridge.getBonderAddress())?.toLowerCase()\n\n~/Sandbox/hop/packages/hop-node/src/watchers/BondTransferRootWatcher.ts:\n   46      )\n   47  \n   48:     const promises: Array<Promise<any>> = []\n   49      for (const dbTransferRoot of dbTransferRoots) {\n   50        const {\n   ..\n   81      }\n   82  \n   83:     await Promise.all(promises)\n   84    }\n   85  \n\n~/Sandbox/hop/packages/hop-node/src/watchers/ConfirmRootsWatcher.ts:\n  141    async pollHandler () {\n  142      try {\n  143:       await Promise.all([\n  144          this.checkExitableTransferRootsFromDb(),\n  145          this.checkConfirmableTransferRootsFromDb()\n  ...\n  248    }\n  249  \n  250:   async confirmRootsViaWrapper (rootData: ConfirmRootsData[]): Promise<void> {\n  251      const rootHashes: string[] = []\n  252      const destinationChainIds: number[] = []\n\n~/Sandbox/hop/packages/hop-node/src/watchers/ConsenSysZkBridgeWatcher.ts:\n   27    }\n   28  \n   29:   async relayXDomainMessage (commitTxHash: string): Promise<void> {\n   30      // noop\n   31    }\n\n~/Sandbox/hop/packages/hop-node/src/watchers/GnosisBridgeWatcher.ts:\n   74    }\n   75  \n   76:   async relayXDomainMessage (commitTxHash: string): Promise<providers.TransactionResponse> {\n   77      const token: string = this.tokenSymbol\n   78      const l1Amb = getL1Amb(token)\n\n~/Sandbox/hop/packages/hop-node/src/watchers/HealthCheckWatcher.ts:\n  319    }\n  320  \n  321:   private async getResult (): Promise<Result> {\n  322      const [\n  323        lowBonderBalances,\n  ...\n  334        dnsNameserversChanged,\n  335        lowOsResources\n  336:     ] = await Promise.all([\n  337:       this.enabledChecks.lowBonderBalances ? this.getLowBonderBalances() : Promise.resolve([]),\n  338:       this.enabledChecks.lowAvailableLiquidityBonders ? this.getLowAvailableLiquidityBonders() : Promise.resolve([]),\n  339:       this.enabledChecks.unbondedTransfers ? this.getUnbondedTransfers() : Promise.resolve([]),\n  340:       this.enabledChecks.unbondedTransferRoots ? this.getUnbondedTransferRoots() : Promise.resolve([]),\n  341:       this.enabledChecks.incompleteSettlements ? this.getIncompleteSettlements() : Promise.resolve([]),\n  342:       this.enabledChecks.challengedTransferRoots ? this.getChallengedTransferRoots() : Promise.resolve([]),\n  343:       this.enabledChecks.unsyncedSubgraphs ? this.getUnsyncedSubgraphs() : Promise.resolve([]),\n  344:       this.enabledChecks.missedEvents ? this.getMissedEvents() : Promise.resolve([]),\n  345:       this.enabledChecks.invalidBondWithdrawals ? this.getInvalidBondWithdrawals() : Promise.resolve([]),\n  346:       this.enabledChecks.unrelayedTransfers ? this.getUnrelayedTransfers() : Promise.resolve([]),\n  347:       this.enabledChecks.unsetTransferRoots ? this.getUnsetTransferRoots() : Promise.resolve([]),\n  348:       this.enabledChecks.dnsNameserversChanged ? this.getDnsServersChanged() : Promise.resolve([]),\n  349:       this.enabledChecks.lowOsResources ? this.getLowOsResources() : Promise.resolve([])\n  350      ])\n  351  \n  ...\n  517    }\n  518  \n  519:   private async getLowBonderBalances (): Promise<LowBonderBalance[]> {\n  520      // TODO: Add Arbitrum and Optimism\n  521      const chainProviders: Record<string, providers.Provider> = {\n  ...\n  542      for (const bonder of bonders) {\n  543        const bridge = bonderBridges[bonder]\n  544:       const [ethBalance, xdaiBalance, maticBalance] = await Promise.all([\n  545          chainProviders[Chain.Ethereum].getBalance(bonder),\n  546          chainProviders[Chain.Gnosis].getBalance(bonder),\n  ...\n  588    }\n  589  \n  590:   private async getLowAvailableLiquidityBonders (): Promise<LowAvailableLiquidityBonder[]> {\n  591      const url = 'https://assets.hop.exchange/mainnet/v1-available-liquidity.json'\n  592      const res = await fetch(url)\n  ...\n  641    }\n  642  \n  643:   private async getUnbondedTransfers (): Promise<UnbondedTransfer[]> {\n  644      this.logger.debug('checking for unbonded transfers')\n  645  \n  ...\n  715    }\n  716  \n  717:   private async getUnbondedTransferRoots (): Promise<UnbondedTransferRoot[]> {\n  718      const now = DateTime.now().toUTC()\n  719      const sourceChains = [Chain.Optimism, Chain.Arbitrum, Chain.Nova]\n  ...\n  752    }\n  753  \n  754:   private async getIncompleteSettlements (): Promise<IncompleteSettlement[]> {\n  755      this.logger.debug('fetching incomplete settlements')\n  756      const timestamp = DateTime.now().toUTC().toSeconds()\n  ...\n  789    }\n  790  \n  791:   private async getChallengedTransferRoots (): Promise<ChallengedTransferRoot[]> {\n  792      // This function does not use TheGraph, as that adds an additional layer/failure point.\n  793  \n  ...\n  833    }\n  834  \n  835:   async getUnsyncedSubgraphs (): Promise<UnsyncedSubgraph[]> {\n  836      const now = DateTime.now().toUTC()\n  837      const outOfSyncTimestamp = Math.floor(now.minus({ hours: this.healthCheckFinalityTimeHours }).toSeconds())\n  ...\n  862    }\n  863  \n  864:   async getMissedEvents (): Promise<MissedEvent[]> {\n  865      const missedEvents: MissedEvent[] = []\n  866      const sourceChains = [Chain.Polygon, Chain.Gnosis, Chain.Optimism, Chain.Arbitrum, Chain.Nova]\n  ...\n  873        endDate: endDate.toISO()\n  874      }\n  875:     const promises: Array<Promise<null>> = []\n  876      for (const sourceChain of sourceChains) {\n  877        for (const token of tokens) {\n  ...\n  886            continue\n  887          }\n  888:         promises.push(new Promise(async (resolve, reject) => {\n  889            try {\n  890              const db = getDbSet(token)\n  ...\n  907      }\n  908  \n  909:     await Promise.all(promises)\n  910      this.logger.debug('done fetching all getTransferIds')\n  911  \n  ...\n  913    }\n  914  \n  915:   async getInvalidBondWithdrawals (): Promise<InvalidBondWithdrawal[]> {\n  916      const now = DateTime.now().toUTC()\n  917      const endDate = now.minus({ hours: this.healthCheckFinalityTimeHours * 2 })\n  ...\n  930    }\n  931  \n  932:   async getUnrelayedTransfers (): Promise<UnrelayedTransfer[]> {\n  933      const now = DateTime.now().toUTC()\n  934      const endDate = now.minus({ hours: this.healthCheckFinalityTimeHours })\n  ...\n  990    }\n  991  \n  992:   async getUnsetTransferRoots (): Promise<UnsetTransferRoot[]> {\n  993      const now = DateTime.now().toUTC()\n  994      const endDate = now.minus({ hours: this.healthCheckFinalityTimeHours })\n  ...\n 1005    }\n 1006  \n 1007:   async getDnsServersChanged (): Promise<DnsNameserversChanged[]> {\n 1008      try {\n 1009        if (expectedNameservers.length === 0) {\n ....\n 1040    }\n 1041  \n 1042:   async getLowOsResources (): Promise<LowOsResource[]> {\n 1043      const lowOsResources: LowOsResource[] = []\n 1044      const {\n\n~/Sandbox/hop/packages/hop-node/src/watchers/IncompleteSettlementsWatcher.ts:\n   92    }\n   93  \n   94:   private async tilReady (): Promise<any> {\n   95      if (this.ready) {\n   96        return true\n   ..\n  111  \n  112      for (const chain of this.chains) {\n  113:       const promises: Array<Promise<any>> = []\n  114        for (const token of this.tokens) {\n  115          this.logger.debug(`${chain} ${token} reading events`)\n  ...\n  136          this.logger.debug(`${chain} ${token} done reading events`)\n  137        }\n  138:       await Promise.all(promises)\n  139      }\n  140  \n  ...\n  143  \n  144    private async setStartBlockNumbers () {\n  145:     await Promise.all(this.chains.map(async (chain: string) => {\n  146        this.logger.debug(`${chain} - getting start and end block numbers`)\n  147        const date = DateTime.fromMillis(Date.now()).minus({ days: this.days + this.offsetDays })\n  ...\n  304    }\n  305  \n  306:   async getDiffResults (): Promise<any> {\n  307      await this.init()\n  308      await this.tilReady()\n\n~/Sandbox/hop/packages/hop-node/src/watchers/OptimismBridgeWatcher.ts:\n   53    async relayXDomainMessage (\n   54      txHash: string\n   55:   ): Promise<providers.TransactionResponse | undefined> {\n   56      let messageStatus = await this.csm.getMessageStatus(txHash)\n   57      if (messageStatus === MessageStatus.STATE_ROOT_NOT_PUBLISHED) {\n\n~/Sandbox/hop/packages/hop-node/src/watchers/OsWatcher.ts:\n   33  \n   34    async poll () {\n   35:     await Promise.all([\n   36        this.pollStats(),\n   37        this.pollHeapdump()\n   ..\n   65    }\n   66  \n   67:   static async getDiskUsage (): Promise<any> {\n   68:     return new Promise((resolve) => {\n   69        checkDiskSpace('/').then((diskSpace) => {\n   70          const totalSize = diskSpace?.size\n   ..\n  100    }\n  101  \n  102:   static async getCpuMemoryUsage (): Promise<any> {\n  103:     return new Promise((resolve, reject) => {\n  104        pidusage(process.pid, (err: Error, stats: any) => {\n  105          if (err) {\n\n~/Sandbox/hop/packages/hop-node/src/watchers/PolygonBridgeWatcher.ts:\n   88    }\n   89  \n   90:   protected async tilReady (): Promise<boolean> {\n   91      if (this.ready) {\n   92        return true\n   ..\n  104    }\n  105  \n  106:   async relayXDomainMessage (txHash: string): Promise<providers.TransactionResponse> {\n  107      await this.tilReady()\n  108  \n\n~/Sandbox/hop/packages/hop-node/src/watchers/RelayWatcher.ts:\n   61  \n   62    async pollHandler () {\n   63:     await Promise.all([\n   64        this.checkTransferSentToL2FromDb(),\n   65        this.checkRelayableTransferRootsFromDb()\n   ..\n  119      )\n  120  \n  121:     const promises: Array<Promise<any>> = []\n  122      for (const dbTransferRoot of dbTransferRoots) {\n  123        const { transferRootId } = dbTransferRoot\n  ...\n  125      }\n  126  \n  127:     await Promise.all(promises)\n  128      this.logger.debug('checkRelayableTransferRootsFromDb completed')\n  129    }\n  ...\n  345    }\n  346  \n  347:   async sendTransferRelayTx (params: any): Promise<providers.TransactionResponse> {\n  348      const {\n  349        transferId,\n  ...\n  361    }\n  362  \n  363:   async sendTransferRootRelayTx (destinationChainId: number, transferRootId: string, txHash: string): Promise<providers.TransactionResponse> {\n  364      const logger = this.logger.create({ root: transferRootId })\n  365      logger.debug(\n  ...\n  369    }\n  370  \n  371:   async sendRelayTx (destinationChainId: number, txHash: string, messageIndex: number = 0): Promise<providers.TransactionResponse> {\n  372      return await this.relayWatchers[destinationChainId].redeemArbitrumTransaction(txHash, messageIndex)\n  373    }\n  374  \n  375:   async getMessageIndex (transferId: string, transferSentTxHash: string, transferSentTimestamp: number): Promise<number> {\n  376      // We need to deterministically order all the messages in an L1 tx, even if they have already been relayed\n  377      type TransferId = string\n\n~/Sandbox/hop/packages/hop-node/src/watchers/ScrollZkBridgeWatcher.ts:\n   26    }\n   27  \n   28:   async relayXDomainMessage (commitTxHash: string): Promise<void> {\n   29      // noop\n   30    }\n\n~/Sandbox/hop/packages/hop-node/src/watchers/SettleBondedWithdrawalWatcher.ts:\n   36      const dbTransferRoots = await this.db.transferRoots.getUnsettledTransferRoots(await this.getFilterRoute())\n   37  \n   38:     const promises: Array<Promise<any>> = []\n   39      for (const dbTransferRoot of dbTransferRoots) {\n   40        const { transferRootId, transferIds } = dbTransferRoot\n   ..\n  113      )\n  114  \n  115:     await Promise.all(promises)\n  116    }\n  117  \n\n~/Sandbox/hop/packages/hop-node/src/watchers/SyncWatcher.ts:\n   93      this.started = true\n   94      try {\n   95:       await Promise.all([\n   96          this.pollGasCost(),\n   97          this.pollSync()\n   ..\n  217    }\n  218  \n  219:   async syncHandler (): Promise<any> {\n  220:     const promises: Array<Promise<any>> = []\n  221      let startBlockNumber = this.bridge.bridgeDeployedBlockNumber\n  222      let useCacheKey = true\n  ...\n  241      }\n  242  \n  243:     const transferRootInitialEventPromises: Array<Promise<any>> = []\n  244      if (this.isL1) {\n  245        const l1Bridge = this.bridge as L1Bridge\n  246:       transferRootInitialEventPromises.push(\n  247          l1Bridge.mapTransferRootBondedEvents(\n  248            async (event: TransferRootBondedEvent) => {\n  ...\n  292        )\n  293  \n  294:       transferRootInitialEventPromises.push(\n  295          l2Bridge.mapTransfersCommittedEvents(\n  296            async (event: TransfersCommittedEvent) => {\n  297:             return await Promise.all([\n  298                this.handleTransfersCommittedEvent(event)\n  299              ])\n  ...\n  304      }\n  305  \n  306:     const transferSpentPromises: Array<Promise<any>> = []\n  307:     transferSpentPromises.push(\n  308        this.bridge.mapWithdrawalBondedEvents(\n  309          async (event: WithdrawalBondedEvent) => {\n  ...\n  314      )\n  315  \n  316:     transferSpentPromises.push(\n  317        this.bridge.mapWithdrewEvents(\n  318          async (event: WithdrewEvent) => {\n  ...\n  324  \n  325      promises.push(\n  326:       Promise.all(transferSpentPromises.concat(transferRootInitialEventPromises))\n  327          .then(async () => {\n  328:           await Promise.all([\n  329              // This must be executed after the Withdrew and WithdrawalBonded event handlers\n  330              // on initial sync since it relies on data from those handlers.\n  ...\n  356      // these must come after db is done syncing,\n  357      // and syncAvailableCredit must be last\n  358:     await Promise.all(promises)\n  359        .then(async () => await this.availableLiquidityWatcher.syncBonderCredit())\n  360    }\n  ...\n  694      logger.debug(`transferIds count: ${transferIds.length}`)\n  695      const dbTransfers: Transfer[] = []\n  696:     await Promise.all(transferIds.map(async transferId => {\n  697        const dbTransfer = await this.db.transfers.getByTransferId(transferId)\n  698        if (!dbTransfer) {\n  ...\n 1102      })\n 1103  \n 1104:     await Promise.all(_transferIds.map(async (transferId: string) => {\n 1105        await this.db.transfers.update(transferId, {\n 1106          transferRootHash,\n ....\n 1341      )\n 1342  \n 1343:     await Promise.all(transferIds.map(async (transferId: string) => {\n 1344        await this.db.transfers.update(transferId, {\n 1345          transferRootHash,\n ....\n 1550  \n 1551          logger.debug('pollGasCost estimate. estimates complete')\n 1552:         await Promise.all(estimates.map(async ({ gasLimit, data, to, transactionType }) => {\n 1553            const { gasCost, gasCostInToken, gasPrice, tokenPriceUsd, nativeTokenPriceUsd } = await this.bridge.getGasCostEstimation(\n 1554              this.chainSlug,\n\n~/Sandbox/hop/packages/hop-node/src/watchers/ZkSyncBridgeWatcher.ts:\n  100    }\n  101  \n  102:   private async isReadyToExit (commitTxHash: string, transferRootId: string): Promise<boolean> {\n  103      const { message, messageHash } = await this.getEncodedMessage(transferRootId)\n  104  \n  ...\n  241    }\n  242  \n  243:   public async relayXDomainMessage (commitTxHash: string, transferRootId: string): Promise<providers.TransactionResponse> {\n  244      if (!commitTxHash) {\n  245        throw new Error('expected commitTxHash')\n\n~/Sandbox/hop/packages/hop-node/src/watchers/classes/BaseWatcher.ts:\n  157    }\n  158  \n  159:   async stop (): Promise<void> {\n  160      this.bridge.removeAllListeners()\n  161      this.started = false\n  ...\n  224    }\n  225  \n  226:   async getFilterRoute (): Promise<any> {\n  227      const sourceChainId = await this.getFilterSourceChainId()\n  228      const destinationChainIds = await this.getFilterDestinationChainIds()\n  ...\n  328      transferId: string,\n  329      transactionType: GasCostTransactionType\n  330:   ): Promise<boolean> {\n  331      const logger = this.logger.create({ id: transferId })\n  332      const dbTransfer = await this.db.transfers.getByTransferId(transferId)\n\n~/Sandbox/hop/packages/hop-node/src/watchers/classes/Bridge.ts:\n   74    }\n   75  \n   76:   async getBonderAddress (): Promise<string> {\n   77      const address = await (this.bridgeContract as Contract).signer.getAddress()\n   78      if (!address) {\n   ..\n   82    }\n   83  \n   84:   isBonder = async (): Promise<boolean> => {\n   85      const bonder = await this.getBonderAddress()\n   86      return await this.bridgeContract.getIsBonder(bonder)\n   87    }\n   88  \n   89:   getCredit = async (bonder?: string): Promise<BigNumber> => {\n   90      if (!bonder) {\n   91        bonder = await this.getBonderAddress()\n   ..\n   95    }\n   96  \n   97:   getDebit = async (bonder?: string): Promise<BigNumber> => {\n   98      if (!bonder) {\n   99        bonder = await this.getBonderAddress()\n  ...\n  105    }\n  106  \n  107:   getRawDebit = async (): Promise<BigNumber> => {\n  108      const bonder = await this.getBonderAddress()\n  109      const debit = await this.bridgeContract.getRawDebit(bonder)\n  ...\n  111    }\n  112  \n  113:   async getBaseAvailableCredit (bonder?: string): Promise<BigNumber> {\n  114:     const [credit, debit] = await Promise.all([\n  115        this.getCredit(bonder),\n  116        this.getDebit(bonder)\n  ...\n  124    }\n  125  \n  126:   async getBondedWithdrawalAmount (transferId: string): Promise<BigNumber> {\n  127      const bonderAddress = await this.getBonderAddress()\n  128      return await this.getBondedWithdrawalAmountByBonder(bonderAddress, transferId)\n  ...\n  132      bonder: string,\n  133      transferId: string\n  134:   ): Promise<BigNumber> => {\n  135      const bondedBn = await this.bridgeContract.getBondedWithdrawalAmount(\n  136        bonder,\n  ...\n  144      startBlockNumber?: number,\n  145      endBlockNumber?: number\n  146:   ): Promise<number> {\n  147      const event = await this.getBondedWithdrawalEvent(\n  148        transferId,\n  ...\n  160      startBlockNumber?: number,\n  161      endBlockNumber?: number\n  162:   ): Promise<WithdrawalBondedEvent | undefined> {\n  163      let match: WithdrawalBondedEvent | undefined\n  164      await this.eventsBatch(\n  ...\n  185      startBlockNumber?: number,\n  186      endBlockNumber?: number\n  187:   ): Promise<WithdrewEvent | undefined> {\n  188      let match: WithdrewEvent | undefined\n  189      await this.eventsBatch(\n  ...\n  206    }\n  207  \n  208:   isTransferIdSpent = async (transferId: string): Promise<boolean> => {\n  209      return await this.bridgeContract.isTransferIdSpent(transferId)\n  210    }\n  ...\n  395  \n  396    // get the chain ids of all bridged L2s and L1\n  397:   async getChainIds (): Promise<number[]> {\n  398      const chainIds: number[] = []\n  399      for (const key in globalConfig.networks) {\n  ...\n  404    }\n  405  \n  406:   stake = async (amount: BigNumber): Promise<providers.TransactionResponse> => {\n  407      const bonder = await this.getBonderAddress()\n  408      const txOverrides = await this.txOverrides()\n  ...\n  423    }\n  424  \n  425:   unstake = async (amount: BigNumber): Promise<providers.TransactionResponse> => {\n  426      const tx = await this.bridgeContract.unstake(\n  427        amount,\n  ...\n  436      transferNonce: string,\n  437      bonderFee: BigNumber\n  438:   ): Promise<providers.TransactionResponse> => {\n  439      const txOverrides = await this.txOverrides()\n  440  \n  ...\n  462      transferIds: string[],\n  463      amount: BigNumber\n  464:   ): Promise<providers.TransactionResponse> => {\n  465      const tx = await this.bridgeContract.settleBondedWithdrawals(\n  466        bonder,\n  ...\n  485      siblings: string[],\n  486      totalLeaves: number\n  487:   ): Promise<providers.TransactionResponse> => {\n  488      const tx = await this.bridgeContract.withdraw(\n  489        recipient,\n  ...\n  504    }\n  505  \n  506:   async getEthBalance (): Promise<BigNumber> {\n  507      const bonder = await this.getBonderAddress()\n  508      if (!bonder) {\n  ...\n  532  \n  533    protected async mapEventsBatch<E extends Event, R> (\n  534:     getEventsMethod: (start: number, end: number) => Promise<E[]>,\n  535      cb: EventCb<E, R>,\n  536      options?: Partial<EventsBatchOptions>\n  537:   ): Promise<R[]> {\n  538      let i = 0\n  539      const promises: R[] = []\n  ...\n  546        i++\n  547      }, options)\n  548:     return await Promise.all(promises)\n  549    }\n  550  \n  551    public async eventsBatch (\n  552:     cb: (start?: number, end?: number, i?: number) => Promise<boolean | undefined> | Promise<void>,\n  553      options: Partial<EventsBatchOptions> = {}\n  554    ) {\n  ...\n  861    }\n  862  \n  863:   async isTransferRootSet (transferRootHash: string, totalAmount: BigNumber): Promise<boolean> {\n  864      const transferRootStruct = await this.getTransferRoot(transferRootHash, totalAmount)\n  865      if (!transferRootStruct) {\n\n~/Sandbox/hop/packages/hop-node/src/watchers/classes/ContractBase.ts:\n   32    }\n   33  \n   34:   getChainId = async (): Promise<number> => {\n   35      if (this.chainId) {\n   36        return this.chainId\n   ..\n   58    }\n   59  \n   60:   getTransaction = async (txHash: string): Promise<Transaction> => {\n   61      if (!txHash) {\n   62        throw new Error('tx hash is required')\n   ..\n   67    getTransactionReceipt = async (\n   68      txHash: string\n   69:   ): Promise<providers.TransactionReceipt> => {\n   70      return await this.contract.provider.getTransactionReceipt(txHash)\n   71    }\n   72  \n   73:   getBlockNumber = async (): Promise<number> => {\n   74      return await this.contract.provider.getBlockNumber()\n   75    }\n   76  \n   77:   getFinalizedBlockNumber = async (): Promise<number> => {\n   78      // TODO: Use this.contract.provider when ethers.js is updated\n   79      const provider = getRpcProvider(this.chainSlug)!\n   ..\n   82    }\n   83  \n   84:   getSafeBlockNumber = async (): Promise<number> => {\n   85      // TODO: Use this.contract.provider when ethers.js is updated\n   86      const provider = getRpcProvider(this.chainSlug)!\n   ..\n   89    }\n   90  \n   91:   getTransactionBlockNumber = async (txHash: string): Promise<number> => {\n   92      const tx = await this.contract.provider.getTransaction(txHash)\n   93      if (!tx) {\n   ..\n   99    getBlockTimestamp = async (\n  100      blockNumber: number | string = 'latest'\n  101:   ): Promise<number> => {\n  102      const block = await this.contract.provider.getBlock(blockNumber)\n  103      if (!block) {\n  ...\n  109    async getTransactionTimestamp (\n  110      txHash: string\n  111:   ): Promise<number> {\n  112      const blockNumber = await this.getTransactionBlockNumber(txHash)\n  113      return await this.getBlockTimestamp(blockNumber)\n  114    }\n  115  \n  116:   async getEventTimestamp (event: Event): Promise<number> {\n  117      const tx = await event.getBlock()\n  118      if (!tx) {\n  ...\n  128      address: string,\n  129      blockNumber: string | number = 'latest'\n  130:   ): Promise<string> => {\n  131      return await this.contract.provider.getCode(address, blockNumber)\n  132    }\n  ...\n  134    getBalance = async (\n  135      address: string\n  136:   ): Promise<BigNumber> => {\n  137      if (!address) {\n  138        throw new Error('expected address')\n  ...\n  141    }\n  142  \n  143:   protected getGasPrice = async (): Promise<BigNumber> => {\n  144      return await this.contract.provider.getGasPrice()\n  145    }\n  146  \n  147:   protected async getBumpedGasPrice (multiplier: number): Promise<BigNumber> {\n  148      const gasPrice = await this.getGasPrice()\n  149      return getBumpedGasPrice(gasPrice, multiplier)\n  ...\n  162    }\n  163  \n  164:   async txOverrides (): Promise<TxOverrides> {\n  165      const txOptions: TxOverrides = {}\n  166      if (globalConfig.isMainnet) {\n\n~/Sandbox/hop/packages/hop-node/src/watchers/classes/IBaseWatcher.ts:\n    1  export interface IBaseWatcher {\n    2:   pollCheck(): Promise<void>\n    3    prePollHandler(): boolean\n    4:   pollHandler(): Promise<void>\n    5:   postPollHandler(): Promise<void>\n    6  \n    7:   start(): Promise<void>\n    8:   stop(): Promise<void>\n    9  }\n   10  \n\n~/Sandbox/hop/packages/hop-node/src/watchers/classes/L1Bridge.ts:\n  110    }\n  111  \n  112:   async isTransferRootIdBonded (transferRootId: string): Promise<boolean> {\n  113      const transferBondStruct = await this.getTransferBond(transferRootId)\n  114      if (!transferBondStruct) {\n  ...\n  122      startBlockNumber: number,\n  123      endBlockNumber: number\n  124:   ): Promise<TransferRootConfirmedEvent[]> => {\n  125      return await this.l1BridgeContract.queryFilter(\n  126        this.l1BridgeContract.filters.TransferRootConfirmed(),\n  ...\n  137    }\n  138  \n  139:   async isTransferRootIdConfirmed (destChainId: number, transferRootId: string): Promise<boolean> {\n  140      const committedAt = await this.getTransferRootCommittedAt(destChainId, transferRootId)\n  141      return committedAt > 0\n  142    }\n  143  \n  144:   getTransferRootCommittedAt = async (destChainId: number, transferRootId: string): Promise<number> => {\n  145      let committedAt\n  146      if (this.tokenSymbol === 'USDC' && globalConfig.network === 'mainnet') {\n  ...\n  152    }\n  153  \n  154:   async getMinTransferRootBondDelaySeconds (): Promise<number> {\n  155      // MIN_TRANSFER_ROOT_BOND_DELAY\n  156      return 15 * 60\n  157    }\n  158  \n  159:   async l1CanonicalToken (): Promise<Token> {\n  160      const tokenAddress = await (this.l1BridgeContract as L1ERC20BridgeContract).l1CanonicalToken()\n  161      const tokenContract = new Contract(\n  ...\n  171      chainId: number,\n  172      totalAmount: BigNumber\n  173:   ): Promise<providers.TransactionResponse> => {\n  174      const tx = await this.l1BridgeContract.bondTransferRoot(\n  175        transferRootHash,\n  ...\n  186      totalAmount: BigNumber,\n  187      destinationChainId: number\n  188:   ): Promise<providers.TransactionResponse> => {\n  189      const tx = await this.l1BridgeContract.challengeTransferBond(\n  190        transferRootHash,\n  ...\n  201      totalAmount: BigNumber,\n  202      destinationChainId: number\n  203:   ): Promise<providers.TransactionResponse> => {\n  204      const tx = await this.l1BridgeContract.resolveChallenge(\n  205        transferRootHash,\n  ...\n  216      amount: BigNumber,\n  217      recipient: string\n  218:   ): Promise<providers.TransactionResponse> => {\n  219      const isSupportedChainId = await this.isSupportedChainId(destinationChainId)\n  220      if (!isSupportedChainId) {\n  ...\n  262      amount: BigNumber,\n  263      recipient: string\n  264:   ): Promise<providers.TransactionResponse> => {\n  265      const isSupportedChainId = await this.isSupportedChainId(destinationChainId)\n  266      if (!isSupportedChainId) {\n  ...\n  310    }\n  311  \n  312:   isSupportedChainId = async (chainId: number): Promise<boolean> => {\n  313      const address = await this.l1BridgeContract.crossDomainMessengerWrappers(\n  314        chainId\n  ...\n  317    }\n  318  \n  319:   getBondForTransferAmount = async (amount: BigNumber): Promise<BigNumber> => {\n  320      return await this.l1BridgeContract.getBondForTransferAmount(amount)\n  321    }\n  322  \n  323:   async decodeBondTransferRootCalldata (data: string): Promise<any> {\n  324      if (!data) {\n  325        throw new Error('data to decode is required')\n\n~/Sandbox/hop/packages/hop-node/src/watchers/classes/L1MessengerWrapper.ts:\n    3  \n    4  export default class L1MessengerWrapper extends ContractBase {\n    5:   confirmRoots = async (rootHashes: string[], destinationChainIds: number[], totalAmounts: BigNumber[], rootCommittedAts: number[]): Promise<void> => {\n    6      return this.contract.confirmRoots(\n    7        rootHashes,\n\n~/Sandbox/hop/packages/hop-node/src/watchers/classes/L2Amm.ts:\n    4  \n    5  export default class L2Amm extends ContractBase {\n    6:   calculateToHTokensAmount = async (amountIn: BigNumber): Promise<BigNumber> => {\n    7      const hTokenAmount = await this.contract.calculateSwap(\n    8        TokenIndex.CanonicalToken,\n    .\n   13    }\n   14  \n   15:   calculateFromHTokensAmount = async (amountIn: BigNumber): Promise<BigNumber> => {\n   16      const amountOut = await this.contract.calculateSwap(\n   17        TokenIndex.HopBridgeToken,\n   ..\n   22    }\n   23  \n   24:   swap = async (fromTokenIndex: number, toTokenIndex: number, amountIn: BigNumber, minAmountOut: BigNumber = BigNumber.from(0), deadline: BigNumber = this.defaultDeadline()): Promise<BigNumber> => {\n   25      const txOverrides = await this.txOverrides()\n   26      return this.contract.swap(\n\n~/Sandbox/hop/packages/hop-node/src/watchers/classes/L2AmmWrapper.ts:\n   37      token: string,\n   38      recipient: string\n   39:   ): Promise<providers.TransactionResponse> => {\n   40      const sdk = new Hop(globalConfig.network)\n   41      const bridge = sdk.bridge(token)\n\n~/Sandbox/hop/packages/hop-node/src/watchers/classes/L2Bridge.ts:\n   44    }\n   45  \n   46:   getL1Bridge = async (): Promise<L1Bridge> => {\n   47      const l1BridgeAddress = await this.l2BridgeContract.l1BridgeAddress()\n   48      if (!l1BridgeAddress) {\n   ..\n   52    }\n   53  \n   54:   canonicalToken = async (): Promise<Token> => {\n   55      const tokenAddress = await this.ammWrapper.contract.l2CanonicalToken()\n   56      const tokenContract = new Contract(\n   ..\n   62    }\n   63  \n   64:   hToken = async (): Promise<Token> => {\n   65      const tokenAddress = await this.l2BridgeContract.hToken()\n   66      const tokenContract = new Contract(\n   ..\n   75      startBlockNumber: number,\n   76      endBlockNumber: number\n   77:   ): Promise<TransferFromL1CompletedEvent[]> => {\n   78      return await this.bridgeContract.queryFilter(\n   79        this.l2BridgeContract.filters.TransferFromL1Completed(),\n   ..\n   86      startBlockNumber: number,\n   87      endBlockNumber: number\n   88:   ): Promise<TransfersCommittedEvent[]> => {\n   89      return await this.bridgeContract.queryFilter(\n   90        this.l2BridgeContract.filters.TransfersCommitted(),\n   ..\n  104      startBlockNumber: number,\n  105      endBlockNumber: number\n  106:   ): Promise<TransferSentEvent[]> => {\n  107      return await this.l2BridgeContract.queryFilter(\n  108        this.l2BridgeContract.filters.TransferSent(),\n  ...\n  119    }\n  120  \n  121:   async getTransferSentEvent (transferId: string): Promise<TransferSentEvent | null> {\n  122      let match: TransferSentEvent | undefined\n  123      await this.eventsBatch(async (start: number, end: number) => {\n  ...\n  147      amount: BigNumber,\n  148      recipient: string\n  149:   ): Promise<providers.TransactionResponse> => {\n  150      const isSupportedChainId = await this.isSupportedChainId(destinationChainId)\n  151      if (!isSupportedChainId) {\n  ...\n  180      amount: BigNumber,\n  181      recipient: string\n  182:   ): Promise<providers.TransactionResponse> => {\n  183      return await this.ammWrapper.swapAndSend(\n  184        destinationChainId,\n  ...\n  189    }\n  190  \n  191:   getChainId = async (): Promise<number> => {\n  192      if (this.chainId) {\n  193        return this.chainId\n  ...\n  219    }\n  220  \n  221:   async doPendingTransfersExist (chainId: number): Promise<boolean> {\n  222      try {\n  223        await this.getPendingTransferByIndex(chainId, 0)\n  ...\n  228    }\n  229  \n  230:   getPendingAmountForChainId = async (chainId: number): Promise<BigNumber> => {\n  231      const pendingAmount = await this.l2BridgeContract.pendingAmountForChainId(\n  232        chainId\n  ...\n  235    }\n  236  \n  237:   getMaxPendingTransfers = async (): Promise<number> => {\n  238      return Number(\n  239        (await this.l2BridgeContract.maxPendingTransfers()).toString()\n  ...\n  241    }\n  242  \n  243:   async getPendingTransfers (chainId: number): Promise<string[]> {\n  244      const pendingTransfers: string[] = []\n  245      const max = await this.getMaxPendingTransfers()\n  ...\n  256    }\n  257  \n  258:   async getTransfersCommittedEvent (transferRootHash: string): Promise<TransfersCommittedEvent | null> {\n  259      let match: TransfersCommittedEvent | undefined\n  260      await this.eventsBatch(async (start: number, end: number) => {\n  ...\n  283      destinationChainId: number,\n  284      contractAddress?: string\n  285:   ): Promise<providers.TransactionResponse> => {\n  286      let contract = this.l2BridgeContract\n  287      if (contractAddress) {\n  ...\n  309      amountOutMin: BigNumber,\n  310      deadline: BigNumber\n  311:   ): Promise<providers.TransactionResponse> => {\n  312      const txOverrides = await this.txOverrides()\n  313  \n  ...\n  333    }\n  334  \n  335:   isSupportedChainId = async (chainId: number): Promise<boolean> => {\n  336      return await this.l2BridgeContract.activeChainIds(\n  337        chainId\n  ...\n  339    }\n  340  \n  341:   async getOnChainMinBonderFeeAbsolute (): Promise<BigNumber> {\n  342      return this.l2BridgeContract.minBonderFeeAbsolute()\n  343    }\n\n~/Sandbox/hop/packages/hop-node/src/watchers/classes/Token.ts:\n   15    }\n   16  \n   17:   getBalance = async (): Promise<BigNumber> => {\n   18      const address = await this.tokenContract.signer.getAddress()\n   19      if (!address) {\n   ..\n   39    }\n   40  \n   41:   getAllowance = async (spender: string): Promise<BigNumber> => {\n   42      if (this.isEth) {\n   43        return constants.MaxUint256\n   ..\n   51      spender: string,\n   52      amount: BigNumber = ethers.constants.MaxUint256\n   53:   ): Promise<providers.TransactionResponse | undefined> => {\n   54      if (this.isEth) {\n   55        return\n   ..\n   68      recipient: string,\n   69      amount: BigNumber\n   70:   ): Promise<providers.TransactionResponse> => {\n   71      if (this.isEth) {\n   72        const tx = {\n\n~/Sandbox/hop/packages/hop-node/test/db.test.ts:\n   27        const _namespace = `testns-${Date.now()}`\n   28        const db = new TransfersDb(prefix, _namespace)\n   29:       const promises: Array<Promise<any>> = []\n   30        for (let i = 0; i < max; i++) {\n   31          const transferId = i.toString()\n   ..\n   34          promises.push(db.update(transferId, { bondWithdrawalAttemptedAt: i }))\n   35        }\n   36:       await Promise.all(promises)\n   37        const items = await db.getTransfers()\n   38        expect(items.length).toStrictEqual(ids.length)\n\n~/Sandbox/hop/packages/hop-node/test/queue.test.ts:\n   19    async () => {\n   20      const t = new Test()\n   21:     const values = await Promise.all(\n   22        Array(ITERATIONS)\n   23          .fill('0')\n\n~/Sandbox/hop/packages/hop-node/test/rateLimitRetry.test.ts:\n    4    counter = 0\n    5    triggerRateLimitError= rateLimitRetry(async () => {\n    6:     return new Promise((resolve, reject) => {\n    7        setTimeout(() => {\n    8          this.counter++\n    .\n   17  \n   18    triggerRevertError= rateLimitRetry(async () => {\n   19:     return new Promise((resolve, reject) => {\n   20        setTimeout(() => {\n   21          this.counter++\n   ..\n   28  \n   29    triggerCallRevertError= rateLimitRetry(async () => {\n   30:     return new Promise((resolve, reject) => {\n   31        setTimeout(() => {\n   32          this.counter++\n   ..\n   39  \n   40    triggerGatewayTimeoutError= rateLimitRetry(async () => {\n   41:     return new Promise((resolve, reject) => {\n   42        setTimeout(() => {\n   43          this.counter++\n\n~/Sandbox/hop/packages/hop-node/test/utils/helpers.ts:\n  583      const lpToken = await this.getLpToken(network, token)\n  584      const address = await this.getAddress()\n  585:     const [balance, decimals] = await Promise.all([\n  586        lpToken.balanceOf(address),\n  587        lpToken.decimals()\n  ...\n 1158      network: string,\n 1159      percent: number\n 1160:   ): Promise<BigNumber> {\n 1161      const provider = this.getProvider(network)!\n 1162      const gasPrice = await provider.getGasPrice()\n ....\n 1210    predicate?: (data: any) => boolean\n 1211  ) {\n 1212:   return await new Promise((resolve, reject) => {\n 1213      watchers.forEach(watcher => {\n 1214        watcher\n ....\n 1375    sourceNetwork: string,\n 1376    destNetwork: string\n 1377: ): Promise<[number[], number[]]> {\n 1378:   return await Promise.all([\n 1379:     Promise.all(\n 1380        users.map(async (user: User) => await user.getBalance(sourceNetwork, token))\n 1381      ),\n 1382:     Promise.all(users.map(async (user: User) => await user.getBalance(destNetwork, token)))\n 1383    ])\n 1384  }\n 1385  \n 1386: async function getTokenDecimals (token: string | Contract): Promise<number> {\n 1387    let tokenSymbol: string\n 1388    if (typeof token === 'string') {\n\n~/Sandbox/hop/packages/ipfs-worker/src/utils/promiseTimeout.ts:\n    2  \n    3  export async function promiseTimeout<T> (\n    4:   promise: Promise<T>,\n    5    timeout: number\n    6: ): Promise<T> {\n    7:   return await new Promise(async (resolve, reject) => {\n    8      let timedout = false\n    9      const t = setTimeout(() => {\n   ..\n   13  \n   14      // make it a promise if it's not one\n   15:     Promise.resolve(promise)\n   16        .then((result: any) => {\n   17          clearTimeout(t)\n\n~/Sandbox/hop/packages/sdk/docs/classes/AMM.md:\n  218  ### <a id=\"calculateswap\" name=\"calculateswap\"></a> calculateSwap\n  219  \n  220: • **calculateSwap**: (...`args`: [fromIndex: TokenIndex, toIndex: TokenIndex, amount: BigNumberish]) => `Promise`<`any`\\>\n  221  \n  222  #### Type declaration\n  223  \n  224: ▸ (...`args`): `Promise`<`any`\\>\n  225  \n  226  ##### Parameters\n  ...\n  232  ##### Returns\n  233  \n  234: `Promise`<`any`\\>\n  235  \n  236  ___\n  ...\n  310  ### <a id=\"getcontract\" name=\"getcontract\"></a> getContract\n  311  \n  312: • **getContract**: (`factory`: `Factory`, `address`: `string`, `provider`: [`TProvider`](../modules.md#tprovider)) => `Promise`<`any`\\> = `getContract`\n  313  \n  314  #### Type declaration\n  315  \n  316: ▸ (`factory`, `address`, `provider`): `Promise`<`any`\\>\n  317  \n  318  ##### Parameters\n  ...\n  326  ##### Returns\n  327  \n  328: `Promise`<`any`\\>\n  329  \n  330  #### Inherited from\n  ...\n  436  ### <a id=\"_getbonderaddress\" name=\"_getbonderaddress\"></a> \\_getBonderAddress\n  437  \n  438: ▸ `Protected` **_getBonderAddress**(`token`, `sourceChain`, `destinationChain`): `Promise`<`string`\\>\n  439  \n  440  #### Parameters\n  ...\n  448  #### Returns\n  449  \n  450: `Promise`<`string`\\>\n  451  \n  452  #### Inherited from\n  ...\n  458  ### <a id=\"_getmessengerwrapperaddress\" name=\"_getmessengerwrapperaddress\"></a> \\_getMessengerWrapperAddress\n  459  \n  460: ▸ `Protected` **_getMessengerWrapperAddress**(`token`, `destinationChain`): `Promise`<`string`\\>\n  461  \n  462  #### Parameters\n  ...\n  469  #### Returns\n  470  \n  471: `Promise`<`string`\\>\n  472  \n  473  #### Inherited from\n  ...\n  479  ### <a id=\"addliquidity\" name=\"addliquidity\"></a> addLiquidity\n  480  \n  481: ▸ **addLiquidity**(`amount0Desired`, `amount1Desired`, `minToMint?`, `deadline?`): `Promise`<`TransactionResponse`\\>\n  482  \n  483  **`Desc`**\n  ...\n  506  #### Returns\n  507  \n  508: `Promise`<`TransactionResponse`\\>\n  509  \n  510  Ethers transaction object.\n  ...\n  537  ### <a id=\"calculateaddliquidityminimum\" name=\"calculateaddliquidityminimum\"></a> calculateAddLiquidityMinimum\n  538  \n  539: ▸ **calculateAddLiquidityMinimum**(`amount0`, `amount1`): `Promise`<`BigNumber`\\>\n  540  \n  541  #### Parameters\n  ...\n  548  #### Returns\n  549  \n  550: `Promise`<`BigNumber`\\>\n  551  \n  552  ___\n  ...\n  554  ### <a id=\"calculateamountsforlptoken\" name=\"calculateamountsforlptoken\"></a> calculateAmountsForLpToken\n  555  \n  556: ▸ **calculateAmountsForLpToken**(`lpTokenAmount`): `Promise`<`any`\\>\n  557  \n  558  #### Parameters\n  ...\n  564  #### Returns\n  565  \n  566: `Promise`<`any`\\>\n  567  \n  568  ___\n  ...\n  570  ### <a id=\"calculatefromhtoken\" name=\"calculatefromhtoken\"></a> calculateFromHToken\n  571  \n  572: ▸ **calculateFromHToken**(`amount`): `Promise`<`any`\\>\n  573  \n  574  #### Parameters\n  ...\n  580  #### Returns\n  581  \n  582: `Promise`<`any`\\>\n  583  \n  584  ___\n  ...\n  586  ### <a id=\"calculateremoveliquidityminimum\" name=\"calculateremoveliquidityminimum\"></a> calculateRemoveLiquidityMinimum\n  587  \n  588: ▸ **calculateRemoveLiquidityMinimum**(`lpTokenAmount`): `Promise`<`any`\\>\n  589  \n  590  #### Parameters\n  ...\n  596  #### Returns\n  597  \n  598: `Promise`<`any`\\>\n  599  \n  600  ___\n  ...\n  602  ### <a id=\"calculateremoveliquidityminimumlptokens\" name=\"calculateremoveliquidityminimumlptokens\"></a> calculateRemoveLiquidityMinimumLpTokens\n  603  \n  604: ▸ **calculateRemoveLiquidityMinimumLpTokens**(`amount0`, `amount1`): `Promise`<`any`\\>\n  605  \n  606  #### Parameters\n  ...\n  613  #### Returns\n  614  \n  615: `Promise`<`any`\\>\n  616  \n  617  ___\n  ...\n  619  ### <a id=\"calculateremoveliquidityonetoken\" name=\"calculateremoveliquidityonetoken\"></a> calculateRemoveLiquidityOneToken\n  620  \n  621: ▸ **calculateRemoveLiquidityOneToken**(`tokenAmount`, `tokenIndex`): `Promise`<`any`\\>\n  622  \n  623  #### Parameters\n  ...\n  630  #### Returns\n  631  \n  632: `Promise`<`any`\\>\n  633  \n  634  ___\n  ...\n  636  ### <a id=\"calculatetohtoken\" name=\"calculatetohtoken\"></a> calculateToHToken\n  637  \n  638: ▸ **calculateToHToken**(`amount`): `Promise`<`any`\\>\n  639  \n  640  #### Parameters\n  ...\n  646  #### Returns\n  647  \n  648: `Promise`<`any`\\>\n  649  \n  650  ___\n  ...\n  652  ### <a id=\"calculatetotalamountforlptoken\" name=\"calculatetotalamountforlptoken\"></a> calculateTotalAmountForLpToken\n  653  \n  654: ▸ **calculateTotalAmountForLpToken**(`lpTokenAmount`): `Promise`<`any`\\>\n  655  \n  656  #### Parameters\n  ...\n  662  #### Returns\n  663  \n  664: `Promise`<`any`\\>\n  665  \n  666  ___\n  ...\n  701  ### <a id=\"estimateoptimisml1feefromdata\" name=\"estimateoptimisml1feefromdata\"></a> estimateOptimismL1FeeFromData\n  702  \n  703: ▸ **estimateOptimismL1FeeFromData**(`gasLimit`, `data?`, `to?`): `Promise`<`any`\\>\n  704  \n  705  #### Parameters\n  ...\n  713  #### Returns\n  714  \n  715: `Promise`<`any`\\>\n  716  \n  717  #### Inherited from\n  ...\n  723  ### <a id=\"fetchconfigfroms3\" name=\"fetchconfigfroms3\"></a> fetchConfigFromS3\n  724  \n  725: ▸ **fetchConfigFromS3**(): `Promise`<`any`\\>\n  726  \n  727  #### Returns\n  728  \n  729: `Promise`<`any`\\>\n  730  \n  731  #### Inherited from\n  ...\n  751  ### <a id=\"getapr\" name=\"getapr\"></a> getApr\n  752  \n  753: ▸ **getApr**(`days?`): `Promise`<`number`\\>\n  754  \n  755  #### Parameters\n  ...\n  761  #### Returns\n  762  \n  763: `Promise`<`number`\\>\n  764  \n  765  ___\n  ...\n  767  ### <a id=\"getapy\" name=\"getapy\"></a> getApy\n  768  \n  769: ▸ **getApy**(`days?`): `Promise`<`number`\\>\n  770  \n  771  #### Parameters\n  ...\n  777  #### Returns\n  778  \n  779: `Promise`<`number`\\>\n  780  \n  781  ___\n  ...\n  804  ### <a id=\"getbumpedgasprice\" name=\"getbumpedgasprice\"></a> getBumpedGasPrice\n  805  \n  806: ▸ **getBumpedGasPrice**(`signer`, `percent`): `Promise`<`BigNumber`\\>\n  807  \n  808  **`Desc`**\n  ...\n  829  #### Returns\n  830  \n  831: `Promise`<`BigNumber`\\>\n  832  \n  833  Bumped as price as BigNumber\n  ...\n  841  ### <a id=\"getcanonicaltokenaddress\" name=\"getcanonicaltokenaddress\"></a> getCanonicalTokenAddress\n  842  \n  843: ▸ **getCanonicalTokenAddress**(): `Promise`<`any`\\>\n  844  \n  845  **`Desc`**\n  ...\n  849  #### Returns\n  850  \n  851: `Promise`<`any`\\>\n  852  \n  853  address\n  ...\n  958  ### <a id=\"getdailyvolume\" name=\"getdailyvolume\"></a> getDailyVolume\n  959  \n  960: ▸ **getDailyVolume**(): `Promise`<{ `volume`: `any` ; `volumeFormatted`: `any`  }\\>\n  961  \n  962  #### Returns\n  963  \n  964: `Promise`<{ `volume`: `any` ; `volumeFormatted`: `any`  }\\>\n  965  \n  966  ___\n  ...\n 1056  ### <a id=\"getfeebps\" name=\"getfeebps\"></a> getFeeBps\n 1057  \n 1058: ▸ **getFeeBps**(`token`, `destinationChain`): `Promise`<`number`\\>\n 1059  \n 1060  #### Parameters\n ....\n 1067  #### Returns\n 1068  \n 1069: `Promise`<`number`\\>\n 1070  \n 1071  #### Inherited from\n ....\n 1077  ### <a id=\"gethoptokenaddress\" name=\"gethoptokenaddress\"></a> getHopTokenAddress\n 1078  \n 1079: ▸ **getHopTokenAddress**(): `Promise`<`any`\\>\n 1080  \n 1081  **`Desc`**\n ....\n 1085  #### Returns\n 1086  \n 1087: `Promise`<`any`\\>\n 1088  \n 1089  address\n ....\n 1387  ### <a id=\"getpriceimpact\" name=\"getpriceimpact\"></a> getPriceImpact\n 1388  \n 1389: ▸ **getPriceImpact**(`amount0`, `amount1`): `Promise`<`BigNumber`\\>\n 1390  \n 1391  #### Parameters\n ....\n 1398  #### Returns\n 1399  \n 1400: `Promise`<`BigNumber`\\>\n 1401  \n 1402  ___\n ....\n 1424  ### <a id=\"getrelayerfee\" name=\"getrelayerfee\"></a> getRelayerFee\n 1425  \n 1426: ▸ **getRelayerFee**(`destinationChain`, `tokenSymbol`): `Promise`<`BigNumber`\\>\n 1427  \n 1428  #### Parameters\n ....\n 1435  #### Returns\n 1436  \n 1437: `Promise`<`BigNumber`\\>\n 1438  \n 1439  #### Inherited from\n ....\n 1445  ### <a id=\"getremoveliquiditypriceimpact\" name=\"getremoveliquiditypriceimpact\"></a> getRemoveLiquidityPriceImpact\n 1446  \n 1447: ▸ **getRemoveLiquidityPriceImpact**(`amount0`, `amount1`): `Promise`<`BigNumber`\\>\n 1448  \n 1449  #### Parameters\n ....\n 1456  #### Returns\n 1457  \n 1458: `Promise`<`BigNumber`\\>\n 1459  \n 1460  ___\n ....\n 1462  ### <a id=\"getreserves\" name=\"getreserves\"></a> getReserves\n 1463  \n 1464: ▸ **getReserves**(): `Promise`<[`any`, `any`]\\>\n 1465  \n 1466  #### Returns\n 1467  \n 1468: `Promise`<[`any`, `any`]\\>\n 1469  \n 1470  ___\n ....\n 1472  ### <a id=\"getreservestotal\" name=\"getreservestotal\"></a> getReservesTotal\n 1473  \n 1474: ▸ **getReservesTotal**(): `Promise`<`any`\\>\n 1475  \n 1476  #### Returns\n 1477  \n 1478: `Promise`<`any`\\>\n 1479  \n 1480  ___\n ....\n 1482  ### <a id=\"gets3configdata\" name=\"gets3configdata\"></a> getS3ConfigData\n 1483  \n 1484: ▸ **getS3ConfigData**(): `Promise`<`any`\\>\n 1485  \n 1486  #### Returns\n 1487  \n 1488: `Promise`<`any`\\>\n 1489  \n 1490  #### Inherited from\n ....\n 1496  ### <a id=\"getsaddleswap\" name=\"getsaddleswap\"></a> getSaddleSwap\n 1497  \n 1498: ▸ **getSaddleSwap**(): `Promise`<`any`\\>\n 1499  \n 1500  **`Desc`**\n ....\n 1504  #### Returns\n 1505  \n 1506: `Promise`<`any`\\>\n 1507  \n 1508  Ethers contract instance.\n ....\n 1512  ### <a id=\"getsigneraddress\" name=\"getsigneraddress\"></a> getSignerAddress\n 1513  \n 1514: ▸ **getSignerAddress**(): `Promise`<`string`\\>\n 1515  \n 1516  **`Desc`**\n ....\n 1530  #### Returns\n 1531  \n 1532: `Promise`<`string`\\>\n 1533  \n 1534  Ethers signer address.\n ....\n 1542  ### <a id=\"getsignerorprovider\" name=\"getsignerorprovider\"></a> getSignerOrProvider\n 1543  \n 1544: ▸ **getSignerOrProvider**(`chain`, `signer?`): `Promise`<`Provider` \\| `Signer`\\>\n 1545  \n 1546  **`Desc`**\n ....\n 1558  #### Returns\n 1559  \n 1560: `Promise`<`Provider` \\| `Signer`\\>\n 1561  \n 1562  Ethers signer or provider\n ....\n 1632  ### <a id=\"getswapfee\" name=\"getswapfee\"></a> getSwapFee\n 1633  \n 1634: ▸ **getSwapFee**(): `Promise`<`number`\\>\n 1635  \n 1636  #### Returns\n 1637  \n 1638: `Promise`<`number`\\>\n 1639  \n 1640  ___\n ....\n 1642  ### <a id=\"gettransferstatus\" name=\"gettransferstatus\"></a> getTransferStatus\n 1643  \n 1644: ▸ **getTransferStatus**(`transferIdOrTxHash`): `Promise`<`any`\\>\n 1645  \n 1646  #### Parameters\n ....\n 1652  #### Returns\n 1653  \n 1654: `Promise`<`any`\\>\n 1655  \n 1656  #### Inherited from\n ....\n 1662  ### <a id=\"getvirtualprice\" name=\"getvirtualprice\"></a> getVirtualPrice\n 1663  \n 1664: ▸ **getVirtualPrice**(): `Promise`<`any`\\>\n 1665  \n 1666  #### Returns\n 1667  \n 1668: `Promise`<`any`\\>\n 1669  \n 1670  ___\n ....\n 1692  ### <a id=\"getyielddata\" name=\"getyielddata\"></a> getYieldData\n 1693  \n 1694: ▸ **getYieldData**(`days?`): `Promise`<{ `apr`: `number` ; `apy`: `number` ; `volume`: `any` = totalVolume; `volumeFormatted`: `any` = totalVolumeFormatted }\\>\n 1695  \n 1696  #### Parameters\n ....\n 1702  #### Returns\n 1703  \n 1704: `Promise`<{ `apr`: `number` ; `apy`: `number` ; `volume`: `any` = totalVolume; `volumeFormatted`: `any` = totalVolumeFormatted }\\>\n 1705  \n 1706  ___\n ....\n 1708  ### <a id=\"getyieldstatsforday\" name=\"getyieldstatsforday\"></a> getYieldStatsForDay\n 1709  \n 1710: ▸ **getYieldStatsForDay**(`unixTimestamp`, `days?`): `Promise`<`any`\\>\n 1711  \n 1712  #### Parameters\n ....\n 1719  #### Returns\n 1720  \n 1721: `Promise`<`any`\\>\n 1722  \n 1723  ___\n ....\n 1725  ### <a id=\"init\" name=\"init\"></a> init\n 1726  \n 1727: ▸ **init**(): `Promise`<`void`\\>\n 1728  \n 1729  #### Returns\n 1730  \n 1731: `Promise`<`void`\\>\n 1732  \n 1733  #### Inherited from\n ....\n 1795  ### <a id=\"populateaddliquiditytx\" name=\"populateaddliquiditytx\"></a> populateAddLiquidityTx\n 1796  \n 1797: ▸ **populateAddLiquidityTx**(`amount0Desired`, `amount1Desired`, `minToMint?`, `deadline?`): `Promise`<`any`\\>\n 1798  \n 1799  #### Parameters\n ....\n 1808  #### Returns\n 1809  \n 1810: `Promise`<`any`\\>\n 1811  \n 1812  ___\n ....\n 1814  ### <a id=\"populateremoveliquiditytx\" name=\"populateremoveliquiditytx\"></a> populateRemoveLiquidityTx\n 1815  \n 1816: ▸ **populateRemoveLiquidityTx**(`liquidityTokenAmount`, `amount0Min?`, `amount1Min?`, `deadline?`): `Promise`<`any`\\>\n 1817  \n 1818  #### Parameters\n ....\n 1827  #### Returns\n 1828  \n 1829: `Promise`<`any`\\>\n 1830  \n 1831  ___\n ....\n 1833  ### <a id=\"removeliquidity\" name=\"removeliquidity\"></a> removeLiquidity\n 1834  \n 1835: ▸ **removeLiquidity**(`liquidityTokenAmount`, `amount0Min?`, `amount1Min?`, `deadline?`): `Promise`<`TransactionResponse`\\>\n 1836  \n 1837  **`Desc`**\n ....\n 1860  #### Returns\n 1861  \n 1862: `Promise`<`TransactionResponse`\\>\n 1863  \n 1864  Ethers transaction object.\n ....\n 1868  ### <a id=\"removeliquidityimbalance\" name=\"removeliquidityimbalance\"></a> removeLiquidityImbalance\n 1869  \n 1870: ▸ **removeLiquidityImbalance**(`amount0`, `amount1`, `maxBurnAmount?`, `deadline?`): `Promise`<`any`\\>\n 1871  \n 1872  #### Parameters\n ....\n 1881  #### Returns\n 1882  \n 1883: `Promise`<`any`\\>\n 1884  \n 1885  ___\n ....\n 1887  ### <a id=\"removeliquidityonetoken\" name=\"removeliquidityonetoken\"></a> removeLiquidityOneToken\n 1888  \n 1889: ▸ **removeLiquidityOneToken**(`lpAmount`, `tokenIndex`, `amountMin?`, `deadline?`): `Promise`<`any`\\>\n 1890  \n 1891  #### Parameters\n ....\n 1900  #### Returns\n 1901  \n 1902: `Promise`<`any`\\>\n 1903  \n 1904  ___\n ....\n 1906  ### <a id=\"sendtransaction\" name=\"sendtransaction\"></a> sendTransaction\n 1907  \n 1908: ▸ **sendTransaction**(`transactionRequest`, `chain`): `Promise`<`TransactionResponse`\\>\n 1909  \n 1910  #### Parameters\n ....\n 1917  #### Returns\n 1918  \n 1919: `Promise`<`TransactionResponse`\\>\n 1920  \n 1921  #### Inherited from\n ....\n 2120  ### <a id=\"txoverrides\" name=\"txoverrides\"></a> txOverrides\n 2121  \n 2122: ▸ **txOverrides**(`chain`): `Promise`<`any`\\>\n 2123  \n 2124  #### Parameters\n ....\n 2130  #### Returns\n 2131  \n 2132: `Promise`<`any`\\>\n 2133  \n 2134  #### Inherited from\n\n~/Sandbox/hop/packages/sdk/docs/classes/Base.md:\n  197  ### <a id=\"getcontract\" name=\"getcontract\"></a> getContract\n  198  \n  199: • **getContract**: (`factory`: `Factory`, `address`: `string`, `provider`: [`TProvider`](../modules.md#tprovider)) => `Promise`<`any`\\> = `getContract`\n  200  \n  201  #### Type declaration\n  202  \n  203: ▸ (`factory`, `address`, `provider`): `Promise`<`any`\\>\n  204  \n  205  ##### Parameters\n  ...\n  213  ##### Returns\n  214  \n  215: `Promise`<`any`\\>\n  216  \n  217  ___\n  ...\n  271  ### <a id=\"_getbonderaddress\" name=\"_getbonderaddress\"></a> \\_getBonderAddress\n  272  \n  273: ▸ `Protected` **_getBonderAddress**(`token`, `sourceChain`, `destinationChain`): `Promise`<`string`\\>\n  274  \n  275  #### Parameters\n  ...\n  283  #### Returns\n  284  \n  285: `Promise`<`string`\\>\n  286  \n  287  ___\n  ...\n  289  ### <a id=\"_getmessengerwrapperaddress\" name=\"_getmessengerwrapperaddress\"></a> \\_getMessengerWrapperAddress\n  290  \n  291: ▸ `Protected` **_getMessengerWrapperAddress**(`token`, `destinationChain`): `Promise`<`string`\\>\n  292  \n  293  #### Parameters\n  ...\n  300  #### Returns\n  301  \n  302: `Promise`<`string`\\>\n  303  \n  304  ___\n  ...\n  306  ### <a id=\"estimateoptimisml1feefromdata\" name=\"estimateoptimisml1feefromdata\"></a> estimateOptimismL1FeeFromData\n  307  \n  308: ▸ **estimateOptimismL1FeeFromData**(`gasLimit`, `data?`, `to?`): `Promise`<`any`\\>\n  309  \n  310  #### Parameters\n  ...\n  318  #### Returns\n  319  \n  320: `Promise`<`any`\\>\n  321  \n  322  ___\n  ...\n  324  ### <a id=\"fetchconfigfroms3\" name=\"fetchconfigfroms3\"></a> fetchConfigFromS3\n  325  \n  326: ▸ **fetchConfigFromS3**(): `Promise`<`any`\\>\n  327  \n  328  #### Returns\n  329  \n  330: `Promise`<`any`\\>\n  331  \n  332  ___\n  ...\n  361  ### <a id=\"getbumpedgasprice\" name=\"getbumpedgasprice\"></a> getBumpedGasPrice\n  362  \n  363: ▸ **getBumpedGasPrice**(`signer`, `percent`): `Promise`<`BigNumber`\\>\n  364  \n  365  **`Desc`**\n  ...\n  386  #### Returns\n  387  \n  388: `Promise`<`BigNumber`\\>\n  389  \n  390  Bumped as price as BigNumber\n  ...\n  543  ### <a id=\"getfeebps\" name=\"getfeebps\"></a> getFeeBps\n  544  \n  545: ▸ **getFeeBps**(`token`, `destinationChain`): `Promise`<`number`\\>\n  546  \n  547  #### Parameters\n  ...\n  554  #### Returns\n  555  \n  556: `Promise`<`number`\\>\n  557  \n  558  ___\n  ...\n  814  ### <a id=\"getrelayerfee\" name=\"getrelayerfee\"></a> getRelayerFee\n  815  \n  816: ▸ **getRelayerFee**(`destinationChain`, `tokenSymbol`): `Promise`<`BigNumber`\\>\n  817  \n  818  #### Parameters\n  ...\n  825  #### Returns\n  826  \n  827: `Promise`<`BigNumber`\\>\n  828  \n  829  ___\n  ...\n  831  ### <a id=\"gets3configdata\" name=\"gets3configdata\"></a> getS3ConfigData\n  832  \n  833: ▸ **getS3ConfigData**(): `Promise`<`any`\\>\n  834  \n  835  #### Returns\n  836  \n  837: `Promise`<`any`\\>\n  838  \n  839  ___\n  ...\n  841  ### <a id=\"getsigneraddress\" name=\"getsigneraddress\"></a> getSignerAddress\n  842  \n  843: ▸ **getSignerAddress**(): `Promise`<`string`\\>\n  844  \n  845  **`Desc`**\n  ...\n  859  #### Returns\n  860  \n  861: `Promise`<`string`\\>\n  862  \n  863  Ethers signer address.\n  ...\n  867  ### <a id=\"getsignerorprovider\" name=\"getsignerorprovider\"></a> getSignerOrProvider\n  868  \n  869: ▸ **getSignerOrProvider**(`chain`, `signer?`): `Promise`<`Provider` \\| `Signer`\\>\n  870  \n  871  **`Desc`**\n  ...\n  883  #### Returns\n  884  \n  885: `Promise`<`Provider` \\| `Signer`\\>\n  886  \n  887  Ethers signer or provider\n  ...\n  937  ### <a id=\"gettransferstatus\" name=\"gettransferstatus\"></a> getTransferStatus\n  938  \n  939: ▸ **getTransferStatus**(`transferIdOrTxHash`): `Promise`<`any`\\>\n  940  \n  941  #### Parameters\n  ...\n  947  #### Returns\n  948  \n  949: `Promise`<`any`\\>\n  950  \n  951  ___\n  ...\n  969  ### <a id=\"init\" name=\"init\"></a> init\n  970  \n  971: ▸ **init**(): `Promise`<`void`\\>\n  972  \n  973  #### Returns\n  974  \n  975: `Promise`<`void`\\>\n  976  \n  977  ___\n  ...\n 1011  ### <a id=\"sendtransaction\" name=\"sendtransaction\"></a> sendTransaction\n 1012  \n 1013: ▸ **sendTransaction**(`transactionRequest`, `chain`): `Promise`<`TransactionResponse`\\>\n 1014  \n 1015  #### Parameters\n ....\n 1022  #### Returns\n 1023  \n 1024: `Promise`<`TransactionResponse`\\>\n 1025  \n 1026  ___\n ....\n 1185  ### <a id=\"txoverrides\" name=\"txoverrides\"></a> txOverrides\n 1186  \n 1187: ▸ **txOverrides**(`chain`): `Promise`<`any`\\>\n 1188  \n 1189  #### Parameters\n ....\n 1195  #### Returns\n 1196  \n 1197: `Promise`<`any`\\>\n 1198  \n\n~/Sandbox/hop/packages/sdk/docs/classes/CanonicalBridge.md:\n  272  ### <a id=\"getcontract\" name=\"getcontract\"></a> getContract\n  273  \n  274: • **getContract**: (`factory`: `Factory`, `address`: `string`, `provider`: [`TProvider`](../modules.md#tprovider)) => `Promise`<`any`\\> = `getContract`\n  275  \n  276  #### Type declaration\n  277  \n  278: ▸ (`factory`, `address`, `provider`): `Promise`<`any`\\>\n  279  \n  280  ##### Parameters\n  ...\n  288  ##### Returns\n  289  \n  290: `Promise`<`any`\\>\n  291  \n  292  #### Inherited from\n  ...\n  398  ### <a id=\"_getbonderaddress\" name=\"_getbonderaddress\"></a> \\_getBonderAddress\n  399  \n  400: ▸ `Protected` **_getBonderAddress**(`token`, `sourceChain`, `destinationChain`): `Promise`<`string`\\>\n  401  \n  402  #### Parameters\n  ...\n  410  #### Returns\n  411  \n  412: `Promise`<`string`\\>\n  413  \n  414  #### Inherited from\n  ...\n  420  ### <a id=\"_getmessengerwrapperaddress\" name=\"_getmessengerwrapperaddress\"></a> \\_getMessengerWrapperAddress\n  421  \n  422: ▸ `Protected` **_getMessengerWrapperAddress**(`token`, `destinationChain`): `Promise`<`string`\\>\n  423  \n  424  #### Parameters\n  ...\n  431  #### Returns\n  432  \n  433: `Promise`<`string`\\>\n  434  \n  435  #### Inherited from\n  ...\n  441  ### <a id=\"approvedeposit\" name=\"approvedeposit\"></a> approveDeposit\n  442  \n  443: ▸ **approveDeposit**(`amount`, `chain?`): `Promise`<`TransactionResponse`\\>\n  444  \n  445  **`Desc`**\n  ...\n  457  #### Returns\n  458  \n  459: `Promise`<`TransactionResponse`\\>\n  460  \n  461  Ethers transaction object.\n  ...\n  465  ### <a id=\"approvewithdraw\" name=\"approvewithdraw\"></a> approveWithdraw\n  466  \n  467: ▸ **approveWithdraw**(`amount`): `Promise`<`TransactionResponse`\\>\n  468  \n  469  **`Desc`**\n  ...\n  480  #### Returns\n  481  \n  482: `Promise`<`TransactionResponse`\\>\n  483  \n  484  Ethers transaction object.\n  ...\n  510  ### <a id=\"deposit\" name=\"deposit\"></a> deposit\n  511  \n  512: ▸ **deposit**(`amount`, `chain?`): `Promise`<`any`\\>\n  513  \n  514  **`Desc`**\n  ...\n  525  #### Returns\n  526  \n  527: `Promise`<`any`\\>\n  528  \n  529  Ethers transaction object.\n  ...\n  533  ### <a id=\"estimateoptimisml1feefromdata\" name=\"estimateoptimisml1feefromdata\"></a> estimateOptimismL1FeeFromData\n  534  \n  535: ▸ **estimateOptimismL1FeeFromData**(`gasLimit`, `data?`, `to?`): `Promise`<`any`\\>\n  536  \n  537  #### Parameters\n  ...\n  545  #### Returns\n  546  \n  547: `Promise`<`any`\\>\n  548  \n  549  #### Inherited from\n  ...\n  555  ### <a id=\"exit\" name=\"exit\"></a> exit\n  556  \n  557: ▸ **exit**(`txHash`, `chain`): `Promise`<`TransactionResponse`\\>\n  558  \n  559  **`Desc`**\n  ...\n  572  #### Returns\n  573  \n  574: `Promise`<`TransactionResponse`\\>\n  575  \n  576  Ethers transaction object.\n  ...\n  580  ### <a id=\"fetchconfigfroms3\" name=\"fetchconfigfroms3\"></a> fetchConfigFromS3\n  581  \n  582: ▸ **fetchConfigFromS3**(): `Promise`<`any`\\>\n  583  \n  584  #### Returns\n  585  \n  586: `Promise`<`any`\\>\n  587  \n  588  #### Inherited from\n  ...\n  608  ### <a id=\"getambbridge\" name=\"getambbridge\"></a> getAmbBridge\n  609  \n  610: ▸ **getAmbBridge**(`chain?`): `Promise`<`any`\\>\n  611  \n  612  #### Parameters\n  ...\n  618  #### Returns\n  619  \n  620: `Promise`<`any`\\>\n  621  \n  622  ___\n  ...\n  645  ### <a id=\"getbumpedgasprice\" name=\"getbumpedgasprice\"></a> getBumpedGasPrice\n  646  \n  647: ▸ **getBumpedGasPrice**(`signer`, `percent`): `Promise`<`BigNumber`\\>\n  648  \n  649  **`Desc`**\n  ...\n  670  #### Returns\n  671  \n  672: `Promise`<`BigNumber`\\>\n  673  \n  674  Bumped as price as BigNumber\n  ...\n  903  ### <a id=\"getfeebps\" name=\"getfeebps\"></a> getFeeBps\n  904  \n  905: ▸ **getFeeBps**(`token`, `destinationChain`): `Promise`<`number`\\>\n  906  \n  907  #### Parameters\n  ...\n  914  #### Returns\n  915  \n  916: `Promise`<`number`\\>\n  917  \n  918  #### Inherited from\n  ...\n  966  ### <a id=\"getl1canonicalbridge\" name=\"getl1canonicalbridge\"></a> getL1CanonicalBridge\n  967  \n  968: ▸ **getL1CanonicalBridge**(): `Promise`<`any`\\>\n  969  \n  970  #### Returns\n  971  \n  972: `Promise`<`any`\\>\n  973  \n  974  ___\n  ...\n 1133  ### <a id=\"getl2canonicalbridge\" name=\"getl2canonicalbridge\"></a> getL2CanonicalBridge\n 1134  \n 1135: ▸ **getL2CanonicalBridge**(): `Promise`<`any`\\>\n 1136  \n 1137  #### Returns\n 1138  \n 1139: `Promise`<`any`\\>\n 1140  \n 1141  ___\n ....\n 1284  ### <a id=\"getrelayerfee\" name=\"getrelayerfee\"></a> getRelayerFee\n 1285  \n 1286: ▸ **getRelayerFee**(`destinationChain`, `tokenSymbol`): `Promise`<`BigNumber`\\>\n 1287  \n 1288  #### Parameters\n ....\n 1295  #### Returns\n 1296  \n 1297: `Promise`<`BigNumber`\\>\n 1298  \n 1299  #### Inherited from\n ....\n 1305  ### <a id=\"gets3configdata\" name=\"gets3configdata\"></a> getS3ConfigData\n 1306  \n 1307: ▸ **getS3ConfigData**(): `Promise`<`any`\\>\n 1308  \n 1309  #### Returns\n 1310  \n 1311: `Promise`<`any`\\>\n 1312  \n 1313  #### Inherited from\n ....\n 1319  ### <a id=\"getsigneraddress\" name=\"getsigneraddress\"></a> getSignerAddress\n 1320  \n 1321: ▸ **getSignerAddress**(): `Promise`<`string`\\>\n 1322  \n 1323  **`Desc`**\n ....\n 1337  #### Returns\n 1338  \n 1339: `Promise`<`string`\\>\n 1340  \n 1341  Ethers signer address.\n ....\n 1349  ### <a id=\"getsignerorprovider\" name=\"getsignerorprovider\"></a> getSignerOrProvider\n 1350  \n 1351: ▸ **getSignerOrProvider**(`chain`, `signer?`): `Promise`<`Provider` \\| `Signer`\\>\n 1352  \n 1353  **`Desc`**\n ....\n 1365  #### Returns\n 1366  \n 1367: `Promise`<`Provider` \\| `Signer`\\>\n 1368  \n 1369  Ethers signer or provider\n ....\n 1439  ### <a id=\"gettransferstatus\" name=\"gettransferstatus\"></a> getTransferStatus\n 1440  \n 1441: ▸ **getTransferStatus**(`transferIdOrTxHash`): `Promise`<`any`\\>\n 1442  \n 1443  #### Parameters\n ....\n 1449  #### Returns\n 1450  \n 1451: `Promise`<`any`\\>\n 1452  \n 1453  #### Inherited from\n ....\n 1495  ### <a id=\"init\" name=\"init\"></a> init\n 1496  \n 1497: ▸ **init**(): `Promise`<`void`\\>\n 1498  \n 1499  #### Returns\n 1500  \n 1501: `Promise`<`void`\\>\n 1502  \n 1503  #### Inherited from\n ....\n 1549  ### <a id=\"sendtransaction\" name=\"sendtransaction\"></a> sendTransaction\n 1550  \n 1551: ▸ **sendTransaction**(`transactionRequest`, `chain`): `Promise`<`TransactionResponse`\\>\n 1552  \n 1553  #### Parameters\n ....\n 1560  #### Returns\n 1561  \n 1562: `Promise`<`TransactionResponse`\\>\n 1563  \n 1564  #### Inherited from\n ....\n 1799  ### <a id=\"txoverrides\" name=\"txoverrides\"></a> txOverrides\n 1800  \n 1801: ▸ **txOverrides**(`chain`): `Promise`<`any`\\>\n 1802  \n 1803  #### Parameters\n ....\n 1809  #### Returns\n 1810  \n 1811: `Promise`<`any`\\>\n 1812  \n 1813  #### Inherited from\n ....\n 1819  ### <a id=\"withdraw\" name=\"withdraw\"></a> withdraw\n 1820  \n 1821: ▸ **withdraw**(`amount`, `chain?`): `Promise`<`any`\\>\n 1822  \n 1823  **`Desc`**\n ....\n 1834  #### Returns\n 1835  \n 1836: `Promise`<`any`\\>\n 1837  \n 1838  Ethers transaction object.\n\n~/Sandbox/hop/packages/sdk/docs/classes/FallbackProvider.md:\n  123  ### <a id=\"call\" name=\"call\"></a> call\n  124  \n  125: ▸ **call**(`transaction`, `blockTag?`): `Promise`<`string`\\>\n  126  \n  127  #### Parameters\n  ...\n  130  | :------ | :------ |\n  131  | `transaction` | `Deferrable`<`TransactionRequest`\\> |\n  132: | `blockTag?` | `BlockTag` \\| `Promise`<`BlockTag`\\> |\n  133  \n  134  #### Returns\n  135  \n  136: `Promise`<`string`\\>\n  137  \n  138  #### Implementation of\n  ...\n  144  ### <a id=\"detectnetwork\" name=\"detectnetwork\"></a> detectNetwork\n  145  \n  146: ▸ **detectNetwork**(): `Promise`<`Network`\\>\n  147  \n  148  #### Returns\n  149  \n  150: `Promise`<`Network`\\>\n  151  \n  152  ___\n  ...\n  175  ### <a id=\"estimategas\" name=\"estimategas\"></a> estimateGas\n  176  \n  177: ▸ **estimateGas**(`transaction`): `Promise`<`BigNumber`\\>\n  178  \n  179  #### Parameters\n  ...\n  185  #### Returns\n  186  \n  187: `Promise`<`BigNumber`\\>\n  188  \n  189  #### Implementation of\n  ...\n  195  ### <a id=\"getavatar\" name=\"getavatar\"></a> getAvatar\n  196  \n  197: ▸ **getAvatar**(`address`): `Promise`<`string`\\>\n  198  \n  199  #### Parameters\n  ...\n  205  #### Returns\n  206  \n  207: `Promise`<`string`\\>\n  208  \n  209  ___\n  ...\n  211  ### <a id=\"getbalance\" name=\"getbalance\"></a> getBalance\n  212  \n  213: ▸ **getBalance**(`addressOrName`, `blockTag?`): `Promise`<`BigNumber`\\>\n  214  \n  215  #### Parameters\n  ...\n  217  | Name | Type |\n  218  | :------ | :------ |\n  219: | `addressOrName` | `string` \\| `Promise`<`string`\\> |\n  220: | `blockTag?` | `BlockTag` \\| `Promise`<`BlockTag`\\> |\n  221  \n  222  #### Returns\n  223  \n  224: `Promise`<`BigNumber`\\>\n  225  \n  226  #### Implementation of\n  ...\n  232  ### <a id=\"getblock\" name=\"getblock\"></a> getBlock\n  233  \n  234: ▸ **getBlock**(`blockHashOrBlockTag`): `Promise`<`Block`\\>\n  235  \n  236  #### Parameters\n  ...\n  238  | Name | Type |\n  239  | :------ | :------ |\n  240: | `blockHashOrBlockTag` | `BlockTag` \\| `Promise`<`BlockTag`\\> |\n  241  \n  242  #### Returns\n  243  \n  244: `Promise`<`Block`\\>\n  245  \n  246  #### Implementation of\n  ...\n  252  ### <a id=\"getblocknumber\" name=\"getblocknumber\"></a> getBlockNumber\n  253  \n  254: ▸ **getBlockNumber**(): `Promise`<`number`\\>\n  255  \n  256  #### Returns\n  257  \n  258: `Promise`<`number`\\>\n  259  \n  260  #### Implementation of\n  ...\n  266  ### <a id=\"getblockwithtransactions\" name=\"getblockwithtransactions\"></a> getBlockWithTransactions\n  267  \n  268: ▸ **getBlockWithTransactions**(`blockHashOrBlockTag`): `Promise`<`BlockWithTransactions`\\>\n  269  \n  270  #### Parameters\n  ...\n  272  | Name | Type |\n  273  | :------ | :------ |\n  274: | `blockHashOrBlockTag` | `BlockTag` \\| `Promise`<`BlockTag`\\> |\n  275  \n  276  #### Returns\n  277  \n  278: `Promise`<`BlockWithTransactions`\\>\n  279  \n  280  #### Implementation of\n  ...\n  286  ### <a id=\"getcode\" name=\"getcode\"></a> getCode\n  287  \n  288: ▸ **getCode**(`addressOrName`, `blockTag?`): `Promise`<`string`\\>\n  289  \n  290  #### Parameters\n  ...\n  292  | Name | Type |\n  293  | :------ | :------ |\n  294: | `addressOrName` | `string` \\| `Promise`<`string`\\> |\n  295: | `blockTag?` | `BlockTag` \\| `Promise`<`BlockTag`\\> |\n  296  \n  297  #### Returns\n  298  \n  299: `Promise`<`string`\\>\n  300  \n  301  #### Implementation of\n  ...\n  307  ### <a id=\"getfeedata\" name=\"getfeedata\"></a> getFeeData\n  308  \n  309: ▸ **getFeeData**(): `Promise`<`any`\\>\n  310  \n  311  #### Returns\n  312  \n  313: `Promise`<`any`\\>\n  314  \n  315  #### Implementation of\n  ...\n  321  ### <a id=\"getgasprice\" name=\"getgasprice\"></a> getGasPrice\n  322  \n  323: ▸ **getGasPrice**(): `Promise`<`BigNumber`\\>\n  324  \n  325  #### Returns\n  326  \n  327: `Promise`<`BigNumber`\\>\n  328  \n  329  #### Implementation of\n  ...\n  335  ### <a id=\"getlogs\" name=\"getlogs\"></a> getLogs\n  336  \n  337: ▸ **getLogs**(`filter`): `Promise`<`Log`[]\\>\n  338  \n  339  #### Parameters\n  ...\n  345  #### Returns\n  346  \n  347: `Promise`<`Log`[]\\>\n  348  \n  349  #### Implementation of\n  ...\n  355  ### <a id=\"getnetwork\" name=\"getnetwork\"></a> getNetwork\n  356  \n  357: ▸ **getNetwork**(): `Promise`<`Network`\\>\n  358  \n  359  #### Returns\n  360  \n  361: `Promise`<`Network`\\>\n  362  \n  363  #### Implementation of\n  ...\n  369  ### <a id=\"getresolver\" name=\"getresolver\"></a> getResolver\n  370  \n  371: ▸ **getResolver**(`address`): `Promise`<`string`\\>\n  372  \n  373  #### Parameters\n  ...\n  379  #### Returns\n  380  \n  381: `Promise`<`string`\\>\n  382  \n  383  ___\n  ...\n  385  ### <a id=\"getstorageat\" name=\"getstorageat\"></a> getStorageAt\n  386  \n  387: ▸ **getStorageAt**(`addressOrName`, `position`, `blockTag?`): `Promise`<`string`\\>\n  388  \n  389  #### Parameters\n  ...\n  391  | Name | Type |\n  392  | :------ | :------ |\n  393: | `addressOrName` | `string` \\| `Promise`<`string`\\> |\n  394: | `position` | `BigNumberish` \\| `Promise`<`BigNumberish`\\> |\n  395: | `blockTag?` | `BlockTag` \\| `Promise`<`BlockTag`\\> |\n  396  \n  397  #### Returns\n  398  \n  399: `Promise`<`string`\\>\n  400  \n  401  #### Implementation of\n  ...\n  407  ### <a id=\"gettransaction\" name=\"gettransaction\"></a> getTransaction\n  408  \n  409: ▸ **getTransaction**(`transactionHash`): `Promise`<`TransactionResponse`\\>\n  410  \n  411  #### Parameters\n  ...\n  417  #### Returns\n  418  \n  419: `Promise`<`TransactionResponse`\\>\n  420  \n  421  #### Implementation of\n  ...\n  427  ### <a id=\"gettransactioncount\" name=\"gettransactioncount\"></a> getTransactionCount\n  428  \n  429: ▸ **getTransactionCount**(`addressOrName`, `blockTag?`): `Promise`<`number`\\>\n  430  \n  431  #### Parameters\n  ...\n  433  | Name | Type |\n  434  | :------ | :------ |\n  435: | `addressOrName` | `string` \\| `Promise`<`string`\\> |\n  436: | `blockTag?` | `BlockTag` \\| `Promise`<`BlockTag`\\> |\n  437  \n  438  #### Returns\n  439  \n  440: `Promise`<`number`\\>\n  441  \n  442  #### Implementation of\n  ...\n  448  ### <a id=\"gettransactionreceipt\" name=\"gettransactionreceipt\"></a> getTransactionReceipt\n  449  \n  450: ▸ **getTransactionReceipt**(`transactionHash`): `Promise`<`TransactionReceipt`\\>\n  451  \n  452  #### Parameters\n  ...\n  458  #### Returns\n  459  \n  460: `Promise`<`TransactionReceipt`\\>\n  461  \n  462  #### Implementation of\n  ...\n  508  ### <a id=\"lookupaddress\" name=\"lookupaddress\"></a> lookupAddress\n  509  \n  510: ▸ **lookupAddress**(`address`): `Promise`<`string`\\>\n  511  \n  512  #### Parameters\n  ...\n  514  | Name | Type |\n  515  | :------ | :------ |\n  516: | `address` | `string` \\| `Promise`<`string`\\> |\n  517  \n  518  #### Returns\n  519  \n  520: `Promise`<`string`\\>\n  521  \n  522  #### Implementation of\n  ...\n  632  ### <a id=\"resolvename\" name=\"resolvename\"></a> resolveName\n  633  \n  634: ▸ **resolveName**(`name`): `Promise`<`string`\\>\n  635  \n  636  #### Parameters\n  ...\n  638  | Name | Type |\n  639  | :------ | :------ |\n  640: | `name` | `string` \\| `Promise`<`string`\\> |\n  641  \n  642  #### Returns\n  643  \n  644: `Promise`<`string`\\>\n  645  \n  646  #### Implementation of\n  ...\n  652  ### <a id=\"sendtransaction\" name=\"sendtransaction\"></a> sendTransaction\n  653  \n  654: ▸ **sendTransaction**(`signedTransaction`): `Promise`<`TransactionResponse`\\>\n  655  \n  656  #### Parameters\n  ...\n  658  | Name | Type |\n  659  | :------ | :------ |\n  660: | `signedTransaction` | `string` \\| `Promise`<`string`\\> |\n  661  \n  662  #### Returns\n  663  \n  664: `Promise`<`TransactionResponse`\\>\n  665  \n  666  #### Implementation of\n  ...\n  672  ### <a id=\"tryprovider\" name=\"tryprovider\"></a> tryProvider\n  673  \n  674: ▸ **tryProvider**(`fn`): `Promise`<`any`\\>\n  675  \n  676  #### Parameters\n  ...\n  682  #### Returns\n  683  \n  684: `Promise`<`any`\\>\n  685  \n  686  ___\n  ...\n  688  ### <a id=\"waitfortransaction\" name=\"waitfortransaction\"></a> waitForTransaction\n  689  \n  690: ▸ **waitForTransaction**(`transactionHash`, `confirmations?`, `timeout?`): `Promise`<`TransactionReceipt`\\>\n  691  \n  692  #### Parameters\n  ...\n  700  #### Returns\n  701  \n  702: `Promise`<`TransactionReceipt`\\>\n  703  \n  704  #### Implementation of\n\n~/Sandbox/hop/packages/sdk/docs/classes/Hop.md:\n  290  ### <a id=\"getcontract\" name=\"getcontract\"></a> getContract\n  291  \n  292: • **getContract**: (`factory`: `Factory`, `address`: `string`, `provider`: [`TProvider`](../modules.md#tprovider)) => `Promise`<`any`\\> = `getContract`\n  293  \n  294  #### Type declaration\n  295  \n  296: ▸ (`factory`, `address`, `provider`): `Promise`<`any`\\>\n  297  \n  298  ##### Parameters\n  ...\n  306  ##### Returns\n  307  \n  308: `Promise`<`any`\\>\n  309  \n  310  #### Inherited from\n  ...\n  447  ### <a id=\"_getbonderaddress\" name=\"_getbonderaddress\"></a> \\_getBonderAddress\n  448  \n  449: ▸ `Protected` **_getBonderAddress**(`token`, `sourceChain`, `destinationChain`): `Promise`<`string`\\>\n  450  \n  451  #### Parameters\n  ...\n  459  #### Returns\n  460  \n  461: `Promise`<`string`\\>\n  462  \n  463  #### Inherited from\n  ...\n  469  ### <a id=\"_getmessengerwrapperaddress\" name=\"_getmessengerwrapperaddress\"></a> \\_getMessengerWrapperAddress\n  470  \n  471: ▸ `Protected` **_getMessengerWrapperAddress**(`token`, `destinationChain`): `Promise`<`string`\\>\n  472  \n  473  #### Parameters\n  ...\n  480  #### Returns\n  481  \n  482: `Promise`<`string`\\>\n  483  \n  484  #### Inherited from\n  ...\n  587  ### <a id=\"estimateoptimisml1feefromdata\" name=\"estimateoptimisml1feefromdata\"></a> estimateOptimismL1FeeFromData\n  588  \n  589: ▸ **estimateOptimismL1FeeFromData**(`gasLimit`, `data?`, `to?`): `Promise`<`any`\\>\n  590  \n  591  #### Parameters\n  ...\n  599  #### Returns\n  600  \n  601: `Promise`<`any`\\>\n  602  \n  603  #### Inherited from\n  ...\n  609  ### <a id=\"fetchconfigfroms3\" name=\"fetchconfigfroms3\"></a> fetchConfigFromS3\n  610  \n  611: ▸ **fetchConfigFromS3**(): `Promise`<`any`\\>\n  612  \n  613  #### Returns\n  614  \n  615: `Promise`<`any`\\>\n  616  \n  617  #### Inherited from\n  ...\n  658  ### <a id=\"getbumpedgasprice\" name=\"getbumpedgasprice\"></a> getBumpedGasPrice\n  659  \n  660: ▸ **getBumpedGasPrice**(`signer`, `percent`): `Promise`<`BigNumber`\\>\n  661  \n  662  **`Desc`**\n  ...\n  683  #### Returns\n  684  \n  685: `Promise`<`BigNumber`\\>\n  686  \n  687  Bumped as price as BigNumber\n  ...\n  884  ### <a id=\"getfeebps\" name=\"getfeebps\"></a> getFeeBps\n  885  \n  886: ▸ **getFeeBps**(`token`, `destinationChain`): `Promise`<`number`\\>\n  887  \n  888  #### Parameters\n  ...\n  895  #### Returns\n  896  \n  897: `Promise`<`number`\\>\n  898  \n  899  #### Inherited from\n  ...\n 1219  ### <a id=\"getrelayerfee\" name=\"getrelayerfee\"></a> getRelayerFee\n 1220  \n 1221: ▸ **getRelayerFee**(`destinationChain`, `tokenSymbol`): `Promise`<`BigNumber`\\>\n 1222  \n 1223  #### Parameters\n ....\n 1230  #### Returns\n 1231  \n 1232: `Promise`<`BigNumber`\\>\n 1233  \n 1234  #### Inherited from\n ....\n 1240  ### <a id=\"gets3configdata\" name=\"gets3configdata\"></a> getS3ConfigData\n 1241  \n 1242: ▸ **getS3ConfigData**(): `Promise`<`any`\\>\n 1243  \n 1244  #### Returns\n 1245  \n 1246: `Promise`<`any`\\>\n 1247  \n 1248  #### Inherited from\n ....\n 1254  ### <a id=\"getsigneraddress\" name=\"getsigneraddress\"></a> getSignerAddress\n 1255  \n 1256: ▸ **getSignerAddress**(): `Promise`<`string`\\>\n 1257  \n 1258  **`Desc`**\n ....\n 1272  #### Returns\n 1273  \n 1274: `Promise`<`string`\\>\n 1275  \n 1276  Ethers signer address.\n ....\n 1284  ### <a id=\"getsignerorprovider\" name=\"getsignerorprovider\"></a> getSignerOrProvider\n 1285  \n 1286: ▸ **getSignerOrProvider**(`chain`, `signer?`): `Promise`<`Provider` \\| `Signer`\\>\n 1287  \n 1288  **`Desc`**\n ....\n 1300  #### Returns\n 1301  \n 1302: `Promise`<`Provider` \\| `Signer`\\>\n 1303  \n 1304  Ethers signer or provider\n ....\n 1374  ### <a id=\"gettransferstatus\" name=\"gettransferstatus\"></a> getTransferStatus\n 1375  \n 1376: ▸ **getTransferStatus**(`transferIdOrTxHash`): `Promise`<`any`\\>\n 1377  \n 1378  #### Parameters\n ....\n 1384  #### Returns\n 1385  \n 1386: `Promise`<`any`\\>\n 1387  \n 1388  #### Inherited from\n ....\n 1414  ### <a id=\"init\" name=\"init\"></a> init\n 1415  \n 1416: ▸ **init**(): `Promise`<`void`\\>\n 1417  \n 1418  #### Returns\n 1419  \n 1420: `Promise`<`void`\\>\n 1421  \n 1422  #### Inherited from\n ....\n 1468  ### <a id=\"sendtransaction\" name=\"sendtransaction\"></a> sendTransaction\n 1469  \n 1470: ▸ **sendTransaction**(`transactionRequest`, `chain`): `Promise`<`TransactionResponse`\\>\n 1471  \n 1472  #### Parameters\n ....\n 1479  #### Returns\n 1480  \n 1481: `Promise`<`TransactionResponse`\\>\n 1482  \n 1483  #### Inherited from\n ....\n 1698  ### <a id=\"txoverrides\" name=\"txoverrides\"></a> txOverrides\n 1699  \n 1700: ▸ **txOverrides**(`chain`): `Promise`<`any`\\>\n 1701  \n 1702  #### Parameters\n ....\n 1708  #### Returns\n 1709  \n 1710: `Promise`<`any`\\>\n 1711  \n 1712  #### Inherited from\n\n~/Sandbox/hop/packages/sdk/docs/classes/HopBridge.md:\n  356  ### <a id=\"getcontract\" name=\"getcontract\"></a> getContract\n  357  \n  358: • **getContract**: (`factory`: `Factory`, `address`: `string`, `provider`: [`TProvider`](../modules.md#tprovider)) => `Promise`<`any`\\> = `getContract`\n  359  \n  360  #### Type declaration\n  361  \n  362: ▸ (`factory`, `address`, `provider`): `Promise`<`any`\\>\n  363  \n  364  ##### Parameters\n  ...\n  372  ##### Returns\n  373  \n  374: `Promise`<`any`\\>\n  375  \n  376  #### Inherited from\n  ...\n  504  ### <a id=\"_getbonderaddress\" name=\"_getbonderaddress\"></a> \\_getBonderAddress\n  505  \n  506: ▸ `Protected` **_getBonderAddress**(`token`, `sourceChain`, `destinationChain`): `Promise`<`string`\\>\n  507  \n  508  #### Parameters\n  ...\n  516  #### Returns\n  517  \n  518: `Promise`<`string`\\>\n  519  \n  520  #### Inherited from\n  ...\n  526  ### <a id=\"_getmessengerwrapperaddress\" name=\"_getmessengerwrapperaddress\"></a> \\_getMessengerWrapperAddress\n  527  \n  528: ▸ `Protected` **_getMessengerWrapperAddress**(`token`, `destinationChain`): `Promise`<`string`\\>\n  529  \n  530  #### Parameters\n  ...\n  537  #### Returns\n  538  \n  539: `Promise`<`string`\\>\n  540  \n  541  #### Inherited from\n  ...\n  547  ### <a id=\"addliquidity\" name=\"addliquidity\"></a> addLiquidity\n  548  \n  549: ▸ **addLiquidity**(`amount0Desired`, `amount1Desired`, `chain?`, `options?`): `Promise`<`TransactionResponse`\\>\n  550  \n  551  **`Desc`**\n  ...\n  564  #### Returns\n  565  \n  566: `Promise`<`TransactionResponse`\\>\n  567  \n  568  Ethers transaction object.\n  ...\n  589  ### <a id=\"calculatewithdrawonetoken\" name=\"calculatewithdrawonetoken\"></a> calculateWithdrawOneToken\n  590  \n  591: ▸ **calculateWithdrawOneToken**(`tokenAmount`, `tokenIndex`, `chain?`): `Promise`<`any`\\>\n  592  \n  593  #### Parameters\n  ...\n  601  #### Returns\n  602  \n  603: `Promise`<`any`\\>\n  604  \n  605  ___\n  ...\n  607  ### <a id=\"challengeperiod\" name=\"challengeperiod\"></a> challengePeriod\n  608  \n  609: ▸ `Readonly` **challengePeriod**(): `Promise`<`BigNumber`\\>\n  610  \n  611  **`Desc`**\n  ...\n  615  #### Returns\n  616  \n  617: `Promise`<`BigNumber`\\>\n  618  \n  619  The challenge period for the bridge as BigNumber.\n  ...\n  657  ### <a id=\"estimatebondwithdrawalgaslimit\" name=\"estimatebondwithdrawalgaslimit\"></a> estimateBondWithdrawalGasLimit\n  658  \n  659: ▸ **estimateBondWithdrawalGasLimit**(`sourceChain`, `destinationChain`): `Promise`<`any`\\>\n  660  \n  661  #### Parameters\n  ...\n  668  #### Returns\n  669  \n  670: `Promise`<`any`\\>\n  671  \n  672  ___\n  ...\n  674  ### <a id=\"estimateoptimisml1feefromdata\" name=\"estimateoptimisml1feefromdata\"></a> estimateOptimismL1FeeFromData\n  675  \n  676: ▸ **estimateOptimismL1FeeFromData**(`gasLimit`, `data?`, `to?`): `Promise`<`any`\\>\n  677  \n  678  #### Parameters\n  ...\n  686  #### Returns\n  687  \n  688: `Promise`<`any`\\>\n  689  \n  690  #### Inherited from\n  ...\n  696  ### <a id=\"estimatesendgaslimit\" name=\"estimatesendgaslimit\"></a> estimateSendGasLimit\n  697  \n  698: ▸ **estimateSendGasLimit**(`tokenAmount`, `sourceChain`, `destinationChain`, `options?`): `Promise`<`BigNumber`\\>\n  699  \n  700  #### Parameters\n  ...\n  709  #### Returns\n  710  \n  711: `Promise`<`BigNumber`\\>\n  712  \n  713  ___\n  ...\n  715  ### <a id=\"estimatesendhtokensgaslimit\" name=\"estimatesendhtokensgaslimit\"></a> estimateSendHTokensGasLimit\n  716  \n  717: ▸ **estimateSendHTokensGasLimit**(`tokenAmount`, `sourceChain`, `destinationChain`, `options?`): `Promise`<`BigNumber`\\>\n  718  \n  719  #### Parameters\n  ...\n  728  #### Returns\n  729  \n  730: `Promise`<`BigNumber`\\>\n  731  \n  732  ___\n  ...\n  734  ### <a id=\"execsaddleswap\" name=\"execsaddleswap\"></a> execSaddleSwap\n  735  \n  736: ▸ **execSaddleSwap**(`sourceChain`, `toHop`, `amount`, `minAmountOut`, `deadline`): `Promise`<`any`\\>\n  737  \n  738  **`Desc`**\n  ...\n  752  #### Returns\n  753  \n  754: `Promise`<`any`\\>\n  755  \n  756  Ethers transaction object.\n  ...\n  760  ### <a id=\"fetchbonderavailableliquiditydata\" name=\"fetchbonderavailableliquiditydata\"></a> fetchBonderAvailableLiquidityData\n  761  \n  762: ▸ **fetchBonderAvailableLiquidityData**(): `Promise`<`any`\\>\n  763  \n  764  #### Returns\n  765  \n  766: `Promise`<`any`\\>\n  767  \n  768  ___\n  ...\n  770  ### <a id=\"fetchconfigfroms3\" name=\"fetchconfigfroms3\"></a> fetchConfigFromS3\n  771  \n  772: ▸ **fetchConfigFromS3**(): `Promise`<`any`\\>\n  773  \n  774  #### Returns\n  775  \n  776: `Promise`<`any`\\>\n  777  \n  778  #### Inherited from\n  ...\n  815  ### <a id=\"getaccountlpbalance\" name=\"getaccountlpbalance\"></a> getAccountLpBalance\n  816  \n  817: ▸ **getAccountLpBalance**(`chain`, `account?`): `Promise`<`BigNumber`\\>\n  818  \n  819  #### Parameters\n  ...\n  826  #### Returns\n  827  \n  828: `Promise`<`BigNumber`\\>\n  829  \n  830  ___\n  ...\n  832  ### <a id=\"getaccountlpcanonicalbalance\" name=\"getaccountlpcanonicalbalance\"></a> getAccountLpCanonicalBalance\n  833  \n  834: ▸ **getAccountLpCanonicalBalance**(`chain`, `account?`): `Promise`<`BigNumber`\\>\n  835  \n  836  #### Parameters\n  ...\n  843  #### Returns\n  844  \n  845: `Promise`<`BigNumber`\\>\n  846  \n  847  ___\n  ...\n  849  ### <a id=\"getaccountlpcanonicalbalanceusd\" name=\"getaccountlpcanonicalbalanceusd\"></a> getAccountLpCanonicalBalanceUsd\n  850  \n  851: ▸ **getAccountLpCanonicalBalanceUsd**(`chain`, `account?`): `Promise`<`number`\\>\n  852  \n  853  #### Parameters\n  ...\n  860  #### Returns\n  861  \n  862: `Promise`<`number`\\>\n  863  \n  864  ___\n  ...\n  866  ### <a id=\"getambbridge\" name=\"getambbridge\"></a> getAmbBridge\n  867  \n  868: ▸ **getAmbBridge**(`chain`): `Promise`<`any`\\>\n  869  \n  870  #### Parameters\n  ...\n  876  #### Returns\n  877  \n  878: `Promise`<`any`\\>\n  879  \n  880  ___\n  ...\n  898  ### <a id=\"getammdata\" name=\"getammdata\"></a> getAmmData\n  899  \n  900: ▸ **getAmmData**(`chain`, `amountIn`, `isToHToken`, `slippageTolerance`): `Promise`<{ `amountOutMin`: `BigNumber` ; `lpFeeAmount`: `BigNumber` ; `priceImpact`: `number` ; `rate`: `number`  }\\>\n  901  \n  902  #### Parameters\n  ...\n  911  #### Returns\n  912  \n  913: `Promise`<{ `amountOutMin`: `BigNumber` ; `lpFeeAmount`: `BigNumber` ; `priceImpact`: `number` ; `rate`: `number`  }\\>\n  914  \n  915  ___\n  ...\n  917  ### <a id=\"getammwrapper\" name=\"getammwrapper\"></a> getAmmWrapper\n  918  \n  919: ▸ **getAmmWrapper**(`chain`, `signer?`): `Promise`<`any`\\>\n  920  \n  921  **`Desc`**\n  ...\n  932  #### Returns\n  933  \n  934: `Promise`<`any`\\>\n  935  \n  936  Ethers contract instance.\n  ...\n  940  ### <a id=\"getamountout\" name=\"getamountout\"></a> getAmountOut\n  941  \n  942: ▸ **getAmountOut**(`tokenAmountIn`, `sourceChain?`, `destinationChain?`): `Promise`<`BigNumber`\\>\n  943  \n  944  **`Desc`**\n  ...\n  967  #### Returns\n  968  \n  969: `Promise`<`BigNumber`\\>\n  970  \n  971  Amount as BigNumber.\n  ...\n  996  ### <a id=\"getavailableliquidity\" name=\"getavailableliquidity\"></a> getAvailableLiquidity\n  997  \n  998: ▸ **getAvailableLiquidity**(`destinationChain`, `bonder`): `Promise`<`BigNumber`\\>\n  999  \n 1000  #### Parameters\n ....\n 1007  #### Returns\n 1008  \n 1009: `Promise`<`BigNumber`\\>\n 1010  \n 1011  ___\n ....\n 1013  ### <a id=\"getbonderaddress\" name=\"getbonderaddress\"></a> getBonderAddress\n 1014  \n 1015: ▸ **getBonderAddress**(`sourceChain`, `destinationChain`): `Promise`<`string`\\>\n 1016  \n 1017  #### Parameters\n ....\n 1024  #### Returns\n 1025  \n 1026: `Promise`<`string`\\>\n 1027  \n 1028  ___\n ....\n 1030  ### <a id=\"getbonderavailableliquiditydata\" name=\"getbonderavailableliquiditydata\"></a> getBonderAvailableLiquidityData\n 1031  \n 1032: ▸ **getBonderAvailableLiquidityData**(): `Promise`<`any`\\>\n 1033  \n 1034  #### Returns\n 1035  \n 1036: `Promise`<`any`\\>\n 1037  \n 1038  ___\n ....\n 1040  ### <a id=\"getbonderfeeabsolute\" name=\"getbonderfeeabsolute\"></a> getBonderFeeAbsolute\n 1041  \n 1042: ▸ **getBonderFeeAbsolute**(`sourceChain`): `Promise`<`BigNumber`\\>\n 1043  \n 1044  #### Parameters\n ....\n 1050  #### Returns\n 1051  \n 1052: `Promise`<`BigNumber`\\>\n 1053  \n 1054  ___\n ....\n 1056  ### <a id=\"getbridgecontract\" name=\"getbridgecontract\"></a> getBridgeContract\n 1057  \n 1058: ▸ **getBridgeContract**(`chain`): `Promise`<`Contract`\\>\n 1059  \n 1060  **`Desc`**\n ....\n 1070  #### Returns\n 1071  \n 1072: `Promise`<`Contract`\\>\n 1073  \n 1074  Ethers contract instance.\n ....\n 1078  ### <a id=\"getbumpedgasprice\" name=\"getbumpedgasprice\"></a> getBumpedGasPrice\n 1079  \n 1080: ▸ **getBumpedGasPrice**(`signer`, `percent`): `Promise`<`BigNumber`\\>\n 1081  \n 1082  **`Desc`**\n ....\n 1103  #### Returns\n 1104  \n 1105: `Promise`<`BigNumber`\\>\n 1106  \n 1107  Bumped as price as BigNumber\n ....\n 1248  ### <a id=\"getcredit\" name=\"getcredit\"></a> getCredit\n 1249  \n 1250: ▸ **getCredit**(`sourceChain`, `bonder`): `Promise`<`BigNumber`\\>\n 1251  \n 1252  **`Desc`**\n ....\n 1263  #### Returns\n 1264  \n 1265: `Promise`<`BigNumber`\\>\n 1266  \n 1267  Total credit as BigNumber.\n ....\n 1271  ### <a id=\"getdebit\" name=\"getdebit\"></a> getDebit\n 1272  \n 1273: ▸ **getDebit**(`sourceChain`, `bonder`): `Promise`<`BigNumber`\\>\n 1274  \n 1275  **`Desc`**\n ....\n 1286  #### Returns\n 1287  \n 1288: `Promise`<`BigNumber`\\>\n 1289  \n 1290  Total debit as BigNumber.\n ....\n 1308  ### <a id=\"getdestinationtransactionfee\" name=\"getdestinationtransactionfee\"></a> getDestinationTransactionFee\n 1309  \n 1310: ▸ **getDestinationTransactionFee**(`sourceChain`, `destinationChain`): `Promise`<`BigNumber`\\>\n 1311  \n 1312  #### Parameters\n ....\n 1319  #### Returns\n 1320  \n 1321: `Promise`<`BigNumber`\\>\n 1322  \n 1323  ___\n ....\n 1325  ### <a id=\"getdestinationtransactionfeedata\" name=\"getdestinationtransactionfeedata\"></a> getDestinationTransactionFeeData\n 1326  \n 1327: ▸ **getDestinationTransactionFeeData**(`sourceChain`, `destinationChain`): `Promise`<`any`\\>\n 1328  \n 1329  #### Parameters\n ....\n 1336  #### Returns\n 1337  \n 1338: `Promise`<`any`\\>\n 1339  \n 1340  ___\n ....\n 1342  ### <a id=\"getethbalance\" name=\"getethbalance\"></a> getEthBalance\n 1343  \n 1344: ▸ **getEthBalance**(`chain?`, `address?`): `Promise`<`BigNumber`\\>\n 1345  \n 1346  #### Parameters\n ....\n 1353  #### Returns\n 1354  \n 1355: `Promise`<`BigNumber`\\>\n 1356  \n 1357  ___\n ....\n 1433  ### <a id=\"getfeebps\" name=\"getfeebps\"></a> getFeeBps\n 1434  \n 1435: ▸ **getFeeBps**(`token`, `destinationChain`): `Promise`<`number`\\>\n 1436  \n 1437  #### Parameters\n ....\n 1444  #### Returns\n 1445  \n 1446: `Promise`<`number`\\>\n 1447  \n 1448  #### Inherited from\n ....\n 1454  ### <a id=\"getfrontendavailableliquidity\" name=\"getfrontendavailableliquidity\"></a> getFrontendAvailableLiquidity\n 1455  \n 1456: ▸ **getFrontendAvailableLiquidity**(`sourceChain`, `destinationChain`): `Promise`<`BigNumber`\\>\n 1457  \n 1458  **`Desc`**\n ....\n 1469  #### Returns\n 1470  \n 1471: `Promise`<`BigNumber`\\>\n 1472  \n 1473  Available liquidity as BigNumber.\n ....\n 1498  ### <a id=\"getl1bridge\" name=\"getl1bridge\"></a> getL1Bridge\n 1499  \n 1500: ▸ **getL1Bridge**(`signer?`): `Promise`<`any`\\>\n 1501  \n 1502  **`Desc`**\n ....\n 1512  #### Returns\n 1513  \n 1514: `Promise`<`any`\\>\n 1515  \n 1516  Ethers contract instance.\n ....\n 1677  ### <a id=\"getl2bridge\" name=\"getl2bridge\"></a> getL2Bridge\n 1678  \n 1679: ▸ **getL2Bridge**(`chain`, `signer?`): `Promise`<`any`\\>\n 1680  \n 1681  **`Desc`**\n ....\n 1692  #### Returns\n 1693  \n 1694: `Promise`<`any`\\>\n 1695  \n 1696  Ethers contract instance.\n ....\n 1842  ### <a id=\"getlpfees\" name=\"getlpfees\"></a> getLpFees\n 1843  \n 1844: ▸ **getLpFees**(`amountIn`, `sourceChain`, `destinationChain`): `Promise`<`BigNumber`\\>\n 1845  \n 1846  #### Parameters\n ....\n 1854  #### Returns\n 1855  \n 1856: `Promise`<`BigNumber`\\>\n 1857  \n 1858  ___\n ....\n 1860  ### <a id=\"getmessengerwrapperaddress\" name=\"getmessengerwrapperaddress\"></a> getMessengerWrapperAddress\n 1861  \n 1862: ▸ **getMessengerWrapperAddress**(`destinationChain`): `Promise`<`string`\\>\n 1863  \n 1864  #### Parameters\n ....\n 1870  #### Returns\n 1871  \n 1872: `Promise`<`string`\\>\n 1873  \n 1874  ___\n ....\n 1876  ### <a id=\"getoptimisml1fee\" name=\"getoptimisml1fee\"></a> getOptimismL1Fee\n 1877  \n 1878: ▸ **getOptimismL1Fee**(`sourceChain`, `destinationChain`): `Promise`<`any`\\>\n 1879  \n 1880  #### Parameters\n ....\n 1887  #### Returns\n 1888  \n 1889: `Promise`<`any`\\>\n 1890  \n 1891  ___\n ....\n 1913  ### <a id=\"getrelayerfee\" name=\"getrelayerfee\"></a> getRelayerFee\n 1914  \n 1915: ▸ **getRelayerFee**(`destinationChain`, `tokenSymbol`): `Promise`<`BigNumber`\\>\n 1916  \n 1917  #### Parameters\n ....\n 1924  #### Returns\n 1925  \n 1926: `Promise`<`BigNumber`\\>\n 1927  \n 1928  #### Inherited from\n ....\n 1934  ### <a id=\"getrequiredliquidity\" name=\"getrequiredliquidity\"></a> getRequiredLiquidity\n 1935  \n 1936: ▸ **getRequiredLiquidity**(`tokenAmountIn`, `sourceChain`): `Promise`<`BigNumber`\\>\n 1937  \n 1938  **`Desc`**\n ....\n 1960  #### Returns\n 1961  \n 1962: `Promise`<`BigNumber`\\>\n 1963  \n 1964  Amount as BigNumber.\n ....\n 1968  ### <a id=\"getreservestotal\" name=\"getreservestotal\"></a> getReservesTotal\n 1969  \n 1970: ▸ **getReservesTotal**(`chain?`): `Promise`<`any`\\>\n 1971  \n 1972  #### Parameters\n ....\n 1978  #### Returns\n 1979  \n 1980: `Promise`<`any`\\>\n 1981  \n 1982  ___\n ....\n 1984  ### <a id=\"gets3configdata\" name=\"gets3configdata\"></a> getS3ConfigData\n 1985  \n 1986: ▸ **getS3ConfigData**(): `Promise`<`any`\\>\n 1987  \n 1988  #### Returns\n 1989  \n 1990: `Promise`<`any`\\>\n 1991  \n 1992  #### Inherited from\n ....\n 2021  ### <a id=\"getsaddleswapreserves\" name=\"getsaddleswapreserves\"></a> getSaddleSwapReserves\n 2022  \n 2023: ▸ **getSaddleSwapReserves**(`chain?`): `Promise`<[`any`, `any`]\\>\n 2024  \n 2025  **`Desc`**\n ....\n 2035  #### Returns\n 2036  \n 2037: `Promise`<[`any`, `any`]\\>\n 2038  \n 2039  Array containing reserve amounts for canonical token\n ....\n 2061  ### <a id=\"getsenddata\" name=\"getsenddata\"></a> getSendData\n 2062  \n 2063: ▸ **getSendData**(`amountIn`, `sourceChain`, `destinationChain`, `isHTokenSend?`): `Promise`<{ `adjustedBonderFee`: `BigNumber` ; `adjustedDestinationTxFee`: `any` ; `amountOut`: `BigNumber` ; `bonderFeeRelative`: `BigNumber` ; `chainNativeTokenPrice`: `any` = destinationTxFeeData.chainNativeTokenPrice; `destinationChainGasPrice`: `any` = destinationTxFeeData.destinationChainGasPrice; `destinationTxFee`: `any` ; `estimatedReceived`: `BigNumber` ; `feeBps`: `number` ; `lpFeeBps`: `number` = LpFeeBps; `lpFees`: `BigNumber` ; `priceImpact`: `number` ; `rate`: `number` ; `requiredLiquidity`: `BigNumber` = hTokenAmount; `tokenPrice`: `any` = destinationTxFeeData.tokenPrice; `tokenPriceRate`: `any` = destinationTxFeeData.rate; `totalFee`: `BigNumber`  }\\>\n 2064  \n 2065  #### Parameters\n ....\n 2074  #### Returns\n 2075  \n 2076: `Promise`<{ `adjustedBonderFee`: `BigNumber` ; `adjustedDestinationTxFee`: `any` ; `amountOut`: `BigNumber` ; `bonderFeeRelative`: `BigNumber` ; `chainNativeTokenPrice`: `any` = destinationTxFeeData.chainNativeTokenPrice; `destinationChainGasPrice`: `any` = destinationTxFeeData.destinationChainGasPrice; `destinationTxFee`: `any` ; `estimatedReceived`: `BigNumber` ; `feeBps`: `number` ; `lpFeeBps`: `number` = LpFeeBps; `lpFees`: `BigNumber` ; `priceImpact`: `number` ; `rate`: `number` ; `requiredLiquidity`: `BigNumber` = hTokenAmount; `tokenPrice`: `any` = destinationTxFeeData.tokenPrice; `tokenPriceRate`: `any` = destinationTxFeeData.rate; `totalFee`: `BigNumber`  }\\>\n 2077  \n 2078  ___\n ....\n 2080  ### <a id=\"getsendestimatedgascost\" name=\"getsendestimatedgascost\"></a> getSendEstimatedGasCost\n 2081  \n 2082: ▸ **getSendEstimatedGasCost**(`tokenAmount`, `sourceChain`, `destinationChain`, `options?`): `Promise`<`BigNumber`\\>\n 2083  \n 2084  #### Parameters\n ....\n 2093  #### Returns\n 2094  \n 2095: `Promise`<`BigNumber`\\>\n 2096  \n 2097  ___\n ....\n 2099  ### <a id=\"getsigneraddress\" name=\"getsigneraddress\"></a> getSignerAddress\n 2100  \n 2101: ▸ **getSignerAddress**(): `Promise`<`string`\\>\n 2102  \n 2103  **`Desc`**\n ....\n 2117  #### Returns\n 2118  \n 2119: `Promise`<`string`\\>\n 2120  \n 2121  Ethers signer address.\n ....\n 2129  ### <a id=\"getsignerorprovider\" name=\"getsignerorprovider\"></a> getSignerOrProvider\n 2130  \n 2131: ▸ **getSignerOrProvider**(`chain`, `signer?`): `Promise`<`Provider` \\| `Signer`\\>\n 2132  \n 2133  **`Desc`**\n ....\n 2145  #### Returns\n 2146  \n 2147: `Promise`<`Provider` \\| `Signer`\\>\n 2148  \n 2149  Ethers signer or provider\n ....\n 2229  ### <a id=\"gettimeslot\" name=\"gettimeslot\"></a> getTimeSlot\n 2230  \n 2231: ▸ `Readonly` **getTimeSlot**(`time`): `Promise`<`BigNumber`\\>\n 2232  \n 2233  **`Desc`**\n ....\n 2243  #### Returns\n 2244  \n 2245: `Promise`<`BigNumber`\\>\n 2246  \n 2247  Time slot for the given time as BigNumber.\n ....\n 2251  ### <a id=\"gettokenbalance\" name=\"gettokenbalance\"></a> getTokenBalance\n 2252  \n 2253: ▸ **getTokenBalance**(`chain`, `address?`): `Promise`<`BigNumber`\\>\n 2254  \n 2255  #### Parameters\n ....\n 2262  #### Returns\n 2263  \n 2264: `Promise`<`BigNumber`\\>\n 2265  \n 2266  ___\n ....\n 2298  ### <a id=\"gettotaldebit\" name=\"gettotaldebit\"></a> getTotalDebit\n 2299  \n 2300: ▸ **getTotalDebit**(`sourceChain`, `bonder`): `Promise`<`BigNumber`\\>\n 2301  \n 2302  **`Desc`**\n ....\n 2313  #### Returns\n 2314  \n 2315: `Promise`<`BigNumber`\\>\n 2316  \n 2317  Total debit as BigNumber.\n ....\n 2321  ### <a id=\"gettotalfee\" name=\"gettotalfee\"></a> getTotalFee\n 2322  \n 2323: ▸ **getTotalFee**(`amountIn`, `sourceChain`, `destinationChain`): `Promise`<`BigNumber`\\>\n 2324  \n 2325  #### Parameters\n ....\n 2333  #### Returns\n 2334  \n 2335: `Promise`<`BigNumber`\\>\n 2336  \n 2337  ___\n ....\n 2339  ### <a id=\"gettransferstatus\" name=\"gettransferstatus\"></a> getTransferStatus\n 2340  \n 2341: ▸ **getTransferStatus**(`transferIdOrTxHash`): `Promise`<`any`\\>\n 2342  \n 2343  #### Parameters\n ....\n 2349  #### Returns\n 2350  \n 2351: `Promise`<`any`\\>\n 2352  \n 2353  #### Inherited from\n ....\n 2359  ### <a id=\"gettvl\" name=\"gettvl\"></a> getTvl\n 2360  \n 2361: ▸ **getTvl**(`chain?`): `Promise`<`any`\\>\n 2362  \n 2363  #### Parameters\n ....\n 2369  #### Returns\n 2370  \n 2371: `Promise`<`any`\\>\n 2372  \n 2373  ___\n ....\n 2375  ### <a id=\"gettvlusd\" name=\"gettvlusd\"></a> getTvlUsd\n 2376  \n 2377: ▸ **getTvlUsd**(`chain?`): `Promise`<`number`\\>\n 2378  \n 2379  #### Parameters\n ....\n 2385  #### Returns\n 2386  \n 2387: `Promise`<`number`\\>\n 2388  \n 2389  ___\n ....\n 2391  ### <a id=\"getunbondedtransferrootamount\" name=\"getunbondedtransferrootamount\"></a> getUnbondedTransferRootAmount\n 2392  \n 2393: ▸ **getUnbondedTransferRootAmount**(`sourceChain`, `destinationChain`): `Promise`<`BigNumber`\\>\n 2394  \n 2395  #### Parameters\n ....\n 2402  #### Returns\n 2403  \n 2404: `Promise`<`BigNumber`\\>\n 2405  \n 2406  ___\n ....\n 2408  ### <a id=\"getvaultbalance\" name=\"getvaultbalance\"></a> getVaultBalance\n 2409  \n 2410: ▸ **getVaultBalance**(`destinationChain`, `bonder`): `Promise`<`BigNumber`\\>\n 2411  \n 2412  #### Parameters\n ....\n 2419  #### Returns\n 2420  \n 2421: `Promise`<`BigNumber`\\>\n 2422  \n 2423  ___\n ....\n 2445  ### <a id=\"init\" name=\"init\"></a> init\n 2446  \n 2447: ▸ **init**(): `Promise`<`void`\\>\n 2448  \n 2449  #### Returns\n 2450  \n 2451: `Promise`<`void`\\>\n 2452  \n 2453  #### Inherited from\n ....\n 2459  ### <a id=\"isdestinationchainpaused\" name=\"isdestinationchainpaused\"></a> isDestinationChainPaused\n 2460  \n 2461: ▸ **isDestinationChainPaused**(`destinationChain`): `Promise`<`any`\\>\n 2462  \n 2463  #### Parameters\n ....\n 2469  #### Returns\n 2470  \n 2471: `Promise`<`any`\\>\n 2472  \n 2473  ___\n ....\n 2547  ### <a id=\"needsapproval\" name=\"needsapproval\"></a> needsApproval\n 2548  \n 2549: ▸ **needsApproval**(`amount`, `chain`, `address?`): `Promise`<`any`\\>\n 2550  \n 2551  #### Parameters\n ....\n 2559  #### Returns\n 2560  \n 2561: `Promise`<`any`\\>\n 2562  \n 2563  ___\n ....\n 2565  ### <a id=\"needshtokenapproval\" name=\"needshtokenapproval\"></a> needsHTokenApproval\n 2566  \n 2567: ▸ **needsHTokenApproval**(`amount`, `chain`, `address?`): `Promise`<`any`\\>\n 2568  \n 2569  #### Parameters\n ....\n 2577  #### Returns\n 2578  \n 2579: `Promise`<`any`\\>\n 2580  \n 2581  ___\n ....\n 2600  ### <a id=\"populatebondwithdrawaltx\" name=\"populatebondwithdrawaltx\"></a> populateBondWithdrawalTx\n 2601  \n 2602: ▸ **populateBondWithdrawalTx**(`sourceChain`, `destinationChain`, `recipient?`): `Promise`<`any`\\>\n 2603  \n 2604  #### Parameters\n ....\n 2612  #### Returns\n 2613  \n 2614: `Promise`<`any`\\>\n 2615  \n 2616  ___\n ....\n 2618  ### <a id=\"populatesendapprovaltx\" name=\"populatesendapprovaltx\"></a> populateSendApprovalTx\n 2619  \n 2620: ▸ **populateSendApprovalTx**(`tokenAmount`, `sourceChain`, `isHTokenTransfer?`): `Promise`<`any`\\>\n 2621  \n 2622  #### Parameters\n ....\n 2630  #### Returns\n 2631  \n 2632: `Promise`<`any`\\>\n 2633  \n 2634  ___\n ....\n 2636  ### <a id=\"populatesendhtokenstx\" name=\"populatesendhtokenstx\"></a> populateSendHTokensTx\n 2637  \n 2638: ▸ **populateSendHTokensTx**(`tokenAmount`, `sourceChain`, `destinationChain`, `options?`): `Promise`<`any`\\>\n 2639  \n 2640  #### Parameters\n ....\n 2649  #### Returns\n 2650  \n 2651: `Promise`<`any`\\>\n 2652  \n 2653  ___\n ....\n 2655  ### <a id=\"populatesendtx\" name=\"populatesendtx\"></a> populateSendTx\n 2656  \n 2657: ▸ **populateSendTx**(`tokenAmount`, `sourceChain?`, `destinationChain?`, `options?`): `Promise`<`any`\\>\n 2658  \n 2659  #### Parameters\n ....\n 2668  #### Returns\n 2669  \n 2670: `Promise`<`any`\\>\n 2671  \n 2672  ___\n ....\n 2674  ### <a id=\"removeliquidity\" name=\"removeliquidity\"></a> removeLiquidity\n 2675  \n 2676: ▸ **removeLiquidity**(`liquidityTokenAmount`, `chain?`, `options?`): `Promise`<`TransactionResponse`\\>\n 2677  \n 2678  **`Desc`**\n ....\n 2690  #### Returns\n 2691  \n 2692: `Promise`<`TransactionResponse`\\>\n 2693  \n 2694  Ethers transaction object.\n ....\n 2698  ### <a id=\"removeliquidityimbalance\" name=\"removeliquidityimbalance\"></a> removeLiquidityImbalance\n 2699  \n 2700: ▸ **removeLiquidityImbalance**(`token0Amount`, `token1Amount`, `chain?`, `options?`): `Promise`<`any`\\>\n 2701  \n 2702  #### Parameters\n ....\n 2711  #### Returns\n 2712  \n 2713: `Promise`<`any`\\>\n 2714  \n 2715  ___\n ....\n 2717  ### <a id=\"removeliquidityonetoken\" name=\"removeliquidityonetoken\"></a> removeLiquidityOneToken\n 2718  \n 2719: ▸ **removeLiquidityOneToken**(`lpTokenAmount`, `tokenIndex`, `chain?`, `options?`): `Promise`<`any`\\>\n 2720  \n 2721  #### Parameters\n ....\n 2730  #### Returns\n 2731  \n 2732: `Promise`<`any`\\>\n 2733  \n 2734  ___\n ....\n 2736  ### <a id=\"send\" name=\"send\"></a> send\n 2737  \n 2738: ▸ **send**(`tokenAmount`, `sourceChain?`, `destinationChain?`, `options?`): `Promise`<`TransactionResponse`\\>\n 2739  \n 2740  **`Desc`**\n ....\n 2765  #### Returns\n 2766  \n 2767: `Promise`<`TransactionResponse`\\>\n 2768  \n 2769  Ethers Transaction object.\n ....\n 2773  ### <a id=\"sendapproval\" name=\"sendapproval\"></a> sendApproval\n 2774  \n 2775: ▸ **sendApproval**(`tokenAmount`, `sourceChain`, `destinationChain`, `isHTokenTransfer?`): `Promise`<`TransactionResponse`\\>\n 2776  \n 2777  #### Parameters\n ....\n 2786  #### Returns\n 2787  \n 2788: `Promise`<`TransactionResponse`\\>\n 2789  \n 2790  ___\n ....\n 2792  ### <a id=\"sendhtoken\" name=\"sendhtoken\"></a> sendHToken\n 2793  \n 2794: ▸ **sendHToken**(`tokenAmount`, `sourceChain`, `destinationChain`, `options?`): `Promise`<`TransactionResponse`\\>\n 2795  \n 2796  #### Parameters\n ....\n 2805  #### Returns\n 2806  \n 2807: `Promise`<`TransactionResponse`\\>\n 2808  \n 2809  ___\n ....\n 2811  ### <a id=\"sendtransaction\" name=\"sendtransaction\"></a> sendTransaction\n 2812  \n 2813: ▸ **sendTransaction**(`transactionRequest`, `chain`): `Promise`<`TransactionResponse`\\>\n 2814  \n 2815  #### Parameters\n ....\n 2822  #### Returns\n 2823  \n 2824: `Promise`<`TransactionResponse`\\>\n 2825  \n 2826  #### Inherited from\n ....\n 3006  ### <a id=\"timeslotsize\" name=\"timeslotsize\"></a> timeSlotSize\n 3007  \n 3008: ▸ `Readonly` **timeSlotSize**(): `Promise`<`BigNumber`\\>\n 3009  \n 3010  **`Desc`**\n ....\n 3014  #### Returns\n 3015  \n 3016: `Promise`<`BigNumber`\\>\n 3017  \n 3018  The size of the time slots for the bridge as BigNumber.\n ....\n 3022  ### <a id=\"timeslottoamountbonded\" name=\"timeslottoamountbonded\"></a> timeSlotToAmountBonded\n 3023  \n 3024: ▸ `Readonly` **timeSlotToAmountBonded**(`timeSlot`, `bonder`): `Promise`<`BigNumber`\\>\n 3025  \n 3026  **`Desc`**\n ....\n 3037  #### Returns\n 3038  \n 3039: `Promise`<`BigNumber`\\>\n 3040  \n 3041  Amount bonded for the bonder for the given time slot as BigNumber.\n ....\n 3133  ### <a id=\"txoverrides\" name=\"txoverrides\"></a> txOverrides\n 3134  \n 3135: ▸ **txOverrides**(`chain`): `Promise`<`any`\\>\n 3136  \n 3137  #### Parameters\n ....\n 3143  #### Returns\n 3144  \n 3145: `Promise`<`any`\\>\n 3146  \n 3147  #### Inherited from\n ....\n 3153  ### <a id=\"willtransferfail\" name=\"willtransferfail\"></a> willTransferFail\n 3154  \n 3155: ▸ **willTransferFail**(`sourceChain`, `destinationChain`, `recipient`): `Promise`<`any`\\>\n 3156  \n 3157  #### Parameters\n ....\n 3165  #### Returns\n 3166  \n 3167: `Promise`<`any`\\>\n 3168  \n 3169  ___\n ....\n 3171  ### <a id=\"withdraw\" name=\"withdraw\"></a> withdraw\n 3172  \n 3173: ▸ **withdraw**(`chain`, `recipient`, `amount`, `transferNonce`, `bonderFee`, `amountOutMin`, `deadline`, `transferRootHash`, `rootTotalAmount`, `transferIdTreeIndex`, `siblings`, `totalLeaves`): `Promise`<`any`\\>\n 3174  \n 3175  #### Parameters\n ....\n 3192  #### Returns\n 3193  \n 3194: `Promise`<`any`\\>\n 3195  \n\n~/Sandbox/hop/packages/sdk/docs/classes/RelayerFee.md:\n   42  ### <a id=\"getrelaycost\" name=\"getrelaycost\"></a> getRelayCost\n   43  \n   44: ▸ **getRelayCost**(`chainSlug`): `Promise`<`BigNumber`\\>\n   45  \n   46  #### Parameters\n   ..\n   52  #### Returns\n   53  \n   54: `Promise`<`BigNumber`\\>\n   55  \n\n~/Sandbox/hop/packages/sdk/docs/classes/RetryProvider.md:\n   63  ### <a id=\"call\" name=\"call\"></a> call\n   64  \n   65: • **call**: (...`args`: [transaction: Deferrable<TransactionRequest\\>, blockTag?: BlockTag \\| Promise<BlockTag\\>]) => `Promise`<`string`\\>\n   66  \n   67  #### Type declaration\n   68  \n   69: ▸ (...`args`): `Promise`<`string`\\>\n   70  \n   71  ##### Parameters\n   ..\n   73  | Name | Type |\n   74  | :------ | :------ |\n   75: | `...args` | [transaction: Deferrable<TransactionRequest\\>, blockTag?: BlockTag \\| Promise<BlockTag\\>] |\n   76  \n   77  ##### Returns\n   78  \n   79: `Promise`<`string`\\>\n   80  \n   81  #### Implementation of\n   ..\n   91  ### <a id=\"estimategas\" name=\"estimategas\"></a> estimateGas\n   92  \n   93: • **estimateGas**: (...`args`: [transaction: Deferrable<TransactionRequest\\>]) => `Promise`<`BigNumber`\\>\n   94  \n   95  #### Type declaration\n   96  \n   97: ▸ (...`args`): `Promise`<`BigNumber`\\>\n   98  \n   99  ##### Parameters\n  ...\n  105  ##### Returns\n  106  \n  107: `Promise`<`BigNumber`\\>\n  108  \n  109  #### Implementation of\n  ...\n  119  ### <a id=\"getavatar\" name=\"getavatar\"></a> getAvatar\n  120  \n  121: • **getAvatar**: (...`args`: [nameOrAddress: string]) => `Promise`<`string`\\>\n  122  \n  123  #### Type declaration\n  124  \n  125: ▸ (...`args`): `Promise`<`string`\\>\n  126  \n  127  ##### Parameters\n  ...\n  133  ##### Returns\n  134  \n  135: `Promise`<`string`\\>\n  136  \n  137  #### Overrides\n  ...\n  143  ### <a id=\"getbalance\" name=\"getbalance\"></a> getBalance\n  144  \n  145: • **getBalance**: (...`args`: [addressOrName: string \\| Promise<string\\>, blockTag?: BlockTag \\| Promise<BlockTag\\>]) => `Promise`<`BigNumber`\\>\n  146  \n  147  #### Type declaration\n  148  \n  149: ▸ (...`args`): `Promise`<`BigNumber`\\>\n  150  \n  151  ##### Parameters\n  ...\n  153  | Name | Type |\n  154  | :------ | :------ |\n  155: | `...args` | [addressOrName: string \\| Promise<string\\>, blockTag?: BlockTag \\| Promise<BlockTag\\>] |\n  156  \n  157  ##### Returns\n  158  \n  159: `Promise`<`BigNumber`\\>\n  160  \n  161  #### Implementation of\n  ...\n  171  ### <a id=\"getblock\" name=\"getblock\"></a> getBlock\n  172  \n  173: • **getBlock**: (...`args`: [blockHashOrBlockTag: BlockTag \\| Promise<BlockTag\\>]) => `Promise`<`Block`\\>\n  174  \n  175  #### Type declaration\n  176  \n  177: ▸ (...`args`): `Promise`<`Block`\\>\n  178  \n  179  ##### Parameters\n  ...\n  181  | Name | Type |\n  182  | :------ | :------ |\n  183: | `...args` | [blockHashOrBlockTag: BlockTag \\| Promise<BlockTag\\>] |\n  184  \n  185  ##### Returns\n  186  \n  187: `Promise`<`Block`\\>\n  188  \n  189  #### Implementation of\n  ...\n  199  ### <a id=\"getblocknumber\" name=\"getblocknumber\"></a> getBlockNumber\n  200  \n  201: • **getBlockNumber**: (...`args`: []) => `Promise`<`number`\\>\n  202  \n  203  #### Type declaration\n  204  \n  205: ▸ (...`args`): `Promise`<`number`\\>\n  206  \n  207  ##### Parameters\n  ...\n  213  ##### Returns\n  214  \n  215: `Promise`<`number`\\>\n  216  \n  217  #### Implementation of\n  ...\n  227  ### <a id=\"getblockwithtransactions\" name=\"getblockwithtransactions\"></a> getBlockWithTransactions\n  228  \n  229: • **getBlockWithTransactions**: (...`args`: [blockHashOrBlockTag: BlockTag \\| Promise<BlockTag\\>]) => `Promise`<`BlockWithTransactions`\\>\n  230  \n  231  #### Type declaration\n  232  \n  233: ▸ (...`args`): `Promise`<`BlockWithTransactions`\\>\n  234  \n  235  ##### Parameters\n  ...\n  237  | Name | Type |\n  238  | :------ | :------ |\n  239: | `...args` | [blockHashOrBlockTag: BlockTag \\| Promise<BlockTag\\>] |\n  240  \n  241  ##### Returns\n  242  \n  243: `Promise`<`BlockWithTransactions`\\>\n  244  \n  245  #### Implementation of\n  ...\n  255  ### <a id=\"getcode\" name=\"getcode\"></a> getCode\n  256  \n  257: • **getCode**: (...`args`: [addressOrName: string \\| Promise<string\\>, blockTag?: BlockTag \\| Promise<BlockTag\\>]) => `Promise`<`string`\\>\n  258  \n  259  #### Type declaration\n  260  \n  261: ▸ (...`args`): `Promise`<`string`\\>\n  262  \n  263  ##### Parameters\n  ...\n  265  | Name | Type |\n  266  | :------ | :------ |\n  267: | `...args` | [addressOrName: string \\| Promise<string\\>, blockTag?: BlockTag \\| Promise<BlockTag\\>] |\n  268  \n  269  ##### Returns\n  270  \n  271: `Promise`<`string`\\>\n  272  \n  273  #### Implementation of\n  ...\n  283  ### <a id=\"getgasprice\" name=\"getgasprice\"></a> getGasPrice\n  284  \n  285: • **getGasPrice**: (...`args`: []) => `Promise`<`BigNumber`\\>\n  286  \n  287  #### Type declaration\n  288  \n  289: ▸ (...`args`): `Promise`<`BigNumber`\\>\n  290  \n  291  ##### Parameters\n  ...\n  297  ##### Returns\n  298  \n  299: `Promise`<`BigNumber`\\>\n  300  \n  301  #### Implementation of\n  ...\n  311  ### <a id=\"getlogs\" name=\"getlogs\"></a> getLogs\n  312  \n  313: • **getLogs**: (...`args`: [filter: Filter \\| FilterByBlockHash \\| Promise<Filter \\| FilterByBlockHash\\>]) => `Promise`<`Log`[]\\>\n  314  \n  315  #### Type declaration\n  316  \n  317: ▸ (...`args`): `Promise`<`Log`[]\\>\n  318  \n  319  ##### Parameters\n  ...\n  321  | Name | Type |\n  322  | :------ | :------ |\n  323: | `...args` | [filter: Filter \\| FilterByBlockHash \\| Promise<Filter \\| FilterByBlockHash\\>] |\n  324  \n  325  ##### Returns\n  326  \n  327: `Promise`<`Log`[]\\>\n  328  \n  329  #### Implementation of\n  ...\n  339  ### <a id=\"getnetwork\" name=\"getnetwork\"></a> getNetwork\n  340  \n  341: • **getNetwork**: (...`args`: []) => `Promise`<`Network`\\>\n  342  \n  343  #### Type declaration\n  344  \n  345: ▸ (...`args`): `Promise`<`Network`\\>\n  346  \n  347  ##### Parameters\n  ...\n  353  ##### Returns\n  354  \n  355: `Promise`<`Network`\\>\n  356  \n  357  #### Implementation of\n  ...\n  367  ### <a id=\"getstorageat\" name=\"getstorageat\"></a> getStorageAt\n  368  \n  369: • **getStorageAt**: (...`args`: [addressOrName: string \\| Promise<string\\>, position: BigNumberish \\| Promise<BigNumberish\\>, blockTag?: BlockTag \\| Promise<BlockTag\\>]) => `Promise`<`string`\\>\n  370  \n  371  #### Type declaration\n  372  \n  373: ▸ (...`args`): `Promise`<`string`\\>\n  374  \n  375  ##### Parameters\n  ...\n  377  | Name | Type |\n  378  | :------ | :------ |\n  379: | `...args` | [addressOrName: string \\| Promise<string\\>, position: BigNumberish \\| Promise<BigNumberish\\>, blockTag?: BlockTag \\| Promise<BlockTag\\>] |\n  380  \n  381  ##### Returns\n  382  \n  383: `Promise`<`string`\\>\n  384  \n  385  #### Implementation of\n  ...\n  395  ### <a id=\"gettransaction\" name=\"gettransaction\"></a> getTransaction\n  396  \n  397: • **getTransaction**: (...`args`: [transactionHash: string \\| Promise<string\\>]) => `Promise`<`TransactionResponse`\\>\n  398  \n  399  #### Type declaration\n  400  \n  401: ▸ (...`args`): `Promise`<`TransactionResponse`\\>\n  402  \n  403  ##### Parameters\n  ...\n  405  | Name | Type |\n  406  | :------ | :------ |\n  407: | `...args` | [transactionHash: string \\| Promise<string\\>] |\n  408  \n  409  ##### Returns\n  410  \n  411: `Promise`<`TransactionResponse`\\>\n  412  \n  413  #### Implementation of\n  ...\n  423  ### <a id=\"gettransactioncount\" name=\"gettransactioncount\"></a> getTransactionCount\n  424  \n  425: • **getTransactionCount**: (...`args`: [addressOrName: string \\| Promise<string\\>, blockTag?: BlockTag \\| Promise<BlockTag\\>]) => `Promise`<`number`\\>\n  426  \n  427  #### Type declaration\n  428  \n  429: ▸ (...`args`): `Promise`<`number`\\>\n  430  \n  431  ##### Parameters\n  ...\n  433  | Name | Type |\n  434  | :------ | :------ |\n  435: | `...args` | [addressOrName: string \\| Promise<string\\>, blockTag?: BlockTag \\| Promise<BlockTag\\>] |\n  436  \n  437  ##### Returns\n  438  \n  439: `Promise`<`number`\\>\n  440  \n  441  #### Implementation of\n  ...\n  451  ### <a id=\"gettransactionreceipt\" name=\"gettransactionreceipt\"></a> getTransactionReceipt\n  452  \n  453: • **getTransactionReceipt**: (...`args`: [transactionHash: string \\| Promise<string\\>]) => `Promise`<`TransactionReceipt`\\>\n  454  \n  455  #### Type declaration\n  456  \n  457: ▸ (...`args`): `Promise`<`TransactionReceipt`\\>\n  458  \n  459  ##### Parameters\n  ...\n  461  | Name | Type |\n  462  | :------ | :------ |\n  463: | `...args` | [transactionHash: string \\| Promise<string\\>] |\n  464  \n  465  ##### Returns\n  466  \n  467: `Promise`<`TransactionReceipt`\\>\n  468  \n  469  #### Implementation of\n  ...\n  479  ### <a id=\"lookupaddress\" name=\"lookupaddress\"></a> lookupAddress\n  480  \n  481: • **lookupAddress**: (...`args`: [address: string \\| Promise<string\\>]) => `Promise`<`string`\\>\n  482  \n  483  #### Type declaration\n  484  \n  485: ▸ (...`args`): `Promise`<`string`\\>\n  486  \n  487  ##### Parameters\n  ...\n  489  | Name | Type |\n  490  | :------ | :------ |\n  491: | `...args` | [address: string \\| Promise<string\\>] |\n  492  \n  493  ##### Returns\n  494  \n  495: `Promise`<`string`\\>\n  496  \n  497  #### Implementation of\n  ...\n  507  ### <a id=\"resolvename\" name=\"resolvename\"></a> resolveName\n  508  \n  509: • **resolveName**: (...`args`: [name: string \\| Promise<string\\>]) => `Promise`<`string`\\>\n  510  \n  511  #### Type declaration\n  512  \n  513: ▸ (...`args`): `Promise`<`string`\\>\n  514  \n  515  ##### Parameters\n  ...\n  517  | Name | Type |\n  518  | :------ | :------ |\n  519: | `...args` | [name: string \\| Promise<string\\>] |\n  520  \n  521  ##### Returns\n  522  \n  523: `Promise`<`string`\\>\n  524  \n  525  #### Implementation of\n  ...\n  535  ### <a id=\"sendtransaction\" name=\"sendtransaction\"></a> sendTransaction\n  536  \n  537: • **sendTransaction**: (...`args`: [signedTransaction: string \\| Promise<string\\>]) => `Promise`<`TransactionResponse`\\>\n  538  \n  539  #### Type declaration\n  540  \n  541: ▸ (...`args`): `Promise`<`TransactionResponse`\\>\n  542  \n  543  ##### Parameters\n  ...\n  545  | Name | Type |\n  546  | :------ | :------ |\n  547: | `...args` | [signedTransaction: string \\| Promise<string\\>] |\n  548  \n  549  ##### Returns\n  550  \n  551: `Promise`<`TransactionResponse`\\>\n  552  \n  553  #### Implementation of\n  ...\n  563  ### <a id=\"perform\" name=\"perform\"></a> perform\n  564  \n  565: ▸ **perform**(`method`, `params`): `Promise`<`any`\\>\n  566  \n  567  #### Parameters\n  ...\n  574  #### Returns\n  575  \n  576: `Promise`<`any`\\>\n  577  \n  578  #### Overrides\n\n~/Sandbox/hop/packages/sdk/docs/classes/Token.md:\n  302  ### <a id=\"getcontract\" name=\"getcontract\"></a> getContract\n  303  \n  304: • **getContract**: (`factory`: `Factory`, `address`: `string`, `provider`: [`TProvider`](../modules.md#tprovider)) => `Promise`<`any`\\> = `getContract`\n  305  \n  306  #### Type declaration\n  307  \n  308: ▸ (`factory`, `address`, `provider`): `Promise`<`any`\\>\n  309  \n  310  ##### Parameters\n  ...\n  318  ##### Returns\n  319  \n  320: `Promise`<`any`\\>\n  321  \n  322  #### Inherited from\n  ...\n  466  ### <a id=\"_getbonderaddress\" name=\"_getbonderaddress\"></a> \\_getBonderAddress\n  467  \n  468: ▸ `Protected` **_getBonderAddress**(`token`, `sourceChain`, `destinationChain`): `Promise`<`string`\\>\n  469  \n  470  #### Parameters\n  ...\n  478  #### Returns\n  479  \n  480: `Promise`<`string`\\>\n  481  \n  482  #### Inherited from\n  ...\n  488  ### <a id=\"_getmessengerwrapperaddress\" name=\"_getmessengerwrapperaddress\"></a> \\_getMessengerWrapperAddress\n  489  \n  490: ▸ `Protected` **_getMessengerWrapperAddress**(`token`, `destinationChain`): `Promise`<`string`\\>\n  491  \n  492  #### Parameters\n  ...\n  499  #### Returns\n  500  \n  501: `Promise`<`string`\\>\n  502  \n  503  #### Inherited from\n  ...\n  509  ### <a id=\"allowance\" name=\"allowance\"></a> allowance\n  510  \n  511: ▸ **allowance**(`spender`, `address?`): `Promise`<`any`\\>\n  512  \n  513  **`Desc`**\n  ...\n  538  #### Returns\n  539  \n  540: `Promise`<`any`\\>\n  541  \n  542  Ethers Transaction object.\n  ...\n  546  ### <a id=\"approve\" name=\"approve\"></a> approve\n  547  \n  548: ▸ **approve**(`spender`, `amount?`): `Promise`<`TransactionResponse`\\>\n  549  \n  550  **`Desc`**\n  ...\n  572  #### Returns\n  573  \n  574: `Promise`<`TransactionResponse`\\>\n  575  \n  576  Ethers Transaction object.\n  ...\n  580  ### <a id=\"balanceof\" name=\"balanceof\"></a> balanceOf\n  581  \n  582: ▸ **balanceOf**(`address?`): `Promise`<`BigNumber`\\>\n  583  \n  584  **`Desc`**\n  ...\n  604  #### Returns\n  605  \n  606: `Promise`<`BigNumber`\\>\n  607  \n  608  Ethers Transaction object.\n  ...\n  650  ### <a id=\"estimateoptimisml1feefromdata\" name=\"estimateoptimisml1feefromdata\"></a> estimateOptimismL1FeeFromData\n  651  \n  652: ▸ **estimateOptimismL1FeeFromData**(`gasLimit`, `data?`, `to?`): `Promise`<`any`\\>\n  653  \n  654  #### Parameters\n  ...\n  662  #### Returns\n  663  \n  664: `Promise`<`any`\\>\n  665  \n  666  #### Inherited from\n  ...\n  672  ### <a id=\"fetchconfigfroms3\" name=\"fetchconfigfroms3\"></a> fetchConfigFromS3\n  673  \n  674: ▸ **fetchConfigFromS3**(): `Promise`<`any`\\>\n  675  \n  676  #### Returns\n  677  \n  678: `Promise`<`any`\\>\n  679  \n  680  #### Inherited from\n  ...\n  721  ### <a id=\"getbumpedgasprice\" name=\"getbumpedgasprice\"></a> getBumpedGasPrice\n  722  \n  723: ▸ **getBumpedGasPrice**(`signer`, `percent`): `Promise`<`BigNumber`\\>\n  724  \n  725  **`Desc`**\n  ...\n  746  #### Returns\n  747  \n  748: `Promise`<`BigNumber`\\>\n  749  \n  750  Bumped as price as BigNumber\n  ...\n  873  ### <a id=\"geterc20\" name=\"geterc20\"></a> getErc20\n  874  \n  875: ▸ **getErc20**(): `Promise`<`any`\\>\n  876  \n  877  **`Desc`**\n  ...\n  881  #### Returns\n  882  \n  883: `Promise`<`any`\\>\n  884  \n  885  Ethers contract instance.\n  ...\n  963  ### <a id=\"getfeebps\" name=\"getfeebps\"></a> getFeeBps\n  964  \n  965: ▸ **getFeeBps**(`token`, `destinationChain`): `Promise`<`number`\\>\n  966  \n  967  #### Parameters\n  ...\n  974  #### Returns\n  975  \n  976: `Promise`<`number`\\>\n  977  \n  978  #### Inherited from\n  ...\n 1288  ### <a id=\"getnativetokenbalance\" name=\"getnativetokenbalance\"></a> getNativeTokenBalance\n 1289  \n 1290: ▸ **getNativeTokenBalance**(`address?`): `Promise`<`BigNumber`\\>\n 1291  \n 1292  #### Parameters\n ....\n 1298  #### Returns\n 1299  \n 1300: `Promise`<`BigNumber`\\>\n 1301  \n 1302  ___\n ....\n 1324  ### <a id=\"getrelayerfee\" name=\"getrelayerfee\"></a> getRelayerFee\n 1325  \n 1326: ▸ **getRelayerFee**(`destinationChain`, `tokenSymbol`): `Promise`<`BigNumber`\\>\n 1327  \n 1328  #### Parameters\n ....\n 1335  #### Returns\n 1336  \n 1337: `Promise`<`BigNumber`\\>\n 1338  \n 1339  #### Inherited from\n ....\n 1345  ### <a id=\"gets3configdata\" name=\"gets3configdata\"></a> getS3ConfigData\n 1346  \n 1347: ▸ **getS3ConfigData**(): `Promise`<`any`\\>\n 1348  \n 1349  #### Returns\n 1350  \n 1351: `Promise`<`any`\\>\n 1352  \n 1353  #### Inherited from\n ....\n 1359  ### <a id=\"getsigneraddress\" name=\"getsigneraddress\"></a> getSignerAddress\n 1360  \n 1361: ▸ **getSignerAddress**(): `Promise`<`string`\\>\n 1362  \n 1363  **`Desc`**\n ....\n 1377  #### Returns\n 1378  \n 1379: `Promise`<`string`\\>\n 1380  \n 1381  Ethers signer address.\n ....\n 1389  ### <a id=\"getsignerorprovider\" name=\"getsignerorprovider\"></a> getSignerOrProvider\n 1390  \n 1391: ▸ **getSignerOrProvider**(`chain`, `signer?`): `Promise`<`Provider` \\| `Signer`\\>\n 1392  \n 1393  **`Desc`**\n ....\n 1405  #### Returns\n 1406  \n 1407: `Promise`<`Provider` \\| `Signer`\\>\n 1408  \n 1409  Ethers signer or provider\n ....\n 1479  ### <a id=\"gettransferstatus\" name=\"gettransferstatus\"></a> getTransferStatus\n 1480  \n 1481: ▸ **getTransferStatus**(`transferIdOrTxHash`): `Promise`<`any`\\>\n 1482  \n 1483  #### Parameters\n ....\n 1489  #### Returns\n 1490  \n 1491: `Promise`<`any`\\>\n 1492  \n 1493  #### Inherited from\n ....\n 1519  ### <a id=\"getwethcontract\" name=\"getwethcontract\"></a> getWethContract\n 1520  \n 1521: ▸ **getWethContract**(): `Promise`<`any`\\>\n 1522  \n 1523  #### Returns\n 1524  \n 1525: `Promise`<`any`\\>\n 1526  \n 1527  ___\n ....\n 1529  ### <a id=\"getwraptokenestimatedgas\" name=\"getwraptokenestimatedgas\"></a> getWrapTokenEstimatedGas\n 1530  \n 1531: ▸ **getWrapTokenEstimatedGas**(`chain`): `Promise`<`any`\\>\n 1532  \n 1533  #### Parameters\n ....\n 1539  #### Returns\n 1540  \n 1541: `Promise`<`any`\\>\n 1542  \n 1543  ___\n ....\n 1555  ### <a id=\"init\" name=\"init\"></a> init\n 1556  \n 1557: ▸ **init**(): `Promise`<`void`\\>\n 1558  \n 1559  #### Returns\n 1560  \n 1561: `Promise`<`void`\\>\n 1562  \n 1563  #### Inherited from\n ....\n 1609  ### <a id=\"needsapproval\" name=\"needsapproval\"></a> needsApproval\n 1610  \n 1611: ▸ **needsApproval**(`spender`, `amount`, `address?`): `Promise`<`any`\\>\n 1612  \n 1613  #### Parameters\n ....\n 1621  #### Returns\n 1622  \n 1623: `Promise`<`any`\\>\n 1624  \n 1625  ___\n ....\n 1627  ### <a id=\"overrides\" name=\"overrides\"></a> overrides\n 1628  \n 1629: ▸ **overrides**(): `Promise`<`any`\\>\n 1630  \n 1631  #### Returns\n 1632  \n 1633: `Promise`<`any`\\>\n 1634  \n 1635  ___\n ....\n 1637  ### <a id=\"populateapprovetx\" name=\"populateapprovetx\"></a> populateApproveTx\n 1638  \n 1639: ▸ **populateApproveTx**(`spender`, `amount?`): `Promise`<`any`\\>\n 1640  \n 1641  #### Parameters\n ....\n 1648  #### Returns\n 1649  \n 1650: `Promise`<`any`\\>\n 1651  \n 1652  ___\n ....\n 1654  ### <a id=\"populateunwraptokentx\" name=\"populateunwraptokentx\"></a> populateUnwrapTokenTx\n 1655  \n 1656: ▸ **populateUnwrapTokenTx**(`amount`): `Promise`<`any`\\>\n 1657  \n 1658  #### Parameters\n ....\n 1664  #### Returns\n 1665  \n 1666: `Promise`<`any`\\>\n 1667  \n 1668  ___\n ....\n 1670  ### <a id=\"populatewraptokentx\" name=\"populatewraptokentx\"></a> populateWrapTokenTx\n 1671  \n 1672: ▸ **populateWrapTokenTx**(`amount`): `Promise`<`any`\\>\n 1673  \n 1674  #### Parameters\n ....\n 1680  #### Returns\n 1681  \n 1682: `Promise`<`any`\\>\n 1683  \n 1684  ___\n ....\n 1686  ### <a id=\"sendtransaction\" name=\"sendtransaction\"></a> sendTransaction\n 1687  \n 1688: ▸ **sendTransaction**(`transactionRequest`, `chain`): `Promise`<`TransactionResponse`\\>\n 1689  \n 1690  #### Parameters\n ....\n 1697  #### Returns\n 1698  \n 1699: `Promise`<`TransactionResponse`\\>\n 1700  \n 1701  #### Inherited from\n ....\n 1919  ### <a id=\"totalsupply\" name=\"totalsupply\"></a> totalSupply\n 1920  \n 1921: ▸ **totalSupply**(): `Promise`<`BigNumber`\\>\n 1922  \n 1923  #### Returns\n 1924  \n 1925: `Promise`<`BigNumber`\\>\n 1926  \n 1927  ___\n ....\n 1929  ### <a id=\"transfer\" name=\"transfer\"></a> transfer\n 1930  \n 1931: ▸ **transfer**(`recipient`, `amount`): `Promise`<`any`\\>\n 1932  \n 1933  **`Desc`**\n ....\n 1955  #### Returns\n 1956  \n 1957: `Promise`<`any`\\>\n 1958  \n 1959  Ethers Transaction object.\n ....\n 1963  ### <a id=\"txoverrides\" name=\"txoverrides\"></a> txOverrides\n 1964  \n 1965: ▸ **txOverrides**(`chain`): `Promise`<`any`\\>\n 1966  \n 1967  #### Parameters\n ....\n 1973  #### Returns\n 1974  \n 1975: `Promise`<`any`\\>\n 1976  \n 1977  #### Inherited from\n ....\n 1983  ### <a id=\"unwraptoken\" name=\"unwraptoken\"></a> unwrapToken\n 1984  \n 1985: ▸ **unwrapToken**(`amount`): `Promise`<`TransactionResponse`\\>\n 1986  \n 1987  #### Parameters\n ....\n 1993  #### Returns\n 1994  \n 1995: `Promise`<`TransactionResponse`\\>\n 1996  \n 1997  ___\n ....\n 1999  ### <a id=\"wraptoken\" name=\"wraptoken\"></a> wrapToken\n 2000  \n 2001: ▸ **wrapToken**(`amount`, `estimateGasOnly?`): `Promise`<`any`\\>\n 2002  \n 2003  #### Parameters\n ....\n 2010  #### Returns\n 2011  \n 2012: `Promise`<`any`\\>\n 2013  \n 2014  ___\n\n~/Sandbox/hop/packages/sdk/docs/modules/utils.md:\n   20  ### <a id=\"getblocknumberfromdate\" name=\"getblocknumberfromdate\"></a> getBlockNumberFromDate\n   21  \n   22: ▸ **getBlockNumberFromDate**(`chain`, `timestamp`): `Promise`<`number`\\>\n   23  \n   24  #### Parameters\n   ..\n   31  #### Returns\n   32  \n   33: `Promise`<`number`\\>\n   34  \n   35  ___\n   ..\n  101  ### <a id=\"promisetimeout\" name=\"promisetimeout\"></a> promiseTimeout\n  102  \n  103: ▸ **promiseTimeout**<`T`\\>(`promise`, `timeout`): `Promise`<`T`\\>\n  104  \n  105  #### Type parameters\n  ...\n  113  | Name | Type |\n  114  | :------ | :------ |\n  115: | `promise` | `Promise`<`T`\\> |\n  116  | `timeout` | `number` |\n  117  \n  118  #### Returns\n  119  \n  120: `Promise`<`T`\\>\n  121  \n  122  ___\n  ...\n  124  ### <a id=\"ratelimitretry\" name=\"ratelimitretry\"></a> rateLimitRetry\n  125  \n  126: ▸ **rateLimitRetry**<`FN`\\>(`fn`): (...`args`: `Parameters`<`FN`\\>) => `Promise`<`Awaited`<`ReturnType`<`FN`\\>\\>\\>\n  127  \n  128  #### Type parameters\n  ...\n  130  | Name | Type |\n  131  | :------ | :------ |\n  132: | `FN` | extends (...`args`: `any`[]) => `Promise`<`any`\\> |\n  133  \n  134  #### Parameters\n  ...\n  142  `fn`\n  143  \n  144: ▸ (...`args`): `Promise`<`Awaited`<`ReturnType`<`FN`\\>\\>\\>\n  145  \n  146  ##### Parameters\n  ...\n  152  ##### Returns\n  153  \n  154: `Promise`<`Awaited`<`ReturnType`<`FN`\\>\\>\\>\n  155  \n  156  ___\n  ...\n  192  ### <a id=\"wait\" name=\"wait\"></a> wait\n  193  \n  194: ▸ **wait**(`timeoutMs`): `Promise`<`unknown`\\>\n  195  \n  196  #### Parameters\n  ...\n  202  #### Returns\n  203  \n  204: `Promise`<`unknown`\\>\n  205  \n\n~/Sandbox/hop/packages/sdk/src/AMM.ts:\n  101      minToMint: TAmount = 0,\n  102      deadline: BigNumberish = this.defaultDeadlineSeconds\n  103:   ): Promise<TransactionResponse> {\n  104      const populatedTx = await this.populateAddLiquidityTx(amount0Desired, amount1Desired, minToMint, deadline)\n  105      return this.sendTransaction(populatedTx, this.chain)\n  ...\n  111      minToMint: TAmount = 0,\n  112      deadline: BigNumberish = this.defaultDeadlineSeconds\n  113:   ): Promise<any> {\n  114      deadline = this.normalizeDeadline(deadline)\n  115      const amounts = [amount0Desired, amount1Desired]\n  ...\n  149      amount1Min: TAmount = 0,\n  150      deadline: BigNumberish = this.defaultDeadlineSeconds\n  151:   ): Promise<TransactionResponse> {\n  152      const populatedTx = await this.populateRemoveLiquidityTx(liquidityTokenAmount, amount0Min, amount1Min, deadline)\n  153      return this.sendTransaction(populatedTx, this.chain)\n  ...\n  159      amount1Min: TAmount = 0,\n  160      deadline: BigNumberish = this.defaultDeadlineSeconds\n  161:   ): Promise<any> {\n  162      deadline = this.normalizeDeadline(deadline)\n  163      const saddleSwap = await this.getSaddleSwap()\n  ...\n  251      amount0: TAmount,\n  252      amount1: TAmount\n  253:   ): Promise<BigNumber> {\n  254      const amounts = [amount0, amount1]\n  255      const saddleSwap = await this.getSaddleSwap()\n  ...\n  328     * @returns {Object} Ethers contract instance.\n  329     */\n  330:   public async getSaddleSwap (): Promise<any> {\n  331      const saddleSwapAddress = this.getL2SaddleSwapAddress(\n  332        this.tokenSymbol,\n  ...\n  350    }\n  351  \n  352:   public async getYieldStatsForDay (unixTimestamp: number, days: number = 1): Promise<any> {\n  353      if (this.tokenSymbol === 'HOP') {\n  354        throw new Error('getYieldStatsForDay: Unsupported, there is no AMM for HOP token.')\n  ...\n  365      }\n  366  \n  367:     const [reserve0, reserve1, data] = await Promise.all([\n  368        saddleSwap.getTokenBalance(0, callOverrides),\n  369        saddleSwap.getTokenBalance(1, callOverrides),\n  ...\n  483      const token = this.toTokenModel(this.tokenSymbol)\n  484      const decimals = token.decimals\n  485:     const [virtualPrice, depositLpTokenAmount] = await Promise.all([\n  486        this.getVirtualPrice(),\n  487        this.calculateAddLiquidityMinimum(amount0, amount1)\n  ...\n  508      const token = this.toTokenModel(this.tokenSymbol)\n  509      const decimals = token.decimals\n  510:     const [virtualPrice, withdrawLpTokenAmount] = await Promise.all([\n  511        this.getVirtualPrice(),\n  512        this.calculateRemoveLiquidityMinimumLpTokens(amount0, amount1)\n  ...\n  599    public async getReserves () {\n  600      const saddleSwap = await this.getSaddleSwap()\n  601:     return Promise.all([\n  602        saddleSwap.getTokenBalance(0),\n  603        saddleSwap.getTokenBalance(1)\n\n~/Sandbox/hop/packages/sdk/src/Base.ts:\n   85    address: string,\n   86    provider: TProvider\n   87: ): Promise<any> => {\n   88    const p = provider as any\n   89    // memoize function doesn't handle dynamic provider object well, so\n   ..\n   91    const signerAddress = p?.getAddress ? await p?.getAddress() : ''\n   92    const chainId = p?.provider?._network?.chainId ?? ''\n   93:   await p?._networkPromise\n   94    const fallbackProviderChainId = p?._network?.chainId ?? p?.providers?.[0]?._network?.chainId ?? ''\n   95    const rpcUrl = getUrlFromProvider(p)\n   ..\n  460      chain: TChain,\n  461      signer: TProvider = this.signer as Signer\n  462:   ): Promise<Signer | providers.Provider> {\n  463      // console.log('getSignerOrProvider')\n  464      chain = this.toChainModel(chain)\n  ...\n  586    }\n  587  \n  588:   protected async _getBonderAddress (token: TToken, sourceChain: TChain, destinationChain: TChain): Promise<string> {\n  589      await this.fetchConfigFromS3()\n  590      token = this.toTokenModel(token)\n  ...\n  600    }\n  601  \n  602:   protected async _getMessengerWrapperAddress (token: TToken, destinationChain: TChain): Promise<string> {\n  603      await this.fetchConfigFromS3()\n  604      token = this.toTokenModel(token)\n  ...\n  640    }\n  641  \n  642:   public async getRelayerFee (destinationChain: TChain, tokenSymbol: string): Promise<BigNumber> {\n  643      await this.fetchConfigFromS3()\n  644      destinationChain = this.toChainModel(destinationChain)\n  ...\n  837    }\n  838  \n  839:   async getTransferStatus (transferIdOrTxHash: String):Promise<any> {\n  840      const baseApiUrl = this.network === 'goerli' ? 'https://goerli-explorer-api.hop.exchange' : 'https://explorer-api.hop.exchange'\n  841      const url = `${baseApiUrl}/v1/transfers?transferId=${transferIdOrTxHash}`\n  ...\n  848    }\n  849  \n  850:   async resolveDnslink (dnslinkDomain: string): Promise<string|null> {\n  851      let dns : any\n  852  \n  ...\n  859      try {\n  860        const timeoutMs = 5 * 10000\n  861:       const ipfsHash = await promiseTimeout(new Promise((resolve, reject) => {\n  862          dns.resolveTxt(dnslinkDomain, (err: any, records: any) => {\n  863            if (err) {\n\n~/Sandbox/hop/packages/sdk/src/HopBridge.ts:\n  328      }\n  329  \n  330:     const [availableLiquidity, requiredLiquidity] = await Promise.all([\n  331        this.getFrontendAvailableLiquidity(\n  332          sourceChain,\n  ...\n  357      destinationChain?: TChain,\n  358      options: Partial<SendOptions> = {}\n  359:   ):Promise<any> {\n  360      tokenAmount = BigNumber.from(tokenAmount.toString())\n  361      if (!sourceChain) {\n  ...\n  480      sourceChain = this.toChainModel(sourceChain)\n  481      const populatedTx = await this.populateSendTx(tokenAmount, sourceChain, destinationChain, options)\n  482:     const [estimatedGasLimit, gasPrice] = await Promise.all([\n  483        this.getEstimatedGasLimit(sourceChain, destinationChain, populatedTx),\n  484        sourceChain.provider.getGasPrice()\n  ...\n  520      sourceChain: TChain,\n  521      isHTokenTransfer: boolean = false\n  522:   ):Promise<any> {\n  523      sourceChain = this.toChainModel(sourceChain)\n  524      const spender = await this.getSendApprovalAddress(sourceChain, isHTokenTransfer)\n  ...\n  581      destinationChain: TChain,\n  582      options: Partial<SendOptions> = {}\n  583:   ):Promise<any> {\n  584      if (!sourceChain) {\n  585        throw new Error('source chain is required')\n  ...\n  742    }\n  743  \n  744:   async getTokenBalance (chain: TChain, address?: string):Promise<BigNumber> {\n  745      const token = this.getCanonicalToken(chain)\n  746      return token.balanceOf(address)\n  ...\n  758      destinationChain = this.toChainModel(destinationChain)\n  759  \n  760:     const [hTokenAmount, lpFees, feeBps] = await Promise.all([\n  761        this.calcToHTokenAmount(amountIn, sourceChain),\n  762        this.getLpFees(amountIn, sourceChain, destinationChain),\n  ...\n  764      ])\n  765  \n  766:     const calcFromHTokenPromise = this.calcFromHTokenAmount(\n  767        hTokenAmount,\n  768        destinationChain\n  769      )\n  770  \n  771:     const amountOutWithoutFeePromise = calcFromHTokenPromise\n  772  \n  773      const amountInNoSlippage = BigNumber.from(1000)\n  774:     const amountOutNoSlippagePromise = this.getAmountOut(\n  775        amountInNoSlippage,\n  776        sourceChain,\n  ...\n  778      )\n  779  \n  780:     const bonderFeeRelativePromise = this.getBonderFeeRelative(\n  781        amountIn,\n  782        sourceChain,\n  ...\n  784      )\n  785  \n  786:     const destinationTxFeeDataPromise = this.getDestinationTransactionFeeData(\n  787        sourceChain,\n  788        destinationChain\n  ...\n  795        destinationTxFeeData,\n  796        amountOut\n  797:     ] = await Promise.all([\n  798:       amountOutWithoutFeePromise,\n  799:       amountOutNoSlippagePromise,\n  800:       bonderFeeRelativePromise,\n  801:       destinationTxFeeDataPromise,\n  802:       calcFromHTokenPromise\n  803      ])\n  804  \n  ...\n  823        } else {\n  824          // adjusted fee is the fee in the canonical token after adjusting for the hToken price\n  825:         ;([adjustedBonderFee, adjustedDestinationTxFee] = await Promise.all([\n  826            this.calcFromHTokenAmount(\n  827              bonderFeeRelative,\n  ...\n  913      let amountOutNoSlippage : BigNumber\n  914      if (isToHToken) {\n  915:       ;([amountOut, amountOutNoSlippage] = await Promise.all([\n  916          this.calcToHTokenAmount(amountIn, chain),\n  917          this.calcToHTokenAmount(\n  ...\n  921        ]))\n  922      } else {\n  923:       ;([amountOut, amountOutNoSlippage] = await Promise.all([\n  924          this.calcFromHTokenAmount(amountIn, chain),\n  925          this.calcFromHTokenAmount(\n  ...\n  963      sourceChain: TChain,\n  964      destinationChain: TChain\n  965:   ): Promise<BigNumber> {\n  966      const { totalFee } = await this.getSendData(\n  967        amountIn,\n  ...\n  977      sourceChain: TChain,\n  978      destinationChain: TChain\n  979:   ): Promise<BigNumber> {\n  980      sourceChain = this.toChainModel(sourceChain)\n  981      destinationChain = this.toChainModel(destinationChain)\n  ...\n  998      sourceChain: TChain,\n  999      destinationChain: TChain\n 1000:   ): Promise<BigNumber> {\n 1001      sourceChain = this.toChainModel(sourceChain)\n 1002      destinationChain = this.toChainModel(destinationChain)\n ....\n 1009      sourceChain: TChain,\n 1010      destinationChain: TChain\n 1011:   ): Promise<any> {\n 1012      sourceChain = this.toChainModel(sourceChain)\n 1013      destinationChain = this.toChainModel(destinationChain)\n ....\n 1025      const canonicalToken = this.getCanonicalToken(sourceChain)\n 1026      const chainNativeToken = this.getChainNativeToken(destinationChain)\n 1027:     const [chainNativeTokenPrice, tokenPrice, destinationChainGasPrice, bondTransferGasLimit, l1FeeInWei] = await Promise.all([\n 1028        this.priceFeed.getPriceByTokenSymbol(\n 1029          chainNativeToken.symbol\n ....\n 1037          destinationChain\n 1038        ),\n 1039:       destinationChain.equals(Chain.Optimism) ? this.getOptimismL1Fee(sourceChain, destinationChain) : Promise.resolve(BigNumber.from(0))\n 1040      ])\n 1041  \n ....\n 1091    ) {\n 1092      try {\n 1093:       const [gasLimit, { data, to }] = await Promise.all([\n 1094          this.estimateBondWithdrawalGasLimit(sourceChain, destinationChain),\n 1095          this.populateBondWithdrawalTx(sourceChain, destinationChain)\n ....\n 1107      destinationChain: TChain,\n 1108      recipient: string\n 1109:   ): Promise<any> {\n 1110      sourceChain = this.toChainModel(sourceChain)\n 1111      destinationChain = this.toChainModel(destinationChain)\n ....\n 1148      sourceChain: TChain,\n 1149      destinationChain: TChain\n 1150:   ): Promise<any> {\n 1151      destinationChain = this.toChainModel(destinationChain)\n 1152      try {\n ....\n 1174      destinationChain: TChain,\n 1175      recipient?: string\n 1176:   ): Promise<any> {\n 1177      destinationChain = this.toChainModel(destinationChain)\n 1178      let destinationBridge\n ....\n 1280      tokenAmountIn: TAmount,\n 1281      sourceChain: TChain\n 1282:   ): Promise<BigNumber> {\n 1283      tokenAmountIn = BigNumber.from(tokenAmountIn.toString())\n 1284      sourceChain = this.toChainModel(sourceChain)\n ....\n 1299      destinationChain: TChain,\n 1300      bonder: string\n 1301:   ): Promise<BigNumber> {\n 1302:     const [credit, debit] = await Promise.all([\n 1303        this.getCredit(destinationChain, bonder),\n 1304        this.getTotalDebit(destinationChain, bonder)\n ....\n 1318      sourceChain: TChain,\n 1319      destinationChain: TChain\n 1320:   ): Promise<BigNumber> {\n 1321      if (!(this.isSupportedAsset(sourceChain) && this.isSupportedAsset(destinationChain))) {\n 1322        return BigNumber.from(0)\n ....\n 1327      const token = this.toTokenModel(this.tokenSymbol)\n 1328      const bonder = await this.getBonderAddress(sourceChain, destinationChain)\n 1329:     let [availableLiquidity, unbondedTransferRootAmount, tokenPrice] = await Promise.all([\n 1330        this.getBaseAvailableCreditIncludingVault(\n 1331          sourceChain,\n ....\n 1346      if (destinationChain.isL1) {\n 1347        let pendingAmounts = BigNumber.from(0)\n 1348:       await Promise.all(bondableChains.map(async (bondableChain: string) => {\n 1349          let validChain = false\n 1350          try {\n ....\n 1443      destinationChain: TChain,\n 1444      bonder: string\n 1445:   ): Promise<BigNumber> {\n 1446      destinationChain = this.toChainModel(destinationChain)\n 1447      try {\n ....\n 1484      sourceChain: TChain,\n 1485      bonder: string\n 1486:   ): Promise<BigNumber> {\n 1487      const bridge = await this.getBridgeContract(sourceChain)\n 1488      return bridge.getCredit(bonder)\n ....\n 1497      sourceChain: TChain,\n 1498      bonder: string\n 1499:   ): Promise<BigNumber> {\n 1500      const bridge = await this.getBridgeContract(sourceChain)\n 1501      return bridge.getDebitAndAdditionalDebit(bonder)\n ....\n 1510      sourceChain: TChain,\n 1511      bonder: string\n 1512:   ): Promise<BigNumber> {\n 1513      const bridge = await this.getBridgeContract(sourceChain)\n 1514      return bridge.getRawDebit(bonder)\n ....\n 1581     * @returns {Object} Ethers contract instance.\n 1582     */\n 1583:   public async getL1Bridge (signer: TProvider = this.signer): Promise<any> {\n 1584      const bridgeAddress = this.getL1BridgeAddress(\n 1585        this.tokenSymbol,\n ....\n 1599     * @returns {Object} Ethers contract instance.\n 1600     */\n 1601:   public async getL2Bridge (chain: TChain, signer: TProvider = this.signer): Promise<any> {\n 1602      chain = this.toChainModel(chain)\n 1603      const bridgeAddress = this.getL2BridgeAddress(this.tokenSymbol, chain)\n ....\n 1627     * @returns {Object} Ethers contract instance.\n 1628     */\n 1629:   public async getAmmWrapper (chain: TChain, signer: TProvider = this.signer): Promise<any> {\n 1630      chain = this.toChainModel(chain)\n 1631      const ammWrapperAddress = this.getL2AmmWrapperAddress(\n ....\n 1651      const amm = this.getAmm(chain)\n 1652      const saddleSwap = await amm.getSaddleSwap()\n 1653:     return Promise.all([\n 1654        saddleSwap.getTokenBalance(0),\n 1655        saddleSwap.getTokenBalance(1)\n ....\n 1666    }\n 1667  \n 1668:   public async getTvlUsd (chain: TChain = this.sourceChain): Promise<number> {\n 1669      const token = this.toTokenModel(this.tokenSymbol)\n 1670:     const [tvl, tokenPrice] = await Promise.all([\n 1671        this.getTvl(chain),\n 1672        this.priceFeed.getPriceByTokenSymbol(token.canonicalSymbol)\n ....\n 1873     * @returns {Object} Time slot for the given time as BigNumber.\n 1874     */\n 1875:   public async getTimeSlot (time: TTime): Promise<BigNumber> {\n 1876      const bridge = await this.getL1Bridge()\n 1877      time = BigNumber.from(time.toString())\n ....\n 1885     * @returns {Object} The challenge period for the bridge as BigNumber.\n 1886     */\n 1887:   public async challengePeriod (): Promise<BigNumber> {\n 1888      const bridge = await this.getL1Bridge()\n 1889  \n ....\n 1896     * @returns {Object} The size of the time slots for the bridge as BigNumber.\n 1897     */\n 1898:   public async timeSlotSize (): Promise<BigNumber> {\n 1899      const bridge = await this.getL1Bridge()\n 1900  \n ....\n 1913      timeSlot: TTimeSlot,\n 1914      bonder: string\n 1915:   ): Promise<BigNumber> {\n 1916      const bridge = await this.getL1Bridge()\n 1917      timeSlot = BigNumber.from(timeSlot.toString())\n ....\n 2204      amount: TAmount,\n 2205      chain: Chain\n 2206:   ): Promise<BigNumber> {\n 2207      if (!this.doesUseAmm) {\n 2208        return BigNumber.from(amount)\n ....\n 2230      amount: TAmount,\n 2231      chain: Chain\n 2232:   ): Promise<BigNumber> {\n 2233      if (!this.doesUseAmm) {\n 2234        return BigNumber.from(amount)\n ....\n 2276    }\n 2277  \n 2278:   public async getBonderFeeAbsolute (sourceChain: TChain): Promise<BigNumber> {\n 2279      sourceChain = this.toChainModel(sourceChain)\n 2280      const token = this.toTokenModel(this.tokenSymbol)\n 2281  \n 2282:     let onChainBonderFeeAbsolutePromise : any\n 2283      if (token.canonicalSymbol === TokenModel.ETH) {\n 2284        if (Chain.Gnosis.equals(sourceChain) || Chain.Polygon.equals(sourceChain)) {\n 2285          const l2Bridge = await this.getL2Bridge(sourceChain)\n 2286:         onChainBonderFeeAbsolutePromise = l2Bridge.minBonderFeeAbsolute()\n 2287        }\n 2288      }\n 2289  \n 2290:     const [tokenPrice, onChainBonderFeeAbsolute] = await Promise.all([\n 2291        this.priceFeed.getPriceByTokenSymbol(token.canonicalSymbol),\n 2292:       onChainBonderFeeAbsolutePromise ?? Promise.resolve(BigNumber.from(0))\n 2293      ])\n 2294      const minBonderFeeUsd = 0.25\n ....\n 2335  \n 2336    // Gnosis AMB bridge\n 2337:   async getAmbBridge (chain: TChain): Promise<any> {\n 2338      chain = this.toChainModel(chain)\n 2339      if (chain.equals(Chain.Ethereum)) {\n ....\n 2379    }\n 2380  \n 2381:   async getBonderAddress (sourceChain: TChain, destinationChain: TChain): Promise<string> {\n 2382      return await this._getBonderAddress(this.tokenSymbol, sourceChain, destinationChain)\n 2383    }\n 2384  \n 2385:   async getMessengerWrapperAddress (destinationChain: TChain): Promise<string> {\n 2386      return await this._getMessengerWrapperAddress(this.tokenSymbol, destinationChain)\n 2387    }\n ....\n 2530    async getAccountLpCanonicalBalanceUsd (chain: TChain, account?: string) {\n 2531      const token = this.toTokenModel(this.tokenSymbol)\n 2532:     const [balance, tokenPrice] = await Promise.all([\n 2533        this.getAccountLpCanonicalBalance(chain, account),\n 2534        this.priceFeed.getPriceByTokenSymbol(token.canonicalSymbol)\n ....\n 2545    }\n 2546  \n 2547:   private async getRelayFeeEth (sourceChain: Chain, destinationChain: Chain): Promise<BigNumber> {\n 2548      if (this.network === NetworkSlug.Goerli) {\n 2549        if (sourceChain.isL1) {\n ....\n 2559    }\n 2560  \n 2561:   private async getConsenSysZkRelayFee (sourceChain: Chain, destinationChain: Chain): Promise<BigNumber> {\n 2562      if (this.network === NetworkSlug.Goerli) {\n 2563        if (sourceChain.isL1) {\n ....\n 2574    }\n 2575  \n 2576:   private async getScrollZkRelayFee (sourceChain: Chain, destinationChain: Chain): Promise<BigNumber> {\n 2577      if (this.network === NetworkSlug.Goerli) {\n 2578        if (sourceChain.isL1) {\n\n~/Sandbox/hop/packages/sdk/src/Token.ts:\n  131     *```\n  132     */\n  133:   public async balanceOf (address?: string): Promise<BigNumber> {\n  134      if (this.isNativeToken) {\n  135        return this.getNativeTokenBalance(address)\n  ...\n  189      amount: TAmount = ethers.constants.MaxUint256\n  190    ) {\n  191:     const [populatedTx, allowance] = await Promise.all([\n  192        this.populateApproveTx(spender, amount),\n  193        this.allowance(spender)\n  ...\n  201      spender: string,\n  202      amount: TAmount = ethers.constants.MaxUint256\n  203:   ):Promise<any> {\n  204      if (this.isNativeToken) {\n  205        return\n  ...\n  214     * @returns {Object} Ethers contract instance.\n  215     */\n  216:   public async getErc20 (): Promise<any> {\n  217      if (this.isNativeToken) {\n  218        return this.getWethContract()\n  ...\n  264    }\n  265  \n  266:   public async getNativeTokenBalance (address?: string): Promise<BigNumber> {\n  267      address = address ?? await this.getSignerAddress()\n  268      if (!address) {\n  ...\n  272    }\n  273  \n  274:   async getWethContract (): Promise<any> {\n  275      const provider = await this.getSignerOrProvider(this.chain)\n  276      return WETH9__factory.connect(this.address, provider)\n  ...\n  335      // a `from` address is required if using only provider (not signer)\n  336      const from = await this.getGasEstimateFromAddress()\n  337:     const [gasLimit, tx] = await Promise.all([\n  338        contract.connect(this.chain.provider).estimateGas.deposit({\n  339          value: amount,\n  ...\n  360    }\n  361  \n  362:   public async totalSupply (): Promise<BigNumber> {\n  363      if (this.isNativeToken) {\n  364        return BigNumber.from(0)\n\n~/Sandbox/hop/packages/sdk/src/priceFeed/Coinbase.ts:\n    4    private readonly _baseUrl: string = 'https://api.pro.coinbase.com'\n    5  \n    6:   public getPriceByTokenSymbol = async (symbol: string, base: string = 'USD'): Promise<number> => {\n    7      // pair \"USDC-USD\" doesn't exist so just return $1\n    8      if (symbol === 'USDC') {\n\n~/Sandbox/hop/packages/sdk/src/priceFeed/PriceFeed.ts:\n    3  \n    4  const cache: {\n    5:   [tokenSymbol: string]: Promise<any>\n    6  } = {}\n    7  \n    .\n   15  \n   16  interface Service {\n   17:   getPriceByTokenSymbol(symbol: string): Promise<number>\n   18  }\n   19  \n\n~/Sandbox/hop/packages/sdk/src/provider/IProvider.ts:\n    3  \n    4  export interface IProvider extends providers.Provider {\n    5:   getAvatar?: (nameOrAddress: string) => Promise<string>\n    6:   getResolver?: (nameOrAddress: string) => Promise<string>\n    7:   detectNetwork?: () => Promise<Network>\n    8    connection?: any\n    9  }\n\n~/Sandbox/hop/packages/sdk/src/provider/Provider.ts:\n   10  \n   11  export class RetryProvider extends providers.StaticJsonRpcProvider implements providers.Provider {\n   12:   async perform (method: string, params: any): Promise<any> {\n   13      return await super.perform(method, params)\n   14    }\n   15  \n   16    // Network\n   17:   getNetwork = rateLimitRetry(async (): Promise<Network> => {\n   18      return super.getNetwork()\n   19    })\n   20  \n   21    // Latest State\n   22:   getBlockNumber = rateLimitRetry(async (): Promise<number> => {\n   23      return super.getBlockNumber()\n   24    })\n   25  \n   26:   getGasPrice = rateLimitRetry(async (): Promise<BigNumber> => {\n   27      return super.getGasPrice()\n   28    })\n   29  \n   30    // Account\n   31:   getBalance = rateLimitRetry(async (addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> => {\n   32      return super.getBalance(addressOrName, blockTag)\n   33    })\n   34  \n   35:   getTransactionCount = rateLimitRetry(async (addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> => {\n   36      return super.getTransactionCount(addressOrName, blockTag)\n   37    })\n   38  \n   39:   getCode = rateLimitRetry(async (addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> => {\n   40      return super.getCode(addressOrName, blockTag)\n   41    })\n   42  \n   43:   getStorageAt = rateLimitRetry(async (addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> => {\n   44      return super.getStorageAt(addressOrName, position, blockTag)\n   45    })\n   46  \n   47    // Execution\n   48:   sendTransaction = rateLimitRetry(async (signedTransaction: string | Promise<string>): Promise<TransactionResponse> => {\n   49      return super.sendTransaction(signedTransaction)\n   50    })\n   51  \n   52:   call = rateLimitRetry(async (transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> => {\n   53      return super.call(transaction, blockTag)\n   54    })\n   55  \n   56:   estimateGas = rateLimitRetry(async (transaction: Deferrable<TransactionRequest>): Promise<BigNumber> => {\n   57      return super.estimateGas(transaction)\n   58    })\n   59  \n   60    // Queries\n   61:   getBlock = rateLimitRetry(async (blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> => {\n   62      return super.getBlock(blockHashOrBlockTag)\n   63    })\n   64  \n   65:   getBlockWithTransactions = rateLimitRetry(async (blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> => {\n   66      return super.getBlockWithTransactions(blockHashOrBlockTag)\n   67    })\n   68  \n   69:   getTransaction = rateLimitRetry(async (transactionHash: string | Promise<string>): Promise<TransactionResponse> => {\n   70      return super.getTransaction(transactionHash)\n   71    })\n   72  \n   73:   getTransactionReceipt = rateLimitRetry(async (transactionHash: string | Promise<string>): Promise<TransactionReceipt> => {\n   74      return super.getTransactionReceipt(transactionHash)\n   75    })\n   76  \n   77    // Bloom-filter Queries\n   78:   getLogs = rateLimitRetry(async (filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Log[]> => {\n   79      return super.getLogs(filter)\n   80    })\n   81  \n   82    // ENS\n   83:   resolveName = rateLimitRetry(async (name: string | Promise<string>): Promise<null | string> => {\n   84      return super.resolveName(name)\n   85    })\n   86  \n   87:   lookupAddress = rateLimitRetry(async (address: string | Promise<string>): Promise<null | string> => {\n   88      return super.lookupAddress(address)\n   89    })\n   90  \n   91:   getAvatar = rateLimitRetry(async (nameOrAddress: string): Promise<string> => {\n   92      return super.getAvatar(nameOrAddress)\n   93    })\n   ..\n  147  \n  148    // Network\n  149:   getNetwork = async (): Promise<Network> => {\n  150      return this.tryProvider(() => this.getActiveProvider().getNetwork())\n  151    }\n  152  \n  153    // Latest State\n  154:   getBlockNumber = async (): Promise<number> => {\n  155      return this.tryProvider(() => this.getActiveProvider().getBlockNumber())\n  156    }\n  157  \n  158:   getGasPrice = async (): Promise<BigNumber> => {\n  159      return this.tryProvider(() => this.getActiveProvider().getGasPrice())\n  160    }\n  161  \n  162    // Account\n  163:   getBalance = async (addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> => {\n  164      return this.tryProvider(() => this.getActiveProvider().getBalance(addressOrName, blockTag))\n  165    }\n  166  \n  167:   getTransactionCount = async (addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> => {\n  168      return this.tryProvider(() => this.getActiveProvider().getTransactionCount(addressOrName, blockTag))\n  169    }\n  170  \n  171:   getCode = async (addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> => {\n  172      return this.tryProvider(() => this.getActiveProvider().getCode(addressOrName, blockTag))\n  173    }\n  174  \n  175:   getStorageAt = async (addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> => {\n  176      return this.tryProvider(() => this.getActiveProvider().getStorageAt(addressOrName, position, blockTag))\n  177    }\n  178  \n  179    // Execution\n  180:   sendTransaction = async (signedTransaction: string | Promise<string>): Promise<TransactionResponse> => {\n  181      return this.tryProvider(() => this.getActiveProvider().sendTransaction(signedTransaction))\n  182    }\n  183  \n  184:   call = async (transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> => {\n  185      return this.tryProvider(() => this.getActiveProvider().call(transaction, blockTag))\n  186    }\n  187  \n  188:   estimateGas = async (transaction: Deferrable<TransactionRequest>): Promise<BigNumber> => {\n  189      return this.tryProvider(() => this.getActiveProvider().estimateGas(transaction))\n  190    }\n  191  \n  192    // Queries\n  193:   getBlock = async (blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> => {\n  194      return this.tryProvider(() => this.getActiveProvider().getBlock(blockHashOrBlockTag))\n  195    }\n  196  \n  197:   getBlockWithTransactions = async (blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> => {\n  198      return this.tryProvider(() => this.getActiveProvider().getBlockWithTransactions(blockHashOrBlockTag))\n  199    }\n  200  \n  201:   getTransaction = async (transactionHash: string): Promise<TransactionResponse> => {\n  202      return this.tryProvider(() => this.getActiveProvider().getTransaction(transactionHash))\n  203    }\n  204  \n  205:   getTransactionReceipt = async (transactionHash: string): Promise<TransactionReceipt> => {\n  206      return this.tryProvider(() => this.getActiveProvider().getTransactionReceipt(transactionHash))\n  207    }\n  208  \n  209    // Bloom-filter Queries\n  210:   getLogs = async (filter: Filter | FilterByBlockHash): Promise<Log[]> => {\n  211      return this.tryProvider(() => this.getActiveProvider().getLogs(filter))\n  212    }\n  213  \n  214    // ENS\n  215:   resolveName = async (name: string | Promise<string>): Promise<null | string> => {\n  216      return this.tryProvider(() => this.getActiveProvider().resolveName(name))\n  217    }\n  218  \n  219:   lookupAddress = async (address: string | Promise<string>): Promise<null | string> => {\n  220      return this.tryProvider(() => this.getActiveProvider().lookupAddress(address))\n  221    }\n  222  \n  223:   getFeeData (): Promise<any> {\n  224      return this.tryProvider(() => this.getActiveProvider().getFeeData())\n  225    }\n  226  \n  227:   waitForTransaction (transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n  228      return this.getActiveProvider().waitForTransaction(transactionHash, confirmations, timeout)\n  229    }\n  ...\n  271    }\n  272  \n  273:   getAvatar (address: string): Promise<string> {\n  274      return this.tryProvider(() => (this.getActiveProvider() as any).getAvatar(address))\n  275    }\n  276  \n  277:   async detectNetwork (): Promise<Network> {\n  278      return this.tryProvider(() => (this.getActiveProvider() as any).detectNetwork())\n  279    }\n  280  \n  281:   getResolver (address: string): Promise<string> {\n  282      return this.tryProvider(() => (this.getActiveProvider() as any).getResolver(address))\n  283    }\n\n~/Sandbox/hop/packages/sdk/src/relayerFee/ArbitrumRelayerFee.ts:\n   17    }\n   18  \n   19:   async getRelayCost (): Promise<BigNumber> {\n   20      const arbitrumRpcUrl = config.chains[this.network][this.chain].rpcUrl\n   21      const provider = getProviderFromUrl(arbitrumRpcUrl)\n   ..\n   64    }\n   65  \n   66:   private async _getEncodedGasInfo (): Promise<string> {\n   67      const abi = ['function getPricesInWei()']\n   68      const ethersInterface = new ethersUtils.Interface(abi)\n   ..\n   74    }\n   75  \n   76:   private async _getEncodedDistributeData (): Promise<string> {\n   77      // Do not use the zero address since some ERC20 tokens throw when sending to the zero address\n   78      const recipient = '0x0000000000000000000000000000000000000001'\n   ..\n   99    }\n  100  \n  101:   private async _getEncodedEstimateRetryableTicketData (encodedDistributeData: string): Promise<string> {\n  102      // The alias address on Arbitrum needs to have enough funds to cover the tx in order for this to work\n  103      const messengerWrapperAddress = this._getMessengerWrapperAddress()\n\n~/Sandbox/hop/packages/sdk/src/relayerFee/IRelayerFee.ts:\n    2  \n    3  export interface IRelayerFee {\n    4:   getRelayCost(chain: string): Promise<BigNumber>\n    5  }\n    6  \n\n~/Sandbox/hop/packages/sdk/src/relayerFee/RelayerFee.ts:\n   13    }\n   14  \n   15:   async getRelayCost (chainSlug: string): Promise<BigNumber> {\n   16      return this.relayerFee[chainSlug].getRelayCost()\n   17    }\n\n~/Sandbox/hop/packages/sdk/src/utils/getBlockNumberFromDate.ts:\n    5  import { fetchJsonOrThrow } from './fetchJsonOrThrow'\n    6  \n    7: export async function getBlockNumberFromDate (chain: Chain, timestamp: number): Promise<number> {\n    8    const chainSlug = chain.slug\n    9    const chainProvider = chain.provider\n   ..\n   16  }\n   17  \n   18: async function getBlockNumberFromDateUsingEtherscan (chain: string, timestamp: number): Promise<number> {\n   19    const apiKey = etherscanApiKeys[chain]\n   20    if (!apiKey) {\n   ..\n   33  }\n   34  \n   35: async function getBlockNumberFromDateUsingLib (provider: any, timestamp: number): Promise<number> {\n   36    const blockDater = new BlockDater(provider)\n   37    const date = DateTime.fromSeconds(timestamp).toJSDate()\n\n~/Sandbox/hop/packages/sdk/src/utils/promiseTimeout.ts:\n    1  class TimeoutError extends Error {}\n    2  \n    3: export async function promiseTimeout<T> (promise: Promise<T>, timeout: number): Promise<T> {\n    4:   return await new Promise(async (resolve, reject) => {\n    5      let timedout = false\n    6      const t = setTimeout(() => {\n    .\n   10  \n   11      // make it a promise if it's not one\n   12:     Promise.resolve(promise)\n   13        .then((result: any) => {\n   14          clearTimeout(t)\n\n~/Sandbox/hop/packages/sdk/src/utils/rateLimitRetry.ts:\n    3  import { rateLimitMaxRetries, rpcTimeoutSeconds } from '../config'\n    4  \n    5: export function rateLimitRetry<FN extends (...args: any[]) => Promise<any>> (fn: FN): (...args: Parameters<FN>) => Promise<Awaited<ReturnType<FN>>> {\n    6    const id = `${Date.now()}`\n    7    const logPrefix = `ratelimitRetry-${id}`\n    8:   return async (...args: Parameters<FN>): Promise<Awaited<ReturnType<FN>>> => {\n    9      let retries = 0\n   10      const retry = () => promiseTimeout(fn(...args), rpcTimeoutSeconds * 1000) // eslint-disable-line\n\n~/Sandbox/hop/packages/sdk/src/utils/wait.ts:\n    1  // wait util will wait specified amount of time in milliseconds\n    2  export const wait = async (timeoutMs: number) => {\n    3:   return new Promise(resolve => setTimeout(() => resolve(null), timeoutMs))\n    4  }\n    5  \n\n~/Sandbox/hop/packages/sdk/src/watchers/CanonicalL1ToL2Watcher.ts:\n   16    }\n   17  \n   18:   public async pollFn (): Promise<any> {\n   19      if (this.destinationChain.equals(Chain.Gnosis)) {\n   20        return this.gnosisWatcher()\n\n~/Sandbox/hop/packages/sdk/src/watchers/CanonicalL2ToL1Watcher.ts:\n   17    }\n   18  \n   19:   public async pollFn (): Promise<any> {\n   20      if (this.sourceChain.equals(Chain.Gnosis)) {\n   21        return this.gnosisWatcher()\n\n~/Sandbox/hop/packages/sdk/src/watchers/L1ToL2Watcher.ts:\n   20    }\n   21  \n   22:   public async pollFn (): Promise<any> {\n   23      const destWrapper = await this.bridge.getAmmWrapper(this.destinationChain)\n   24      const l1Bridge = await this.bridge.getL1Bridge()\n\n~/Sandbox/hop/packages/sdk/src/watchers/L2ToL1Watcher.ts:\n   14    }\n   15  \n   16:   public async pollFn (): Promise<any> {\n   17      const l1Bridge = await this.bridge.getL1Bridge()\n   18      let transferHash: string = ''\n\n~/Sandbox/hop/packages/sdk/src/watchers/L2ToL2Watcher.ts:\n   15    }\n   16  \n   17:   public async pollFn (): Promise<any> {\n   18      const destBridge = await this.bridge.getL2Bridge(this.destinationChain)\n   19      let transferHash: string = ''\n\n~/Sandbox/hop/packages/sdk/test/sdk.test.ts:\n   82        console.log('tx hash:', txHash)\n   83  \n   84:       const res = await new Promise(resolve => {\n   85          let sourceReceipt: any = null\n   86          let destinationReceipt: any = null\n   ..\n  121        console.log('waiting for receipts')\n  122  \n  123:       const res = await new Promise(resolve => {\n  124          let sourceReceipt: any = null\n  125          let destinationReceipt: any = null\n  ...\n  157        console.log('tx hash:', txHash)\n  158  \n  159:       const res = await new Promise(resolve => {\n  160          let sourceReceipt: any = null\n  161          let destinationReceipt: any = null\n  ...\n  201        console.log('tx hash:', txHash)\n  202  \n  203:       const res = await new Promise(resolve => {\n  204          let sourceReceipt: any = null\n  205          let destinationReceipt: any = null\n  ...\n  245          '0x152348cfaf5344668191859ab95d858d31fd347f807c615e26e027b61fd976f3'\n  246  \n  247:       const res = await new Promise(resolve => {\n  248          let sourceReceipt: any = null\n  249          let destinationReceipt: any = null\n  ...\n  295        console.log('tx hash:', txHash)\n  296  \n  297:       const res = await new Promise(resolve => {\n  298          let sourceReceipt: any = null\n  299          let destinationReceipt: any = null\n\n~/Sandbox/hop/packages/stats-worker/src/AmmStats.ts:\n  275          }\n  276        }\n  277:       await Promise.all(promises)\n  278      }\n  279    }\n\n~/Sandbox/hop/packages/stats-worker/src/BonderStats.ts:\n   49  \n   50  const wait = (t: number) =>\n   51:   new Promise(resolve => setTimeout(() => resolve(null), t))\n   52  \n   53  const allProviders: Record<string, any> = {\n   ..\n  169        for (const chunks of allChunks) {\n  170          csv.push(\n  171:           ...(await Promise.all(\n  172              chunks.map(async (day: number) => {\n  173                return this.trackBonderFeeDay(day, token)\n  ...\n  250            await this.trackBonderFee()\n  251          } else {\n  252:           await Promise.all([\n  253              this.trackProfit(),\n  254              this.trackBonderFee(),\n  ...\n  717        for (const chunks of allChunks) {\n  718          csv.push(\n  719:           ...(await Promise.all(\n  720              chunks.map(async (day: number) => {\n  721                return this.trackProfitDay(day, token, prices)\n  ...\n  755          const bonderBalances: any = {}\n  756          const dbData: any = {}\n  757:         const chainPromises: any[] = []\n  758  \n  759          for (const sourceChain in bonderMap) {\n  ...\n  761              const chain = destinationChain\n  762  \n  763:             chainPromises.push(\n  764:               new Promise(async (resolve, reject) => {\n  765                  try {\n  766                    let provider = allProviders[chain]\n  ...\n  808                    )\n  809  \n  810:                   const balancePromises: Promise<any>[] = []\n  811                    if (tokenAddress !== constants.AddressZero) {\n  812:                     balancePromises.push(\n  813                        tokenContract.balanceOf(bonder, {\n  814                          blockTag\n  ...\n  816                      )\n  817                    } else {\n  818:                     balancePromises.push(Promise.resolve(0))\n  819                    }\n  820  \n  821                    if (hTokenContract) {\n  822:                     balancePromises.push(\n  823                        hTokenContract.balanceOf(bonder, {\n  824                          blockTag\n  ...\n  826                      )\n  827                    } else {\n  828:                     balancePromises.push(Promise.resolve(0))\n  829                    }\n  830  \n  831:                   balancePromises.push(\n  832                      archiveProvider.getBalance(bonder, blockTag)\n  833                    )\n  ...\n  845                        aliasAddress = oldArbitrumAliases[token]\n  846                      }\n  847:                     balancePromises.push(\n  848                        archiveProvider.getBalance(aliasAddress, blockTag)\n  849                      )\n  850                    } else {\n  851:                     balancePromises.push(Promise.resolve(0))\n  852                    }\n  853  \n  ...\n  855                      const messengerWrapperAddress = (mainnetAddresses as any)\n  856                        .bridges[token]['arbitrum'].l1MessengerWrapper\n  857:                     balancePromises.push(\n  858                        provider.getBalance(messengerWrapperAddress, blockTag)\n  859                      )\n  860                    } else {\n  861:                     balancePromises.push(Promise.resolve(0))\n  862                    }\n  863  \n  ...\n  868                      aliasBalance,\n  869                      messengerWrapperBalance\n  870:                   ] = await Promise.all(balancePromises)\n  871  \n  872                    bonderBalances[chain].canonical = balance\n  ...\n  995          }\n  996  \n  997:         await Promise.all(chainPromises)\n  998  \n  999          console.log('done fetching timestamp balances')\n\n~/Sandbox/hop/packages/stats-worker/src/Db.ts:\n  270  \n  271    async getPrices () {\n  272:     return new Promise((resolve, reject) => {\n  273        this.db.all(\n  274          'SELECT id, token, price, timestamp FROM token_prices;',\n  ...\n  346  \n  347    async getVolumeStats () {\n  348:     return new Promise((resolve, reject) => {\n  349        this.db.all(\n  350          'SELECT id, chain, token, amount, amount_usd, timestamp FROM volume_stats;',\n  ...\n  361  \n  362    async getTvlPoolStats () {\n  363:     return new Promise((resolve, reject) => {\n  364        this.db.all(\n  365          'SELECT id, chain, token, amount, amount_usd, timestamp FROM tvl_pool_stats;',\n\n~/Sandbox/hop/packages/stats-worker/src/PriceFeed.ts:\n    1  const cache: {\n    2:   [tokenSymbol: string]: Promise<any>\n    3  } = {}\n    4  \n\n~/Sandbox/hop/packages/stats-worker/src/TvlStats.ts:\n  177  \n  178      const cachedData: any = await this.db.getTvlPoolStats()\n  179:     const promises: Promise<any>[] = []\n  180      for (let token of tokens) {\n  181        promises.push(\n  182:         new Promise(async (resolve, reject) => {\n  183:           await Promise.all(\n  184              chains.map(async (chain: string) => {\n  185                try {\n\n~/Sandbox/hop/packages/stats-worker/src/VolumeStats.ts:\n  136      const now = Math.floor(DateTime.utc().toSeconds())\n  137  \n  138:     await Promise.all(\n  139        chains.map(async (chain: string) => {\n  140          const startDate = now - (daysN - 1) * 24 * 60 * 60\n\n~/Sandbox/hop/packages/stats-worker/src/worker.ts:\n  108      console.log('worker started')\n  109      console.log(`polling every ${this.pollIntervalMs}ms`)\n  110:     const promises: Promise<any>[] = []\n  111      if (this.yields) {\n  112        promises.push(this.yieldStatsPoll())\n  ...\n  127        throw new Error('at least one option is required')\n  128      }\n  129:     await Promise.all(promises)\n  130    }\n  131  \n\n~/Sandbox/hop/packages/stats-worker/src/YieldStats.ts:\n  145      let yieldData: YieldData = this.initializeYieldData(this.bridges)\n  146      for (let token in this.bridges) {\n  147:       const promises: Promise<any>[] = []\n  148        for (let chain in this.bridges[token]) {\n  149          const shouldSkip = this.shouldSkipYields(this.bridges, chain, token)\n  ...\n  193        // RPC endpoints cannot handle too many chain/token combinations at once. To avoid this,\n  194        // get all chains for a given token before proceeding to the next token\n  195:       await Promise.all(promises)\n  196      }\n  197  \n  ...\n  282    }\n  283  \n  284:   async addCachedDataToYieldData (yieldData: YieldData): Promise<YieldData> {\n  285      const url = `https://assets.hop.exchange/v1.1-pool-stats.json`\n  286      const cachedRes: any = await fetch(url)\n  ...\n  458    }\n  459  \n  460:   async getYieldData (token: string, chain: string): Promise<YieldDataRes> {\n  461      const bridge = this.sdk.bridge(token)\n  462      const amm = bridge.getAmm(chain)\n  ...\n  474      token: string,\n  475      chain: string\n  476:   ): Promise<StakingYieldDataRes[]> {\n  477      const bridge = this.sdk.bridge(token)\n  478      const canonToken = bridge.getCanonicalToken(chain)\n\n~/Sandbox/hop/packages/stats-worker/src/utils/getBlockNumberFromDate.ts:\n    8    provider: any,\n    9    timestamp: number\n   10: ): Promise<number> {\n   11    try {\n   12      const useEtherscan = etherscanApiKeys[chain]\n   ..\n   25    chain: string,\n   26    timestamp: number\n   27: ): Promise<number> {\n   28    const apiKey = etherscanApiKeys[chain]\n   29    if (!apiKey) {\n   ..\n   52    provider: any,\n   53    timestamp: number\n   54: ): Promise<number> {\n   55    if (!provider) {\n   56      throw new Error('provider is required')\n\n~/Sandbox/hop/packages/frontend/src/pages/Pools/PoolsContext.tsx:\n  424        const bridge = sdk.bridge(canonicalToken.symbol)\n  425        const lpToken = bridge.getSaddleLpToken(selectedNetwork.slug)\n  426:       const [reserves, lpTokenTotalSupply] = await Promise.all([\n  427          bridge.getSaddleSwapReserves(selectedNetwork.slug),\n  428          lpToken.totalSupply(),\n  ...\n  484        const lpToken = bridge.getSaddleLpToken(selectedNetwork.slug)\n  485  \n  486:       const [_totalSupplyBn, balance, reserves] = await Promise.all([\n  487          (await lpToken.getErc20()).totalSupply(),\n  488          lpToken.balanceOf(),\n\n~/Sandbox/hop/packages/frontend/src/pages/Pools/useStakingAll.tsx:\n   61          }\n   62        }\n   63:       await Promise.all(promises.map(fn => fn()))\n   64        setTotalEarnedBn(_totalEarnedBn)\n   65        setTxList(_txList)\n\n~/Sandbox/hop/packages/frontend/src/pages/Pools/PoolsOverview/usePools.tsx:\n  128          return cache.base\n  129        }\n  130:       const _pools = await Promise.all(basePools.map(async (_pool: any) => {\n  131          const pool = Object.assign({}, _pool)\n  132          const tokenSymbol = pool.token.symbol\n  ...\n  184              const lpToken = bridge.getSaddleLpToken(pool.chain.slug)\n  185              const tokenDecimals = bridge.getTokenDecimals()\n  186:             const [poolReserves, lpTokenTotalSupplyBn, lpBalance] = await Promise.all([\n  187                bridge.getSaddleSwapReserves(pool.chain.slug),\n  188                lpToken.totalSupply(),\n  ...\n  217                  const _provider = sdk.getChainProvider(pool.chain.slug)\n  218                  const contract = StakingRewards__factory.connect(address, _provider)\n  219:                 const [stakedBalance, earned] = await Promise.all([\n  220                    contract?.balanceOf(accountAddress),\n  221                    contract?.earned(accountAddress)\n  ...\n  242                  const _provider = sdk.getChainProvider(chainSlug)\n  243                  const contract = StakingRewards__factory.connect(hopStakingContractAddress, _provider)\n  244:                 const [stakedBalance, earned] = await Promise.all([\n  245                    contract?.balanceOf(accountAddress),\n  246                    contract?.earned(accountAddress)\n\n<untitled 232>:\n    ERROR: Unable to open file\n\n1529 matches across 147 files\n",
			"settings":
			{
				"buffer_size": 593819,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "packages/frontend/src/pages/Pools/PoolDetails/TopPoolStats.tsx",
			"redo_stack":
			[
				[
					157,
					1,
					"left_delete",
					null,
					"AQAAAGsPAAAAAAAAcQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaw8AAAAAAABrDwAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 5051,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAABkCAAAAAAAAGgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQIAAAAAAAAZAgAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAC8CAAAAAAAAMAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwIAAAAAAAAvAgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAACoDAAAAAAAAKwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgMAAAAAAAAqAwAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAABsEAAAAAAAAHAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGwQAAAAAAAAbBAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADcPAAAAAAAAOA8AAAAAAAAAAAAAOA8AAAAAAABADwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANw8AAAAAAAA3DwAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAEAPAAAAAAAAQg8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQA8AAAAAAABADwAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"left_delete",
					null,
					"AQAAAEEPAAAAAAAAQQ8AAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAQg8AAAAAAABCDwAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"indent",
					null,
					"DAAAAEIPAAAAAAAARA8AAAAAAAAAAAAA9g8AAAAAAAD4DwAAAAAAAAAAAAAPEAAAAAAAABEQAAAAAAAAAAAAAEoQAAAAAAAATBAAAAAAAAAAAAAA2xAAAAAAAADdEAAAAAAAAAAAAAA3EQAAAAAAADkRAAAAAAAAAAAAAKsRAAAAAAAArREAAAAAAAAAAAAAxBEAAAAAAADGEQAAAAAAAAAAAAD2EQAAAAAAAPgRAAAAAAAAAAAAAA0SAAAAAAAADxIAAAAAAAAAAAAAKRIAAAAAAAArEgAAAAAAAAAAAAA8EgAAAAAAAD4SAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANRIAAAAAAABCDwAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAABETAAAAAAAAEhMAAAAAAAAAAAAAEhMAAAAAAAAaEwAAAAAAAAAAAAAaEwAAAAAAABsTAAAAAAAAAAAAABITAAAAAAAAEhMAAAAAAAAIAAAAICAgICAgICASEwAAAAAAABgTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAERMAAAAAAAAREwAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAABgTAAAAAAAAGhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGBMAAAAAAAAYEwAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					6,
					"left_delete",
					null,
					"BgAAABoTAAAAAAAAGhMAAAAAAAABAAAAfRgTAAAAAAAAGBMAAAAAAAACAAAAICAWEwAAAAAAABYTAAAAAAAAAgAAACAgFBMAAAAAAAAUEwAAAAAAAAIAAAAgIBITAAAAAAAAEhMAAAAAAAACAAAAICAREwAAAAAAABETAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAGxMAAAAAAAAaEwAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAITAAAAAAAAAxMAAAAAAAAAAAAAAxMAAAAAAAANEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAhMAAAAAAAACEwAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"left_delete",
					null,
					"AQAAAAsTAAAAAAAACxMAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAADRMAAAAAAAANEwAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAAsTAAAAAAAADBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACxMAAAAAAAALEwAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "\nhideA"
					},
					"CAAAAEEPAAAAAAAAQg8AAAAAAAAAAAAAQg8AAAAAAABKDwAAAAAAAAAAAABKDwAAAAAAAEwPAAAAAAAAAAAAAEwPAAAAAAAATQ8AAAAAAAAAAAAATQ8AAAAAAABODwAAAAAAAAAAAABODwAAAAAAAE8PAAAAAAAAAAAAAE8PAAAAAAAAUA8AAAAAAAAAAAAAUA8AAAAAAABRDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQ8AAAAAAABBDwAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "PR"
					},
					"AgAAAFEPAAAAAAAAUg8AAAAAAAAAAAAAUg8AAAAAAABTDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQ8AAAAAAABRDwAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					3,
					"left_delete",
					null,
					"AwAAAFIPAAAAAAAAUg8AAAAAAAABAAAAUlEPAAAAAAAAUQ8AAAAAAAABAAAAUFAPAAAAAAAAUA8AAAAAAAABAAAAQQ",
					"AQAAAAAAAAABAAAAUw8AAAAAAABTDwAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": "HigherAP"
					},
					"CAAAAFAPAAAAAAAAUQ8AAAAAAAAAAAAAUQ8AAAAAAABSDwAAAAAAAAAAAABSDwAAAAAAAFMPAAAAAAAAAAAAAFMPAAAAAAAAVA8AAAAAAAAAAAAAVA8AAAAAAABVDwAAAAAAAAAAAABVDwAAAAAAAFYPAAAAAAAAAAAAAFYPAAAAAAAAVw8AAAAAAAAAAAAAVw8AAAAAAABYDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUA8AAAAAAABQDwAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "RMes"
					},
					"BAAAAFgPAAAAAAAAWQ8AAAAAAAAAAAAAWQ8AAAAAAABaDwAAAAAAAAAAAABaDwAAAAAAAFsPAAAAAAAAAAAAAFsPAAAAAAAAXA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWA8AAAAAAABYDwAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "sage"
					},
					"BAAAAFwPAAAAAAAAXQ8AAAAAAAAAAAAAXQ8AAAAAAABeDwAAAAAAAAAAAABeDwAAAAAAAF8PAAAAAAAAAAAAAF8PAAAAAAAAYA8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXA8AAAAAAABcDwAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAGAPAAAAAAAAYQ8AAAAAAAAAAAAAYQ8AAAAAAABiDwAAAAAAAAAAAABiDwAAAAAAAGMPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYA8AAAAAAABgDwAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "@"
					},
					"AQAAAEwPAAAAAAAATQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATA8AAAAAAABMDwAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"left_delete",
					null,
					"AQAAAEwPAAAAAAAATA8AAAAAAAABAAAAQA",
					"AQAAAAAAAAABAAAATQ8AAAAAAABNDwAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAEwPAAAAAAAATQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATA8AAAAAAABMDwAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "\n<>"
					},
					"BAAAAGQPAAAAAAAAZQ8AAAAAAAAAAAAAZQ8AAAAAAABvDwAAAAAAAAAAAABvDwAAAAAAAHAPAAAAAAAAAAAAAHAPAAAAAAAAcQ8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZA8AAAAAAABkDwAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"indent",
					null,
					"EAAAAHIPAAAAAAAAdA8AAAAAAAAAAAAAKBAAAAAAAAAqEAAAAAAAAAAAAABDEAAAAAAAAEUQAAAAAAAAAAAAAIAQAAAAAAAAghAAAAAAAAAAAAAAExEAAAAAAAAVEQAAAAAAAAAAAABxEQAAAAAAAHMRAAAAAAAAAAAAAOcRAAAAAAAA6REAAAAAAAAAAAAAAhIAAAAAAAAEEgAAAAAAAAAAAAA2EgAAAAAAADgSAAAAAAAAAAAAAE8SAAAAAAAAURIAAAAAAAAAAAAAbRIAAAAAAABvEgAAAAAAAAAAAACCEgAAAAAAAIQSAAAAAAAAAAAAAJYSAAAAAAAAmBIAAAAAAAAAAAAA0RIAAAAAAADTEgAAAAAAAAAAAAAkEwAAAAAAACYTAAAAAAAAAAAAAEATAAAAAAAAQhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMhMAAAAAAAByDwAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFITAAAAAAAAUxMAAAAAAAAAAAAAUxMAAAAAAABfEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUhMAAAAAAABSEwAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"left_delete",
					null,
					"AQAAAF0TAAAAAAAAXRMAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAXxMAAAAAAABfEwAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "</>"
					},
					"AwAAAF0TAAAAAAAAXhMAAAAAAAAAAAAAXhMAAAAAAABfEwAAAAAAAAAAAABfEwAAAAAAAGATAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXRMAAAAAAABdEwAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					2,
					"left_delete",
					null,
					"AgAAAFMTAAAAAAAAUxMAAAAAAAAXAAAAICAgICAgICAgIDwvPgogICAgICAgIH1SEwAAAAAAAFITAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAahMAAAAAAABTEwAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGETAAAAAAAAYhMAAAAAAAAAAAAAYhMAAAAAAABqEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYRMAAAAAAABhEwAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"paste",
					null,
					"AQAAAGoTAAAAAAAAgRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAahMAAAAAAABqEwAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					4,
					"left_delete",
					null,
					"BAAAAHITAAAAAAAAchMAAAAAAAACAAAAICBwEwAAAAAAAHATAAAAAAAAAgAAACAgbhMAAAAAAABuEwAAAAAAAAIAAAAgIGwTAAAAAAAAbBMAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAdBMAAAAAAAB0EwAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAFsTAAAAAAAAXRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWxMAAAAAAABbEwAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAF0TAAAAAAAAXxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXRMAAAAAAABdEwAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAKQSAAAAAAAAphIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApBIAAAAAAACkEgAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAOMSAAAAAAAA5RIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4xIAAAAAAADjEgAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAADYTAAAAAAAAOBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANhMAAAAAAAA2EwAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAFITAAAAAAAAVBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUhMAAAAAAABSEwAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "Alter"
					},
					"BgAAAFoPAAAAAAAAWw8AAAAAAAAAAAAAWw8AAAAAAABbDwAAAAAAAAcAAABNZXNzYWdlWw8AAAAAAABcDwAAAAAAAAAAAABcDwAAAAAAAF0PAAAAAAAAAAAAAF0PAAAAAAAAXg8AAAAAAAAAAAAAXg8AAAAAAABfDwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQ8AAAAAAABaDwAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					3,
					"left_delete",
					null,
					"AwAAAF4PAAAAAAAAXg8AAAAAAAABAAAAcl0PAAAAAAAAXQ8AAAAAAAABAAAAZVwPAAAAAAAAXA8AAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAXw8AAAAAAABfDwAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": "ert"
					},
					"AwAAAFwPAAAAAAAAXQ8AAAAAAAAAAAAAXQ8AAAAAAABeDwAAAAAAAAAAAABeDwAAAAAAAF8PAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXA8AAAAAAABcDwAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "props."
					},
					"BgAAAE0PAAAAAAAATg8AAAAAAAAAAAAATg8AAAAAAABPDwAAAAAAAAAAAABPDwAAAAAAAFAPAAAAAAAAAAAAAFAPAAAAAAAAUQ8AAAAAAAAAAAAAUQ8AAAAAAABSDwAAAAAAAAAAAABSDwAAAAAAAFMPAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQ8AAAAAAABNDwAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEcCAAAAAAAASAIAAAAAAAAAAAAASAIAAAAAAABKAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwIAAAAAAABHAgAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"paste",
					null,
					"AQAAAEoCAAAAAAAAXAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgIAAAAAAABKAgAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAFwCAAAAAAAAXQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAIAAAAAAABcAgAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": " boolean"
					},
					"CAAAAF0CAAAAAAAAXgIAAAAAAAAAAAAAXgIAAAAAAABfAgAAAAAAAAAAAABfAgAAAAAAAGACAAAAAAAAAAAAAGACAAAAAAAAYQIAAAAAAAAAAAAAYQIAAAAAAABiAgAAAAAAAAAAAABiAgAAAAAAAGMCAAAAAAAAAAAAAGMCAAAAAAAAZAIAAAAAAAAAAAAAZAIAAAAAAABlAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQIAAAAAAABdAgAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Remove Package"
			],
			[
				"upda",
				"Package Control: Upgrade Package"
			],
			[
				"package",
				"Preferences: Package Control Settings"
			],
			[
				"Package Control Setting",
				"Preferences: Package Control Settings"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"brows",
				"Preferences: Browse Packages"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/maxandrew/Sandbox/hop"
	],
	"file_history":
	[
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/Rebalancer/Sections/NetworkSelection.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/Rebalancer/Sections/UnstakeWithdraw.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/Rebalancer/Sections/Unwrap.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/Rebalancer/Sections/Bridge.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/Rebalancer/Sections/BridgingStatus.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/Rebalancer/Sections/Wrap.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/Rebalancer/Sections/Deposit.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/Rebalancer/Sections/Stake.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/Rebalancer/Footer.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/Rebalancer/Sections/Subsections/Header.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/Rebalancer/Sections/Subsections/StatusMessage.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/contexts/Web3Context.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/modal/RebalanceModal.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/txConfirm/AddLiquidity.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/txConfirm/TxList.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Pools/useStaking.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/buttons/StyledButton.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/Button/Button.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Pools/PoolsContext.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/txConfirm/AddLiquidityAndStake.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/hooks/useBalance.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/txConfirm/TxConfirm.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/NetworkSelector/RaisedNetworkSelector.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/modal/StyledModal.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/models/Transaction.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/modal/TxStatusModal.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/utils/networks.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Send/SendAmountSelectorCard.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Pools/usePoolStats.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/models/Network.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Pools/components/InputField.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Pools/index.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/core/src/addresses/goerli.ts",
		"/Users/maxandrew/Sandbox/hop/packages/core/src/networks/mainnet.ts",
		"/Users/maxandrew/Sandbox/hop/packages/core/src/addresses/mainnet.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/config/goerli.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/config/index.ts",
		"/Users/maxandrew/Sandbox/hop/packages/core/README.md",
		"/Users/maxandrew/Sandbox/hop/packages/core/abi/index.js",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/hooks/useSelectedNetwork.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/hooks/useTransactionStatus.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/core/addresses/goerli.js",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/TokenWrapper/TokenWrapper.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/TokenWrapper/TokenWrapperContext.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/sdk/src/HopBridge.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/hooks/useEstimateTxCost.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Send/useSendTransaction.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Send/Send.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/core/src/abi/generated/L2_Bridge.json",
		"/Users/maxandrew/Sandbox/hop/packages/sdk/src/watchers/L1ToL2Watcher.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/InfoTooltip/FeeDetails.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/hop-node/test/utils/helpers.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/config/addresses.ts",
		"/Users/maxandrew/Sandbox/hop/packages/core/src/networks/goerli.ts",
		"/Users/maxandrew/Sandbox/hop/packages/core/src/metadata/chains.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Pools/PoolDetails/PoolDetails.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/api/README.md",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Pools/PoolsOverview/usePools.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/hop-node/src/cli/swap.ts",
		"/Users/maxandrew/Sandbox/hop/packages/core/src/metadata/goerli.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Claim/useClaim.ts",
		"/Users/maxandrew/Sandbox/hop/packages/sdk/src/config/mainnet.ts",
		"/Users/maxandrew/Sandbox/hop/packages/sdk/src/config/goerli.ts",
		"/Users/maxandrew/Sandbox/hop/packages/sdk/src/provider/index.ts",
		"/Users/maxandrew/Sandbox/hop/packages/sdk/src/provider/Provider.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/contexts/AppContext/AppContext.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/contexts/AppContext/useBridges.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/config/networks.ts",
		"/Users/maxandrew/Sandbox/hop/packages/sdk/src/Hop.ts",
		"/Users/maxandrew/Sandbox/hop/packages/sdk/src/index.ts",
		"/Users/maxandrew/Sandbox/hop/packages/sdk/src/config/config.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/contexts/AppContext/useSettings.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/utils/createTransaction.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/NetworkSelector/NetworkSelector.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/header/ConnectWalletButton.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/core/src/networks/kovan.ts",
		"/Users/maxandrew/Sandbox/hop/packages/core/src/abi/generated/Swap.json",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/utils/queries.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/utils/getBonderFeeWithId.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/config/config.ts",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Send/index.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/core/abi/generated/Swap.json",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/hooks/useTransaction.ts",
		"/Users/maxandrew/Library/Mobile Documents/com~apple~CloudDocs/Documents/Carestaker/Hop/Sybil known addresses",
		"/Users/maxandrew/Library/Mobile Documents/com~apple~CloudDocs/Documents/Self/Jobs/Braintrust/React experience",
		"/Users/maxandrew/Library/Mobile Documents/com~apple~CloudDocs/Documents/Self/Jobs/Braintrust/Node experience",
		"/Users/maxandrew/Library/Mobile Documents/com~apple~CloudDocs/Documents/Carestaker/Hop/Chris call 3-27",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/txConfirm/WithdrawReview.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Withdraw/Withdraw.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/footer/useBlockNumber.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/accountDetails/AccountDetails.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Pools/PoolDetails/TopPoolStats.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/modal/Modal.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/txConfirm/WithdrawStake.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/txConfirm/UnstakeAndRemoveLiquidity.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/core/abi/static/L2_BridgeWrapper.json",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/abis/MerkleRewards.json",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/components/txConfirm/RemoveLiquidity.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Pools/PoolDetails/DepositForm.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Transaction/TransactionDetails.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/AppRoutes.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/App.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Pools/PoolDetails/index.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Pools/PoolDetails/StakeForm.tsx",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Pools/PoolsOverview/PoolsOverview.tsx",
		"<untitled 273>",
		"/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Pools/PoolDetails/useStyles.tsx",
		"/Users/maxandrew/Sandbox/portfolio/app/page.tsx",
		"/Users/maxandrew/Sandbox/briefly/components/HeadlineBlock.js",
		"/Users/maxandrew/Sandbox/portfolio/tailwind.config.js",
		"/Users/maxandrew/Sandbox/briefly/package.json",
		"/Users/maxandrew/Library/Mobile Documents/com~apple~CloudDocs/Documents/Carestaker/Hop/Airdrop recipient reachout",
		"/Users/maxandrew/Library/Mobile Documents/com~apple~CloudDocs/Documents/Carestaker/Hop/[RFC] Reopen HOP airdrop window",
		"/Users/maxandrew/Library/Mobile Documents/com~apple~CloudDocs/Documents/Self/Jobs/Personal site",
		"/Users/maxandrew/Library/Mobile Documents/com~apple~CloudDocs/Documents/Carestaker/Hop/Hop Grants Program",
		"/Users/maxandrew/Library/Mobile Documents/com~apple~CloudDocs/Documents/Carestaker/Hop/Rebalancer proposal",
		"/Users/maxandrew/Library/Mobile Documents/com~apple~CloudDocs/Documents/Carestaker/Hop/Community call Feb 22",
		"/Users/maxandrew/Library/Mobile Documents/com~apple~CloudDocs/Documents/Carestaker/Hop/Filecoin rollup proposal",
		"/Users/maxandrew/Library/Mobile Documents/com~apple~CloudDocs/Documents/Carestaker/Hop/Uniswap liquidity deployment",
		"/Users/maxandrew/Library/Mobile Documents/com~apple~CloudDocs/Documents/Substack/Layoffs and our deal with the devil",
		"/Users/maxandrew/Library/Mobile Documents/com~apple~CloudDocs/Documents/Carestaker/Hop/HIP-20",
		"/Users/maxandrew/Library/Mobile Documents/com~apple~CloudDocs/Documents/Nogrammer/Open source discount",
		"/Users/maxandrew/Library/Mobile Documents/com~apple~CloudDocs/Documents/Rightoken/Cause of death",
		"/Users/maxandrew/Library/Mobile Documents/com~apple~CloudDocs/Documents/Carestaker/Hop/Multiple ambassadors reasoning",
		"/Users/maxandrew/Library/Mobile Documents/com~apple~CloudDocs/Documents/Carestaker/Hop Grants Program",
		"/Users/maxandrew/Library/Mobile Documents/com~apple~CloudDocs/Documents/Carestaker/Hop/sUSD Vote",
		"/Users/maxandrew/Downloads/blob.csv",
		"/Users/maxandrew/Library/Mobile Documents/com~apple~CloudDocs/Documents/StoryArc/Arc/Past/Saybrook/saybrook/index.html"
	],
	"find":
	{
		"height": 54.0
	},
	"find_in_files":
	{
		"height": 134.0,
		"where_history":
		[
			"<project>,<current file>,<open files>,<open folders>",
			"<project>,<current file>,<open files>,<open folders>,-*.doc,*.txt"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"Promise",
			"alert",
			"networkHasHighestYield",
			"Get Higher APR",
			"RebalancerModal",
			"selectedNetwork",
			"chainSlug",
			"setNetworksWithYields",
			"setShowRebalanceModal",
			"RebalanceModa",
			"TopPoolStats",
			"RebalanceModal",
			"Rebalance",
			"poolStats",
			"networks",
			"close",
			"sections",
			"section",
			"address",
			"getTokensAreStaked",
			"getDeadline",
			"console.log(numberOfBridgedTokensReceived)",
			"tokensAreStaked",
			"debugStateVars",
			"address",
			"Contract",
			"BigNumber",
			"usePoolStats",
			"networkSlugToId",
			"networkIdToSlug",
			"stakingRewardsAbi",
			"hopStakingRewardsContracts",
			"addresses",
			"tokensAreStaked",
			"networkSlugToId",
			"networkIdToSlug",
			"usePoolStats",
			"reactAppNetwork",
			"useSelectedNetwork",
			"useApp",
			"stakingRewardsAbi",
			"hopStakingRewardsContracts",
			"metadata",
			"networks.",
			"networks",
			"addresses",
			"saddleSwapAbi",
			"addresses",
			"wrapETh",
			"wrapETH",
			"Typography",
			"Box",
			"Grid",
			"Box",
			"Divider",
			"Typography",
			"Box",
			"bondTxHash",
			"checkBridgeStatusAndSetBondHash",
			"setBondTx",
			"setNumberOfBridgedTokensReceived",
			"set",
			"setBondTxHash",
			"bridgeTxHash",
			"\"here\"",
			"here",
			"setDes",
			"selectedNetw",
			"confirm bridge",
			"setBridgedTokenData",
			"error",
			"NetworkSelectionSection",
			"Modal",
			"Button",
			"Typography",
			"Box",
			"Grid",
			"networkSlugToId",
			"networkIdToSlug",
			"usePoolStats",
			"bondTxHash",
			"chainSlug",
			"chainSlig",
			"changeNetwork",
			"change",
			"currentStep",
			"changeNetwork",
			"change",
			"sections",
			"BridgeData",
			"Status",
			"getStatus",
			"unwrapIfNativeToken",
			"currentStep",
			"necess",
			"tokenSymbol === \"DAI\"",
			"tokenSymbol=\"DAI",
			"approve",
			"typeof",
			"getHuman",
			"erc20PositionBalance",
			"Theme",
			"makeStyles",
			"isDarkMode",
			"networkSlugToId",
			"networkIdToSlug",
			"addresses",
			"destinationNet",
			"approveToken",
			"L2_AmmWrapperAbi",
			"address",
			"chainSlug",
			"yield",
			"changeNetwork",
			"mismatch",
			"networkIdToSlug",
			"networkSlugToId",
			"poolStats",
			"networksWithYields",
			"selectedNetwork",
			"selectSourceNetwork",
			"chainSlug",
			"selectedNetwork",
			"setDestinationNetwork",
			"networkSlugToId",
			"networkIdToSlug",
			"PoolStats",
			"[string,"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "/Users/maxandrew/Sandbox/hop"
		},
		{
			"path": "/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Send"
		},
		{
			"path": "/Users/maxandrew/Sandbox/hop/packages/frontend/src/pages/Pools"
		}
	],
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "packages/frontend/src/pages/Pools/PoolDetails/PoolDetails.tsx",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16683,
						"regions":
						{
						},
						"selection":
						[
							[
								5667,
								5667
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/TSX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "packages/frontend/src/components/Rebalancer/Modal.tsx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10107,
						"regions":
						{
						},
						"selection":
						[
							[
								8058,
								8058
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/TSX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1703.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "packages/frontend/src/components/Rebalancer/Sections/NetworkSelection.tsx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3386,
						"regions":
						{
						},
						"selection":
						[
							[
								2867,
								2867
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/TSX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 463.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 593819,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions": "",
								"scope": ""
							}
						},
						"selection":
						[
							[
								349425,
								349425
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 6,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 168590.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "packages/frontend/src/pages/Pools/PoolDetails/TopPoolStats.tsx",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5051,
						"regions":
						{
						},
						"selection":
						[
							[
								3953,
								3947
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/TSX.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 1.0,
						"translation.y": 1178.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 191.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"formatCurrency"
			],
			[
				"formatCurrency",
				"formatCurrency"
			]
		],
		"width": 580.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
